CODE

Build order: 
	test source SQL, 
	generate wrapper (only part working thus far)
	test wrapper, 
	compare source and generated resultsets
	
IntelliJ plugin
Generated code has test method
Generated code has verify schema method
Add runtime "tested" flag to generated code
read latest jdbc spec


x  patch ANTLR 4.10.1 to add 'getRuleName' to generated context subclasses
verify SQL comments work
dump human readable parsetree for debugging
when result column is an expression, isolate and execute expression to determine data type
Add support for date (et al) data type condition parameters
When column, table, etc not found, suggest alternative
	"column 'appel' not found in table 'fruit', did you mean 'apple'?"
Maybe not fail on first schema error, so that if multiple column, table are wrong, report all.

For UPDATEs, is there a strategy for optimistic locking, eg pick the version column?
ID Generators
	Detect identity columns for inserts, updates
use better timestamp in generated files
have generated files' javadoc reference each other?
add Fado's revision to generated files
	
Figure out something for transactions 
	maybe nothing, just use JDBC
Better strategy for converting SQL column names into Java variables/accessors
	Capitalizer, or alias list, or...

Different templates for different types of SELECT
   - normal readonly ResultSet, default
   - single column ResultSet eg SELECT Name FROM Person, iterate over values (vs rows)
   - single value ResultSet eg SELECT Count( * ) FROM Person, no iteration
   - single *typed* value ResultSet eg SELECT Count( * ) > 0 FROM Person, no iteration
   - updateable ResultSet, probably new interface: eg implements Iterable<Row>

support MySQL aggregate functions?
    https://www.mysqltutorial.org/mysql-aggregate-functions.aspx

support H2 dynamic tables?
    http://www.h2database.com/html/systemtables.html?highlight=SYSTEM_RANGE&search=system_range#firstFound
    select sum(mod(x, 2) = 1) from system_range(1, 10);

support 'FILTER' and 'OVER' clauses for aggregate functions?

GRAMMARS

Full SQL-92
TransactSQL
unit tests

DOCS

Compare SQL strategies, pros/cons
	string builder
		pros
			low entry point
		cons 
			tough to debug
			tough to test
	API (e.g. Toplink)
	ORM
		cons
			mapping files suck
			JOINs suck
			complicated queries revert to SQL/HQL
			tough to debug
	Fado generator
		pros
			ease of use, typesafe wrappers
			great for read-only, e.g. report engines
			JOINs are easy
			division of labor: 
				DBA role does SQL, API for Java hides SQL
				SQL and Java kept separate
				one-way work flow
			verification at time of code generation
			moves many common errors from runtime to compile time
		cons
			no support for transactions
			
	DAOs
		cons
			hand written
			
BUGS
grammar accepts 'SELECT id, FROM Legislation', should barf on tailing comma
misses incorrect table name and reports column not found
grammar for dates are not to spec eg 'yyyy-MM-dd hh:mm:ss' 

boolean expressions in SELECT columns (eg 'this || that') don't parse correctly

unary negative conditions don't capture the leading minus (eg "WHERE ID = -1" -> "WHERE ID = -?" )
