## Fado's SELECT Statement Template for Java & JDBC
##
## Copyright 2022, 2014, 2011, 2010 Jason Osgood
##
## Template Parameters:
##
##     date - current timestamp
##     packageName - target Java package name as String
##     className - target Java class name as String
##     sourceFile - name of original .sql file
##     originalSQL - original unparsed SQL
##     preparedSQL - prepared statement version of originalSQL
##     printfSQL - printf version of originalSQL, for debugging
##     accessors - List<Accessor>, meta data for getters and setters
/**
* ${className}.java   ${date}
*
* Generated using Fado's Select.vm template. Original SQL:
*
## TODO: Should this be a JavaDoc @snippet?
* <pre>
* {@code
#foreach( $line in $originalSQL.split('\n') )
* $line
#end
* }
* </pre>
*
* @see ${sourceFile}
*
**/

## TODO add null check here
package ${packageName};

import java.sql.*;
import javax.sql.DataSource;
import java.math.BigDecimal;

public class
	${className}
{
	private PreparedStatement __ps = null;

    ## add back each '\n', then concat each line with '+', then end with ';'
	public final String __preparedSQL =
		#foreach( $line in $preparedSQL.split('\n') )
		"${line}#if($foreach.hasNext)\n#end"#if($foreach.hasNext)+ #else; #end
		#end

    ## add back each '\n' (as %n), then concat each line with '+', then end with ';'
	public final String __printfSQL =
		#foreach( $line in $printfSQL.split('\n') )
		"${line}#if($foreach.hasNext)%n#end"#if($foreach.hasNext)+ #else; #end
		#end

	/**
		Pass a Connection. You are responsible for closing that Connection.
		${className} is a wrapper for a PreparedStatement, not a Connection.
	**/
	public ${className}( Connection connection, int resultSetType, int resultSetConcurrency )
		throws SQLException
	{
		__ps = connection.prepareStatement( __preparedSQL, resultSetType, resultSetConcurrency );
	}

	public ${className}( Connection connection )
		throws SQLException
	{
		this( connection, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
	}

	/**
		Pass a DataSource. You are responsible for closing that DataSource.
		${className} is a wrapper for a PreparedStatement, not a Connection.
	**/
	public ${className}( DataSource dataSource, int resultSetType, int resultSetConcurrency )
		throws SQLException
	{
		this( dataSource.getConnection(), resultSetType, resultSetConcurrency );
	}

	public ${className}( DataSource dataSource )
		throws SQLException
	{
		this( dataSource, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
	}

	public final ${className}ResultSet execute()
		throws SQLException
	{
        #foreach( $a in $accessors )
        __ps.set${a.clazz}( ${a.nth}, ${a.getter}() );
        #end

        ResultSet rs = null;
        if( __ps.execute() )
        {
            rs = __ps.getResultSet();
        }
        ${className}ResultSet result = new ${className}ResultSet( rs );
        return result;
    }

    #foreach( $a in $accessors )
    private ${a.clazz} _${a.variable} = ${a.asCode};
    public void ${a.setter}( ${a.clazz} ${a.variable} ) { _${a.variable} = ${a.variable}; }
    public ${a.clazz} ${a.getter}() { return _${a.variable}; }

    #end

	public String toString()
	{
		return String.format( __printfSQL
            #foreach( $a in $accessors )
            , ${a.getter}()
            #end
		);
	}
}