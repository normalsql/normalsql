## NormalSQL
##
## ResultSet Template for Java & JDBC
## 
## Copyright 2022, 2014, 2011, 2010 Jason Osgood
##
## Template Parameters:
##
##     date - current timestamp
##     packageName - target Java package name as String
##     resultSetClassName - target Java class name for ResultSet wrapper as String
##     sourceFile - name of original .sql file
##     originalSQL - original unparsed SQL
##     printfSQL - like preparedSQL, but for printf
##     sourceFile - name of original .sql file
##     resultSetProperties - List<Property>, meta data for getters and setters
/**
* ${resultSetClassName}.java ${date}
*
* Generated using NormalSQL's ResultSet.vm template.
*
* @see ${sourceFile}
*
**/

## TODO add null check here
package ${packageName};

import java.sql.*;
import java.math.BigDecimal;

public class 
	${resultSetClassName}
{
	private ResultSet __resultSet = null;

	public ${resultSetClassName}( ResultSet resultSet )
	{
		__resultSet = resultSet;
	}

	public final ResultSet getResultSet()
	{
		return __resultSet;
	}

	public boolean getSuccess()
	{
		return __resultSet != null;
	}

	/**
		Closes the contained ResultSet instance. Also closes contained Connection instance
		created via a DataSource connection factory.
	**/
	public void close()
		throws SQLException
	{
		if( __resultSet != null )
		{
			__resultSet.close();
			__resultSet = null;
		}
		Connection connection = getConnection();
		if( connection != null )
		{
			connection.close();
		}
	}

	private Connection __connection = null;

	public void setConnection( Connection connection )
	{
		__connection = connection;
	}

	public Connection getConnection()
	{
		return __connection;
	}

	public final boolean hasNext()
		throws SQLException
	{
		ResultSet rs = getResultSet();
		if( rs == null ) return false;
		boolean	success = rs.next();
		if( success )
		{
			#foreach( $p in $resultSetProperties )
			_${p.variable} = rs.get${p.classShortName}( ${p.nth} );
			#if( $a.isNullable )
			_${p.variable}_wasNull = !rs.wasNull();
			#end

			#end
		}
		return success;
	}

	/**
     *  Attempt to count this ResultSet's number of rows.
     *  @return number of rows. Or -1 if ResultSet's scroll type is TYPE_FORWARD_ONLY
     *  or if any exception occurs.
     */
	public int countRows()
	{
		int result = -1;
		try
		{
			ResultSet rs = getResultSet();
			if( rs.getType() != ResultSet.TYPE_FORWARD_ONLY )
			{
				int current = rs.getRow();
				if( rs.last() )
				{
					result = rs.getRow();
					if( current == 0 )
					{
						rs.beforeFirst();
					}
					else
					{
						rs.absolute( current );
					}
				}
			}
		}
		catch( SQLException e )
		{
			e.printStackTrace();
		}
		return result;
	}

	#foreach( $p in $resultSetProperties )
	private ${p.classShortName} _${p.variable} = ${p.initial};
	/** column "${p.source}" **/
	public ${p.classShortName} ${p.getter}() { return _${p.variable}; }
	#if( $p.isNullable )
	private boolean _${p.variable}_wasNull = false;
	/** returns true if column "${p.source}" was NULL **/
	public boolean ${p.getter}WasNull() { return _${p.variable}_wasNull; }
	#end

	#end

	// TODO switch from StringBuilder to printf
	public String toString()
	{
		if( getResultSet() == null )
		{
			return "No results";
		}
		StringBuilder sb = new StringBuilder();
		sb.append( "#row: " );
		sb.append( getRow() );
		sb.append( ", \n" );
		#foreach( $p in $resultSetProperties )
		sb.append( "${p.variable}: " );
		sb.append( ${p.getter}() );
		#if( $p.isNullable )
		sb.append( "(was null: " );
		sb.append( ${p.getter}WasNull() );
		sb.append( ")" );
		#end
		sb.append( ", \n" );
		#end
		return sb.toString();
	}
}
