## Copyright 2010-2022 Jason Osgood
## SPDX-License-Identifier: Apache-2.0

## Main's UPDATE Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## fields - fields found in source SQL as List<normalsql.meta.Field>
## terms - terms found in source SQL as List<normalsql.meta.Term>
## date - Main's timestamp

/**

${className}.java   ${date}
  
Generated using NormalSQL's Update.vm template. Original SQL:
    
#foreach( $line in $originallines )
$line
#end

@see ${originalfile}
  
**/

package ${packageName};

import java.sql.*;
import javax.sql.DataSource;
import java.math.BigDecimal;

public class 
	${className}
{

	/**
		Pass a DataSource, a Connection instance is created, call its close() method when done. 
	**/
	public final int execute( DataSource dataSource )
		throws SQLException
	{
		Connection connection = dataSource.getConnection();
		int rows = execute( connection );
		connection.close();
		return rows;
	}

	public final int execute( Connection connection )
		throws SQLException
	{
		String sql = getSQL();
		PreparedStatement ps = connection.prepareStatement( sql );
		
		
#set( $nth = 0 )
#foreach( $field in $fields )
##
#set( $method = $field.getTypedMethod() )
#set( $nth = $nth + 1 )
		ps.set${method}( ${nth}, get${field.NameAsMethod}() );
##
#end
#foreach( $term in $terms )
##
#if( $term.isComparison() )
##
#set( $nth = $nth + 1 )
		ps.set${term.TypedMethod}( ${nth}, get${term.NameAsMethod}Param() );
##
#elseif( $term.isLIKE() )
##
#set( $nth = $nth + 1 )
		ps.set${term.TypedMethod}( ${nth}, get${term.NameAsMethod}Param() );
##
#elseif( $term.isIN() )
##
#set( $size = $term.getValues().size() - 1 )
##
#foreach( $abc in [0..$size] )
#set( $nth = $nth + 1 )
		ps.set${term.TypedMethod}( ${nth}, get${term.NameAsMethod}Param( ${abc} ));
#end
##
#elseif( $term.isBETWEEN() )
##
#set( $nth = $nth + 1 )
		ps.set${term.TypedMethod}( ${nth}, get${term.NameAsMethod}LeftParam() );
#set( $nth = $nth + 1 )
		ps.set${term.TypedMethod}( ${nth}, get${term.NameAsMethod}RightParam() );
##
#end
#end
		int rows = ps.executeUpdate();
		return rows;
	}
	
	
	
#foreach( $field in $fields )
	private ${field.JavaType} _${field.NameAsVariable} = ${field.InitializerValue};
#end

#foreach( $field in $fields )
	public void set${field.NameAsMethod}( ${field.JavaType} ${field.NameAsVariable} )
	{
		_${field.NameAsVariable} = ${field.NameAsVariable};
	}
	
	public ${field.JavaType} get${field.NameAsMethod}()
	{
		return _${field.NameAsVariable};
	}	

#end

#foreach( $term in $terms )
##
#if( $term.isComparison() )

	public ${term.JavaType} _${term.NameAsVariable}Param = $term.getValueAsCode();
	
	public void set${term.NameAsMethod}Param( ${term.JavaType} ${term.NameAsVariable} )
	{
		_${term.NameAsVariable}Param = ${term.NameAsVariable};
	}
	
	public ${term.JavaType} get${term.NameAsMethod}Param()
	{
		return _${term.NameAsVariable}Param;
	}

#elseif( $term.isLIKE() )

	public ${term.JavaType} _${term.NameAsVariable}Param = $term.getValueAsCode();
	
	public void set${term.NameAsMethod}Param( ${term.JavaType} ${term.NameAsVariable} )
	{
		_${term.NameAsVariable}Param = ${term.NameAsVariable};
	}
	
	public ${term.JavaType} get${term.NameAsMethod}Param()
	{
		return _${term.NameAsVariable}Param;
	}

#elseif( $term.isIN() )
	private ${term.JavaType}[] _${term.NameAsVariable}List = new ${term.JavaType}[] { $term.getValueAsCode() };
	private int _${term.NameAsVariable}Count = 0;
	public void add${term.NameAsMethod}Param( ${term.JavaType} ${term.NameAsVariable} )
	{
		if( _${term.NameAsVariable}Count == _${term.NameAsVariable}List.length )
		{
			throw new IndexOutOfBoundsException( "IN term parameter array only has room for: " + _${term.NameAsVariable}List.length );
		}
		int count = _${term.NameAsVariable}Count;
		
		// Parameter array get filled to the right, so there are no holes
		for( int i = count; count < _${term.NameAsVariable}List.length; count++ )
		{
			_${term.NameAsVariable}List[i] = ${term.NameAsVariable};
		}
		_${term.NameAsVariable}Count++;
	}
	
	public ${term.JavaType} get${term.NameAsMethod}Param( int nth )
	{
		return _${term.NameAsVariable}List[ nth ];
	}
	
#elseif( $term.isBETWEEN() )

	public ${term.JavaType} _${term.NameAsVariable}LeftParam = $term.getLeftAsCode();
	
	public void set${term.NameAsMethod}LeftParam( ${term.JavaType} ${term.NameAsVariable} )
	{
		_${term.NameAsVariable}LeftParam = ${term.NameAsVariable};
	}
	
	public ${term.JavaType} get${term.NameAsMethod}LeftParam()
	{
		return _${term.NameAsVariable}LeftParam;
	}

	public ${term.JavaType} _${term.NameAsVariable}RightParam = $term.getRightAsCode();
	
	public void set${term.NameAsMethod}RightParam( ${term.JavaType} ${term.NameAsVariable} )
	{
		_${term.NameAsVariable}RightParam = ${term.NameAsVariable};
	}
	
	public ${term.JavaType} get${term.NameAsMethod}RightParam()
	{
		return _${term.NameAsVariable}RightParam;
	}
#end
#end
	
	private static String __sql = null;

	public String getSQL()
	{
		if( __sql == null )
		{
			StringBuilder sb = new StringBuilder();
#foreach( $line in $sql )
			sb.append( "$line" );
			sb.append( '\n' );
#end
			__sql = sb.toString();
		}
		return __sql;
	}
	
	public String toString()
	{
		String result = getSQL();
#foreach( $field in $fields )
		result = result.replaceFirst( "\\?", quotifyString( get${field.NameAsMethod}() ));
#end
#foreach( $term in $terms )
##
#if( $term.isIN() )
##
#set( $size = $term.getValues().size() - 1 )
#foreach( $abc in [0..$size] )
		result = result.replaceFirst( "\\?", quotifyString( get${term.NameAsMethod}Param( ${abc} )));
#end
##
#elseif( $term.isBETWEEN() )
##
		result = result.replaceFirst( "\\?", quotifyString( get${term.NameAsMethod}LeftParam() ));
		result = result.replaceFirst( "\\?", quotifyString( get${term.NameAsMethod}RightParam() ));
#elseif( $term.isComparison() || $term.isLIKE() )
		result = result.replaceFirst( "\\?", quotifyString( get${term.NameAsMethod}Param() ));
#end
#end
		return result;
	}
	
	private String quotifyString( Object value )
	{
		if( value instanceof String )
		{
			return "'" + value.toString() + "'";
		}
		else
		{
			return value.toString();
		}
	}
}
