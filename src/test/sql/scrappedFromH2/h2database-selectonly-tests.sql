SELECT ADD_MONTHS('2003-08-01', 3);
SELECT ADD_MONTHS('2003-01-31', 1);
SELECT ADD_MONTHS('2003-08-21', -3);
SELECT ADD_MONTHS('2003-08-21 00:00:00.333', -3);
SELECT COUNT(*) FILTER (WHERE B = 10) N, COUNT(*) FILTER (WHERE B <> 10) O FROM TEST;
SELECT INDEX_NAME, INDEX_TYPE_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = 'TEST';
SELECT INDEX_NAME, COLUMN_NAME, ORDINAL_POSITION FROM INFORMATION_SCHEMA.INDEX_COLUMNS WHERE TABLE_NAME = 'TEST';
select * from word;
skip SELECT KEY, VALUE, AS, SET, DAY FROM TEST WHERE KEY <> 6 AND VALUE <> 7 AND AS <> 8 AND SET <> 9 AND DAY <> 10;
SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME = 'NON_KEYWORDS';
SELECT COUNT(*) FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME = 'NON_KEYWORDS';
SELECT TABLE_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME IN ('TEST3', 'TEST4');
SELECT SIN(A), A+1, A FROM TEST;
select * from test order by id;
SELECT LASTVAL();
SELECT SCOPE_IDENTITY();
SELECT IDENTITY_VAL_LOCAL();
SELECT * FROM TEST;
SELECT TO_DATE('24-12-2025','DD-MM-YYYY');
SELECT TO_TIMESTAMP('24-12-2025 14:13:12','DD-MM-YYYY HH24:MI:SS');
SELECT 1 = TRUE;
SELECT TRUE = 0;
SELECT 1 > TRUE;
SELECT * FROM TEST WHERE B = 1;
SELECT * FROM TEST WHERE I = TRUE;
SELECT (SELECT * FROM (SELECT SYSDATE)) IS NOT NULL;
SELECT SUM(Y) AS S , X + Z FROM MYTAB GROUP BY 2;
SELECT SUM(Y) AS S , X + Z FROM MYTAB GROUP BY 3;
SELECT MYTAB.*,  SUM(Y) AS S  FROM MYTAB GROUP BY 1;
SELECT SUM(Y) AS S , X + Z FROM MYTAB GROUP BY 2;
SELECT SUM(Y) AS S , X + Z FROM MYTAB GROUP BY 2;
SELECT SUM(Y) AS S , X FROM MYTAB GROUP BY 2;
SELECT SEQ.NEXTVAL;
SELECT SEQ.CURRVAL;
SELECT 1 = TRUE;
SELECT NULL IS NULL;
SELECT NULL IS NOT NULL;
SELECT NOT NULL IS NULL;
SELECT NOT NULL IS NOT NULL;
SELECT 1 IS NULL;
SELECT 1 IS NOT NULL;
SELECT NOT 1 IS NULL;
SELECT NOT 1 IS NOT NULL;
SELECT * FROM TEST T1 JOIN TEST T2 ON T1.A = T2.A WHERE T2.A IS NULL;
SELECT * FROM TEST T1 LEFT JOIN TEST T2 ON T1.A = T2.A WHERE T2.A IS NULL;
SELECT * FROM TEST T1 JOIN TEST T2 ON T1.A = T2.A WHERE T2.A IS NOT NULL;
SELECT * FROM TEST T1 LEFT JOIN TEST T2 ON T1.A = T2.A WHERE T2.A IS NOT NULL;
SELECT * FROM TEST T1 JOIN TEST T2 ON (T1.A, T1.B) = (T2.A, T2.B) WHERE (T2.A, T2.B) IS NULL;
SELECT * FROM TEST T1 LEFT JOIN TEST T2 ON (T1.A, T1.B) = (T2.A, T2.B) WHERE (T2.A, T2.B) IS NULL;
SELECT * FROM TEST T1 JOIN TEST T2 ON (T1.A, T1.B) = (T2.A, T2.B) WHERE (T2.A, T2.B) IS NOT NULL;
SELECT * FROM TEST T1 LEFT JOIN TEST T2 ON (T1.A, T1.B) = (T2.A, T2.B) WHERE (T2.A, T2.B) IS NOT NULL;
SELECT I FROM TEST WHERE _ROWID_ IS NULL;
SELECT X BETWEEN A AND B A1, X BETWEEN ASYMMETRIC A AND B A2, A <= X AND X <= B A3,
    X BETWEEN SYMMETRIC A AND B S1, A <= X AND X <= B OR A >= X AND X >= B S2,
    X NOT BETWEEN A AND B NA1, X NOT BETWEEN ASYMMETRIC A AND B NA2, NOT (A <= X AND X <= B) NA3,
    X NOT BETWEEN SYMMETRIC A AND B NS1, NOT (A <= X AND X <= B OR A >= X AND X >= B) NS2
    FROM TEST ORDER BY ID;
select * from test where id in (select id from test order by 'x');
select x, x in(2, 3) i from system_range(1, 2) group by x;
select * from system_range(1, 1) where x = x + 1 or x in(2, 0);
select * from system_range(1, 1) where cast('a' || x as varchar_ignorecase) in ('A1', 'B1');
select * from (select rownum r from test) where r in (1, 2);
select * from (select rownum r from test) where r = 1 or r = 2;
select x from system_range(1, 1) where x in (select x from system_range(1, 1) group by x order by max(x));
select a.id, a.id in(select 4) x  from test a, test b where a.id in (b.id, b.id - 1);
select a.id, a.id in(select 4) x  from test a, test b where a.id in (b.id, b.id - 1) group by a.id;
select a.id, 4 in(select a.id) x  from test a, test b where a.id in (b.id, b.id - 1) group by a.id;
select id from test where id in (1, 2) and d = 1;
select * from test where id not in (select id from test where 1=0);
select * from test where null not in (select id from test where 1=0);
select * from test where not (id in (select id from test where 1=0));
select * from test where not (null in (select id from test where 1=0));
select count(*) from t1 where t1.id in ( select t2.id from t2 );
select count(*) from system_range(1, 2) where x in(1, 1, 1);
select * from test where id in (select id from test);
select * from test where id in ((select id from test));
select * from test where id in (((select id from test)));
SELECT CASE WHEN NOT (false IN (null)) THEN false END;
select a.v as av, b.v as bv, a.v IN (b.v), not a.v IN (b.v) from test a, test b;
select a.v as av, b.v as bv, a.v IN (b.v, null), not a.v IN (b.v, null) from test a, test b;
SELECT CASE WHEN NOT (false IN (null)) THEN false END;
select count(*) from test where a in(2, 10) and b in(0, null);
select count(*) from test where b in(null, 0) and a in(1, null);
select count(*) from test where a in(1,2) and b in(1,2);
SELECT * FROM SYSTEM_RANGE(1, 10) WHERE X IN ((SELECT 1), (SELECT 2));
SELECT 1 WHERE 1 IN ();
SELECT 1 WHERE 1 NOT IN ();
SELECT * FROM TEST WHERE (A, B) IN ((1, 1), (2, 1), (2, 2), (2, NULL));
SELECT LOCALTIME IN(DATE '2000-01-01', DATE '2010-01-01');
SELECT LOCALTIME IN ((VALUES DATE '2000-01-01', DATE '2010-01-01'));
SELECT V, V IN (1, 1000000000000) FROM TEST;
SELECT V, V IN (SELECT * FROM TEST) FROM (VALUES 1, 2) T(V);
SELECT V, V IN (SELECT * FROM TEST) FROM (VALUES 1, 1000000000000) T(V);
SELECT UNIQUE(SELECT A, B FROM TEST);
SELECT UNIQUE(TABLE TEST);
SELECT UNIQUE(SELECT A, B, C FROM TEST);
SELECT UNIQUE(SELECT DISTINCT A, B FROM TEST);
SELECT G, UNIQUE(SELECT A, B, C FROM TEST WHERE GR = G) FROM (VALUES 1, 2, 3) V(G);
SELECT G, UNIQUE(SELECT A, B FROM TEST WHERE GR = G ORDER BY A + B) FROM (VALUES 1, 2, 3) V(G);
select * from Foo where A like 'abc%' escape '\' AND B=1;
SELECT * FROM test WHERE one LIKE '2%';
SELECT * FROM TEST WHERE NAME IS NULL;
SELECT * FROM TEST WHERE NAME IS NOT NULL;
SELECT * FROM TEST WHERE NAME BETWEEN 'H' AND 'Word';
SELECT * FROM TEST WHERE ID >= 2 AND ID <= 3 AND ID <> 2;
SELECT * FROM TEST WHERE ID>0 AND ID<4 AND ID!=2;
SELECT * FROM TEST WHERE 'Hello' LIKE '_el%';
SELECT * FROM TEST WHERE NAME LIKE 'Hello%';
SELECT * FROM TEST WHERE NAME ILIKE 'hello%';
SELECT * FROM TEST WHERE NAME ILIKE 'xxx%';
SELECT * FROM TEST WHERE NAME LIKE 'Wo%';
SELECT * FROM TEST WHERE NAME LIKE 'Wo\%';
SELECT * FROM TEST WHERE NAME LIKE 'WoX%' ESCAPE 'X';
SELECT * FROM TEST WHERE NAME LIKE 'Word_';
SELECT * FROM TEST WHERE NAME LIKE '%Hello%';
SELECT * FROM TEST WHERE 'Hello' LIKE NAME;
SELECT T1.*, T2.* FROM TEST AS T1, TEST AS T2 WHERE T1.ID = T2.ID AND T1.NAME LIKE T2.NAME || '%';
SELECT ID, MAX(NAME) FROM TEST GROUP BY ID HAVING MAX(NAME) = 'World';
SELECT ID, MAX(NAME) FROM TEST GROUP BY ID HAVING MAX(NAME) LIKE 'World%';
SELECT S, S LIKE '%', S ILIKE '%', S REGEXP '%' FROM (VALUES NULL, '', '1') T(S);
SELECT S, S NOT LIKE '%', S NOT ILIKE '%', S NOT REGEXP '%' FROM (VALUES NULL, '', '1') T(S);
SELECT ID FROM (SELECT * FROM TEST) WHERE V NOT LIKE 'a%';
select (select t1.x from system_range(1,1) t2) from system_range(1,1) t1;
select sum(x) from system_range(2, 1000) r where
not exists(select * from system_range(2, 32) r2 where r.x>r2.x and mod(r.x, r2.x)=0);
SELECT COUNT(*) FROM SYSTEM_RANGE(0, 2111222333);
select * from system_range(2, 100) r where
not exists(select * from system_range(2, 11) r2 where r.x>r2.x and mod(r.x, r2.x)=0);
SELECT * FROM SYSTEM_RANGE(1, 10) ORDER BY 1;
SELECT COUNT(*) FROM SYSTEM_RANGE(1, 10);
SELECT * FROM SYSTEM_RANGE(10, 1, -2) ORDER BY 1 DESC;
SELECT COUNT(*) FROM SYSTEM_RANGE(10, 1, -2);
SELECT * FROM SYSTEM_RANGE(10, 2, -2) ORDER BY 1 DESC;
SELECT * FROM SYSTEM_RANGE(1, 8, 2) WHERE X = 2;
SELECT COUNT(*) FROM SYSTEM_RANGE(1, 8, 2) WHERE X = 2;
SELECT * FROM SYSTEM_RANGE(1, 8, 2) WHERE X BETWEEN 2 AND 6;
SELECT COUNT(*) FROM SYSTEM_RANGE(1, 8, 2) WHERE X BETWEEN 2 AND 6;
SELECT * FROM SYSTEM_RANGE(8, 1, -2) ORDER BY X DESC;
SELECT * FROM SYSTEM_RANGE(8, 1, -2) WHERE X = 3;
SELECT COUNT(*) FROM SYSTEM_RANGE(8, 1, -2) WHERE X = 3;
SELECT * FROM SYSTEM_RANGE(8, 1, -2) WHERE X BETWEEN 3 AND 7 ORDER BY 1 DESC;
SELECT COUNT(*) FROM SYSTEM_RANGE(8, 1, -2) WHERE X BETWEEN 3 AND 7;
SELECT X FROM SYSTEM_RANGE(1, 2, ?);
SELECT * FROM TEST;
SELECT B FROM TEST WHERE A = 1;
SELECT WORD FROM TABLE_WORD where WORD_ID = 1;
SELECT ID FROM TEST;
SELECT COUNT(*) FROM TEST;
SELECT _ROWID_, ID FROM TEST;
SELECT B FROM TEST;
SELECT SUM(V) FROM TEST;
error SELECT 0x;
error SELECT 0xZ;
error SELECT 0xAAZ;
error SELECT 0x1LZ;
error SELECT 0x1234567890abZ;
error SELECT 0x1234567890abLZ;
select * from test where id = ARRAY [1, 2];
select * from test where id = (1, 2);
error SELECT 1 + 2 NOT;
error SELECT 1 NOT > 2;
SELECT * FROM PARENT;
SELECT * FROM DESTSCHEMA.DESTINATION;
SELECT * FROM DEST_TABLE;
SELECT * FROM TEST ORDER BY C1, C2;
SELECT * FROM TEST ORDER BY ID;
SELECT * FROM TEST WHERE ID >= 8 ORDER BY ID;
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT DATE '2000-01-02';
SELECT DATE '20000102';
SELECT DATE '-1000102';
SELECT DATE '3001231';
SELECT DATE '201231';
SELECT CAST (TIMESTAMP '1000000000-12-31 00:00:00' AS DATE);
SELECT CAST (DATE '1000000000-12-31' AS TIMESTAMP);
SELECT CAST (TIMESTAMP '-1000000000-01-01 00:00:00' AS DATE);
SELECT CAST (DATE '-1000000000-01-01' AS TIMESTAMP);
SELECT CAST (DATE '2000-01-01' AS TIME);
SELECT CAST(1 AS INT) / CAST(0 AS INT);
SELECT CAST(-2147483648 AS INT) / CAST(1 AS INT);
SELECT CAST(-2147483648 AS INT) / CAST(-1 AS INT);
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
    DECLARED_DATA_TYPE, DECLARED_NUMERIC_PRECISION, DECLARED_NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT ID, CAST(XT AS NUMBER(10,1)),
CAST(X_SM AS NUMBER(10,1)), CAST(XB AS NUMBER(10,1)), CAST(XD AS NUMBER(10,1)),
CAST(XD2 AS NUMBER(10,1)), CAST(XR AS NUMBER(10,1)) FROM TEST;
SELECT * FROM TEST;
SELECT CAST(10000 AS NUMERIC(5));
SELECT NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'V';
SELECT TABLE_NAME, NUMERIC_PRECISION, DECLARED_NUMERIC_PRECISION FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = 'PUBLIC';
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
    DECLARED_DATA_TYPE, DECLARED_NUMERIC_PRECISION, DECLARED_NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT CAST("Query".X AS TIMESTAMP) FROM (select * from tab_with_timezone where x > '2016-01-01') AS "Query";
SELECT * FROM tab_with_timezone ORDER BY X;
SELECT TIMESTAMP WITH TIME ZONE '2000-01-10 00:00:00 -02' AS A,
    TIMESTAMP WITH TIME ZONE '2000-01-10 00:00:00.000000000 +02:00' AS B,
    TIMESTAMP WITH TIME ZONE '2000-01-10 00:00:00.000000000+02:00' AS C,
    TIMESTAMP WITH TIME ZONE '2000-01-10T00:00:00.000000000+09:00[Asia/Tokyo]' AS D;
SELECT COLUMN_NAME, DATA_TYPE, DATETIME_PRECISION FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT T3, T4, T5, T6 FROM TEST;
SELECT (LOCALTIMESTAMP + 1) = (CURRENT_TIMESTAMP + 1);
SELECT (TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+01' + 1) A,
    (1 + TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+01') B;
SELECT (LOCALTIMESTAMP - 1) = (CURRENT_TIMESTAMP - 1);
SELECT (TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+01' - 1) A;
SELECT CAST (TIMESTAMP WITH TIME ZONE '2000-01-01 23:59:59.999999999Z' AS TIMESTAMP WITH TIME ZONE);
SELECT CAST (TIMESTAMP WITH TIME ZONE '1000000000-12-31 23:59:59.999999999Z' AS TIMESTAMP WITH TIME ZONE);
SELECT CAST (CAST (TIMESTAMP '1000000000-12-31 23:59:59.999999999' AS TIMESTAMP(9) WITH TIME ZONE) AS TIMESTAMP(9));
SELECT CAST (CAST (TIMESTAMP '-1000000000-12-31 00:00:00' AS TIMESTAMP(9) WITH TIME ZONE) AS TIMESTAMP(9));
SELECT CAST(-4294967296 AS BIGINT) * CAST (2147483648 AS BIGINT);
SELECT CAST(4294967296 AS BIGINT) * CAST (-2147483648 AS BIGINT);
SELECT CAST(-2147483648 AS BIGINT) * CAST (4294967296 AS BIGINT);
SELECT CAST(2147483648 AS BIGINT) * CAST (-4294967296 AS BIGINT);
SELECT CAST(4294967296 AS BIGINT) * CAST (2147483648 AS BIGINT);
SELECT CAST(-4294967296 AS BIGINT) * CAST (-2147483648 AS BIGINT);
SELECT CAST(2147483648 AS BIGINT) * CAST (4294967296 AS BIGINT);
SELECT CAST(-2147483648 AS BIGINT) * CAST (-4294967296 AS BIGINT);
SELECT CAST(-9223372036854775808 AS BIGINT) * CAST(1 AS BIGINT);
SELECT CAST(-9223372036854775808 AS BIGINT) * CAST(-1 AS BIGINT);
SELECT CAST(1 AS BIGINT) * CAST(-9223372036854775808 AS BIGINT);
SELECT CAST(-1 AS BIGINT) * CAST(-9223372036854775808 AS BIGINT);
SELECT CAST(1 AS BIGINT) / CAST(0 AS BIGINT);
SELECT CAST(-9223372036854775808 AS BIGINT) / CAST(1 AS BIGINT);
SELECT CAST(-9223372036854775808 AS BIGINT) / CAST(-1 AS BIGINT);
SELECT 0x1L;
SELECT 0x1234567890abL;
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT * FROM TEST WHERE C = 'b';
SELECT * FROM TEST WHERE C = 'b ';
SELECT * FROM TEST WHERE C = 'b  ';
SELECT C || 'x' V FROM TEST;
SELECT A || '*', B || '*', A || B || '*', CHAR_LENGTH(A), A = B FROM TEST;
SELECT TABLE_NAME, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'PUBLIC';
SELECT CAST(1 AS TINYINT) / CAST(0 AS TINYINT);
SELECT CAST(-128 AS TINYINT) / CAST(1 AS TINYINT);
SELECT CAST(-128 AS TINYINT) / CAST(-1 AS TINYINT);
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
    DECLARED_DATA_TYPE, DECLARED_NUMERIC_PRECISION, DECLARED_NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT D, -D, SIGN(D) FROM TEST ORDER BY D;
SELECT A.D, B.D, A.D + B.D, A.D - B.D, A.D * B.D FROM TEST A JOIN TEST B ORDER BY A.D, B.D;
SELECT A.D, B.D, A.D / B.D, MOD(A.D, B.D) FROM TEST A JOIN TEST B WHERE B.D <> 0 ORDER BY A.D, B.D;
SELECT A.D, B.D, A.D > B.D, A.D = B.D, A.D < B.D FROM TEST A JOIN TEST B ORDER BY A.D, B.D;
SELECT D, CAST(D AS REAL) D1, CAST(D AS DECFLOAT) D2 FROM TEST ORDER BY D;
SELECT * FROM TEST ORDER BY B;
SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TEST';
SELECT NOT TRUE A, NOT FALSE B, NOT NULL C, NOT UNKNOWN D;
SELECT T1, T2, T1 = T2 FROM TEST;
SELECT COLUMN_NAME, DATA_TYPE, DATETIME_PRECISION FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT TIMESTAMP FROM TEST;
SELECT T, T0, T1, T2 FROM TEST;
SELECT T3, T4, T5, T6 FROM TEST;
SELECT T7, T8, T9 FROM TEST;
SELECT T0 FROM TEST;
select * from test where d= '1999-12-01 23:59:00.000';
select * from test where d= timestamp '2006-01-01 12:00:00.000';
SELECT TIMESTAMP '2000-01-02 11:22:33';
SELECT TIMESTAMP '2000-01-02T11:22:33';
SELECT TIMESTAMP '20000102 11:22:33';
SELECT TIMESTAMP '20000102T11:22:33';
SELECT TIMESTAMP '2000-01-02 112233';
SELECT TIMESTAMP '2000-01-02T112233';
SELECT TIMESTAMP '20000102 112233';
SELECT TIMESTAMP '20000102T112233';
SELECT CAST (TIMESTAMP '2000-01-01 23:59:59.999999999' AS TIMESTAMP);
SELECT CAST (TIMESTAMP '1000000000-12-31 23:59:59.999999999' AS TIMESTAMP);
SELECT T1, T2, T1 = T2 FROM TEST;
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT COLUMN_NAME, DATA_TYPE, DATETIME_PRECISION FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT TIME FROM TEST;
SELECT * FROM TEST;
SELECT T0 FROM TEST;
SELECT T8 FROM TEST;
SELECT TIME '11:22:33';
SELECT TIME '11:22';
SELECT TIME '112233';
SELECT TIME '1122';
SELECT TIME '12233';
SELECT TIME '122';
SELECT TIME '11:22:33.1';
SELECT TIME '112233.1';
SELECT TIME '12233.1';
SELECT TIME '1122.1';
SELECT CAST (TIMESTAMP '1000000000-12-31 11:22:33.123456789' AS TIME);
SELECT CAST (TIMESTAMP '1000000000-12-31 11:22:33.123456789' AS TIME(9));
SELECT CAST (TIMESTAMP '-1000000000-12-31 11:22:33.123456789' AS TIME(9));
SELECT CAST (TIME '10:00:00' AS DATE);
SELECT CAST(1 AS SMALLINT) / CAST(0 AS SMALLINT);
SELECT CAST(-32768 AS SMALLINT) / CAST(1 AS SMALLINT);
SELECT CAST(-32768 AS SMALLINT) / CAST(-1 AS SMALLINT);
SELECT T1, T2, T1 = T2 FROM TEST;
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT COLUMN_NAME, DATA_TYPE, DATETIME_PRECISION FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT * FROM TEST;
SELECT T0 FROM TEST;
SELECT T8 FROM TEST;
SELECT TIME WITH TIME ZONE '11:22:33';
SELECT TIME WITH TIME ZONE '11:22:33 Europe/London';
SELECT CAST (TIMESTAMP WITH TIME ZONE '1000000000-12-31 11:22:33.123456789+02' AS TIME WITH TIME ZONE);
SELECT CAST (TIMESTAMP WITH TIME ZONE '1000000000-12-31 11:22:33.123456789+02' AS TIME(9) WITH TIME ZONE);
SELECT CAST (TIMESTAMP WITH TIME ZONE '-1000000000-12-31 11:22:33.123456789+02' AS TIME(9) WITH TIME ZONE);
SELECT CAST (TIME WITH TIME ZONE '10:00:00Z' AS DATE);
SELECT TIME WITH TIME ZONE '23:00:00+01' - TIME WITH TIME ZONE '00:00:30-01';
SELECT TIME WITH TIME ZONE '10:00:00-10' + INTERVAL '30' MINUTE;
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
    DECLARED_DATA_TYPE, DECLARED_NUMERIC_PRECISION, DECLARED_NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT F, I, F = I FROM TEST;
SELECT D, -D, SIGN(D) FROM TEST ORDER BY D;
SELECT A.D, B.D, A.D + B.D, A.D - B.D, A.D * B.D FROM TEST A JOIN TEST B ORDER BY A.D, B.D;
SELECT A.D, B.D, A.D / B.D, MOD(A.D, B.D) FROM TEST A JOIN TEST B WHERE B.D <> 0 ORDER BY A.D, B.D;
SELECT A.D, B.D, A.D > B.D, A.D = B.D, A.D < B.D FROM TEST A JOIN TEST B ORDER BY A.D, B.D;
SELECT D, CAST(D AS DOUBLE PRECISION) D1, CAST(D AS DECFLOAT) D2 FROM TEST ORDER BY D;
SELECT 'A' 'b'
    'c';
SELECT N'A' 'b'
    'c';
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'TEST' ORDER BY ORDINAL_POSITION;
SELECT TABLE_NAME, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'PUBLIC';
SELECT U&'a\0030a\+000025a';
SELECT U&'az0030az+000025a' UESCAPE 'z';
SELECT U&'\';
SELECT U&'\0';
SELECT U&'\00';
SELECT U&'\003';
SELECT U&'\0030';
SELECT U&'\zzzz';
SELECT U&'\+0';
SELECT U&'\+00';
SELECT U&'\+000';
SELECT U&'\+0000';
SELECT U&'\+00003';
SELECT U&'\+000030';
SELECT U&'\+zzzzzz';
SELECT A FROM TEST ORDER BY A;
SELECT A FROM TEST ORDER BY A ASC;
SELECT A FROM TEST ORDER BY A ASC NULLS FIRST;
SELECT A FROM TEST ORDER BY A ASC NULLS LAST;
SELECT A FROM TEST ORDER BY A DESC;
SELECT A FROM TEST ORDER BY A DESC NULLS FIRST;
SELECT A FROM TEST ORDER BY A DESC NULLS LAST;
select * from test where a = 1;
select 1 from test group by x;
SELECT * FROM TEST WHERE ID >= 2 AND ID <= 3;
SELECT * FROM TEST WHERE _ROWID_ >= 2 AND _ROWID_ <= 3;
SELECT * FROM TEST WHERE ID >= 2.0 AND ID <= 3.0;
SELECT
    NULL IS UNKNOWN, FALSE IS UNKNOWN, TRUE IS UNKNOWN,
    NULL IS FALSE, FALSE IS FALSE, TRUE IS FALSE,
    NULL IS TRUE, FALSE IS TRUE, TRUE IS TRUE;
SELECT
    NULL IS NOT UNKNOWN, FALSE IS NOT UNKNOWN, TRUE IS NOT UNKNOWN,
    NULL IS NOT FALSE, FALSE IS NOT FALSE, TRUE IS NOT FALSE,
    NULL IS NOT TRUE, FALSE IS NOT TRUE, TRUE IS NOT TRUE;
SELECT B, B IS UNKNOWN, N IS UNKNOWN, B IS FALSE, N IS FALSE, B IS TRUE, N IS TRUE FROM TEST;
SELECT B, B IS NOT UNKNOWN, N IS NOT UNKNOWN, B IS NOT FALSE, N IS NOT FALSE, B IS NOT TRUE, N IS NOT TRUE FROM TEST;
SELECT B, NOT B IS NOT UNKNOWN, NOT N IS NOT UNKNOWN, NOT B IS NOT FALSE, NOT N IS NOT FALSE,
    NOT B IS NOT TRUE, NOT N IS NOT TRUE FROM TEST;
SELECT B FROM TEST WHERE B IS UNKNOWN;
SELECT B FROM TEST WHERE B IS NOT UNKNOWN;
SELECT B FROM TEST WHERE B IS FALSE;
SELECT B FROM TEST WHERE B IS NOT FALSE;
SELECT B FROM TEST WHERE B IS TRUE;
SELECT B FROM TEST WHERE B IS NOT TRUE;
SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME = 'TIME ZONE';
SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME = 'TIME ZONE';
SELECT CAST(T AS TIMESTAMP WITH TIME ZONE) FROM TEST;
SELECT T AT LOCAL FROM TEST;
SELECT T AT TIME ZONE '8:00' FROM TEST;
SELECT B FROM TEST WHERE A = 1;
SELECT (R).A, (R).B FROM (VALUES CAST((1, 2) AS ROW(A INT, B INT))) T(R);
SELECT (R).C FROM (VALUES CAST((1, 2) AS ROW(A INT, B INT))) T(R);
SELECT (R).C1, (R).C2 FROM (VALUES ((1, 2))) T(R);
SELECT (1, 2).C2;
SELECT (1, 2).C0;
SELECT (1, 2).C;
SELECT (1, 2).CX;
SELECT INDEX_NAME, TABLE_NAME, INDEX_TYPE_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE INDEX_NAME = 'TEST_IDX';
SELECT INDEX_NAME, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, IS_UNIQUE FROM INFORMATION_SCHEMA.INDEX_COLUMNS
    WHERE INDEX_NAME = 'TEST_IDX' ORDER BY ORDINAL_POSITION;
SELECT DB_OBJECT_SQL('INDEX', 'PUBLIC', 'TEST_IDX');
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, INDEX_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'TEST';
SELECT CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE CONSTRAINT_NAME = 'TEST_UNI_C';
SELECT INDEX_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME = 'UNI_TEST_A';
select case when 1=null then 1 else 2 end;
select case (1) when 1 then 1 else 2 end;
select x, case when x=0 then 'zero' else 'not zero' end y from system_range(0, 2);
select x, case when x=0 then 'zero' end y from system_range(0, 1);
select x, case x when 0 then 'zero' else 'not zero' end y from system_range(0, 1);
select x, case x when 0 then 'zero' when 1 then 'one' end y from system_range(0, 2);
SELECT X, CASE X WHEN 1 THEN 10 WHEN 2, 3 THEN 25 WHEN 4, 5, 6 THEN 50 ELSE 90 END C FROM SYSTEM_RANGE(1, 7);
skip SELECT CASE WHEN TRUE THEN 1 END CASE;
SELECT S, CASE S
    WHEN IS NULL THEN 1
    WHEN LOWER('A') THEN 2
    WHEN LIKE '%b' THEN 3
    WHEN ILIKE 'C' THEN 4
    WHEN REGEXP '[dQ]' THEN 5
    WHEN IS NOT DISTINCT FROM 'e' THEN 6
    WHEN IN ('x', 'f') THEN 7
    WHEN IN (VALUES 'g', 'z') THEN 8
    WHEN BETWEEN 'h' AND 'i' THEN 9
    WHEN = 'j' THEN 10
    WHEN < ANY(VALUES 'j', 'l') THEN 11
    WHEN NOT LIKE '%m%' THEN 12
    WHEN IS OF (VARCHAR) THEN 13
    ELSE 13
    END FROM (VALUES NULL, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm') T(S);
SELECT B, CASE B WHEN IS TRUE THEN 1 WHEN IS FALSE THEN 0 WHEN IS UNKNOWN THEN -1 END
    FROM (VALUES TRUE, FALSE, UNKNOWN) T(B);
SELECT V, CASE V
    WHEN IN(CURRENT_DATE, DATE '2010-01-01') THEN 1
    ELSE 2
    END FROM (VALUES DATE '2000-01-01', DATE '2010-01-01', DATE '2020-02-01') T(V);
SELECT CASE NULL WHEN IS NOT DISTINCT FROM NULL THEN TRUE ELSE FALSE END;
SELECT CASE TRUE WHEN CURRENT_DATE THEN 1 END;
SELECT * FROM (VALUES 0) D(X) JOIN (VALUES TRUE) T(C) WHERE (CASE C WHEN C THEN C END);
SELECT CASE TRUE WHEN NOT FALSE THEN 1 ELSE 0 END;
SELECT S || 'v' || '' || 'x' || S || (S || S), S || '', S || (B || X'50'), B || B || B FROM TEST;
SELECT S || A, ARRAY[] || A, S || CAST(ARRAY[] AS VARCHAR ARRAY), A || A || A FROM TEST;
SELECT B || NULL, B || X'22' || NULL FROM TEST;
SELECT
    NULL AND NULL, NULL AND FALSE, NULL AND TRUE,
    FALSE AND NULL, FALSE AND FALSE, FALSE AND TRUE,
    TRUE AND NULL, TRUE AND FALSE, TRUE AND TRUE;
SELECT
    NULL OR NULL, NULL OR FALSE, NULL OR TRUE,
    FALSE OR NULL, FALSE OR FALSE, FALSE OR TRUE,
    TRUE OR NULL, TRUE OR FALSE, TRUE OR TRUE;
SELECT NOT NULL, NOT FALSE, NOT TRUE;
SELECT 0 AND TRUE;
SELECT TRUE AND 0;
SELECT 1 OR FALSE;
SELECT FALSE OR 1;
SELECT NOT 0;
SELECT NOT 1;
SELECT 1 IN (SELECT A FROM TEST);
SELECT 1 IN (NULL);
SELECT 1 IN (SELECT NULL);
SELECT 1 IN (VALUES NULL);
SELECT 1 IN (SELECT * FROM TABLE(X NULL=()));
SELECT (1, 1) IN (VALUES (1, NULL));
SELECT (1, 1) IN (VALUES (NULL, 1));
SELECT (1, 1) IN (SELECT * FROM TABLE(X INT=(), Y INT=()));
SELECT * FROM (VALUES 1) T(C) WHERE NOT NOT CASE C WHEN 1 THEN TRUE WHEN 2 THEN FALSE ELSE NULL END;
SELECT C AND C, NOT(C AND C) FROM (VALUES 'F') T(C);
SELECT C != 2 AND C, NOT (C != 2 AND C) FROM (VALUES TRUE) T(C);
SELECT ROW(1) = ROW(ROW(1));
SELECT ROW(1) = ROW(ROW(2));
SELECT ROW(1) = ROW(ROW(1, 2));
SELECT ROW(1) = ROW(ROW(TIME '00:00:00'));
SELECT * FROM DUAL;
SELECT A FROM DUAL;
SELECT * FROM SYS.DUAL;
SELECT * FROM SYSDUMMY1;
SELECT A FROM SYSDUMMY1;
SELECT * FROM SYSIBM.SYSDUMMY1;
SELECT *, ROW_NUMBER() OVER W FROM TEST;
SELECT *, ROW_NUMBER() OVER W1, ROW_NUMBER() OVER W2 FROM TEST
    WINDOW W1 AS (W2 ORDER BY ID), W2 AS (PARTITION BY CATEGORY ORDER BY ID DESC);
SELECT *, LAST_VALUE(ID) OVER W FROM TEST
    WINDOW W AS (PARTITION BY CATEGORY ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW);
SELECT MAX(MAX(X) OVER ()) OVER () FROM VALUES (1);
SELECT MAX(MAX(X) OVER ()) FROM VALUES (1);
SELECT MAX(MAX(X)) FROM VALUES (1);
SELECT ROW_NUMBER() OVER (ORDER  /**/ BY CATEGORY), SUM(ID) FROM TEST GROUP BY CATEGORY HAVING SUM(ID) = 12;
SELECT ROW_NUMBER() OVER (ORDER  /**/ BY CATEGORY), SUM(ID) FROM TEST GROUP BY CATEGORY HAVING CATEGORY = 2;
SELECT ROW_NUMBER() OVER (ORDER BY CATEGORY), SUM(ID) FROM TEST GROUP BY CATEGORY HAVING CATEGORY > 1;
SELECT ROW_NUMBER() OVER (ORDER BY CATEGORY), SUM(ID) FROM TEST GROUP BY CATEGORY HAVING SUM(ID) = 12;
SELECT ROW_NUMBER() OVER (ORDER BY CATEGORY), SUM(ID) FROM TEST GROUP BY CATEGORY HAVING CATEGORY;
SELECT SUM(ID) OVER (ORDER BY ID ROWS NULL PRECEDING) P FROM TEST;
SELECT SUM(ID) OVER (ORDER BY ID RANGE NULL PRECEDING) P FROM TEST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS FIRST RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS FIRST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS LAST RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS LAST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS FIRST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS LAST RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS LAST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS FIRST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS LAST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS FIRST;
SELECT ARRAY_AGG(ID) OVER (ORDER BY V NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) A,
    ID, V FROM VALUES (1, 1), (2, NULL), (3, 2) T(ID, V) ORDER BY V NULLS LAST;

SELECT SUM(V) OVER (ORDER BY V RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM VALUES (TRUE) T(V);
SELECT
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN 10000000000 PRECEDING AND CURRENT ROW) P,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN 10000000001 PRECEDING AND 10000000000 PRECEDING) P2,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN CURRENT ROW AND 2147483647 FOLLOWING) F,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN 2147483647 FOLLOWING AND 2147483648 FOLLOWING) F2,
    ID FROM TEST ORDER BY ID;

SELECT
    ARRAY_AGG(T) OVER (ORDER BY T RANGE BETWEEN INTERVAL '1' DAY PRECEDING AND CURRENT ROW) C,
    ARRAY_AGG(T) OVER (ORDER BY T RANGE BETWEEN INTERVAL '2' HOUR PRECEDING AND INTERVAL '1' HOUR PRECEDING) P,
    T FROM VALUES (TIME '00:00:00'), (TIME '01:30:00') TEST(T) ORDER BY T;
SELECT SUM(A) OVER (ORDER BY A, B RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) S FROM VALUES (1, 2) T(A, B);
SELECT SUM(A) OVER (ORDER BY A, B RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) S FROM VALUES (1, 2) T(A, B);
SELECT SUM(A) OVER (ORDER BY A, B RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) S FROM VALUES (1, 2) T(A, B);
SELECT SUM(A) OVER (GROUPS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) S FROM VALUES (1, 2) T(A, B);
SELECT * FROM TEST ORDER BY A, B;
SELECT * FROM TEST ORDER BY A, B, C FETCH FIRST 4 ROWS ONLY;
SELECT * FROM TEST ORDER BY A, B, C FETCH FIRST 4 ROWS WITH TIES;
SELECT * FROM TEST ORDER BY A, B FETCH FIRST 4 ROWS WITH TIES;
SELECT * FROM TEST ORDER BY A FETCH FIRST ROW WITH TIES;
SELECT TOP (1) WITH TIES * FROM TEST ORDER BY A;
SELECT TOP 1 PERCENT WITH TIES * FROM TEST ORDER BY A;
SELECT TOP 51 PERCENT WITH TIES * FROM TEST ORDER BY A, B;
SELECT * FROM TEST ORDER BY A, B OFFSET 3 ROWS FETCH NEXT 1 ROW WITH TIES;
SELECT * FROM TEST FETCH NEXT ROWS ONLY;
SELECT * FROM TEST FETCH FIRST 101 PERCENT ROWS ONLY;
SELECT * FROM TEST FETCH FIRST -1 PERCENT ROWS ONLY;
SELECT * FROM TEST FETCH FIRST 0 PERCENT ROWS ONLY;
SELECT * FROM TEST FETCH FIRST 1 PERCENT ROWS ONLY;
SELECT * FROM TEST FETCH FIRST 10 PERCENT ROWS ONLY;
SELECT * FROM TEST OFFSET 2 ROWS FETCH NEXT 10 PERCENT ROWS ONLY;
SELECT * FROM TEST ORDER BY A FETCH FIRST 1 ROW WITH TIES;
SELECT * FROM TEST ORDER BY A, B OFFSET 3 ROWS FETCH NEXT 1 ROW WITH TIES;
SELECT * FROM TEST FETCH FIRST 1 ROW WITH TIES;
SELECT A, B FROM TEST ORDER BY A FETCH FIRST 1 ROW WITH TIES;
SELECT A, COUNT(B) FROM TEST GROUP BY A ORDER BY A OFFSET 1;
SELECT * FROM TEST ORDER BY ID DESC OFFSET 2 ROWS FETCH FIRST 2147483646 ROWS ONLY;
SELECT * FROM TEST ORDER BY ID DESC OFFSET 2 ROWS FETCH FIRST 2147483647 ROWS ONLY;
SELECT A, B FROM TEST1 UNION SELECT A, B FROM TEST2 ORDER BY TEST1.C;
SELECT TOP 1 ID FROM TEST OFFSET 1 ROW;
SELECT TOP 1 ID FROM TEST FETCH NEXT ROW ONLY;
SELECT TOP 1 ID FROM TEST LIMIT 1;
SELECT ID FROM TEST OFFSET 1 ROW LIMIT 1;
SELECT ID FROM TEST FETCH NEXT ROW ONLY LIMIT 1;
SELECT * FROM TEST ORDER BY ?, ? FETCH FIRST ROW ONLY;
SELECT * FROM TEST1, TEST2;
SELECT * EXCEPT (A) FROM TEST1;
SELECT * EXCEPT (TEST1.A) FROM TEST1;
SELECT * EXCEPT (PUBLIC.TEST1.A) FROM TEST1;
SELECT * EXCEPT (SCRIPT.PUBLIC.TEST1.A) FROM TEST1;
SELECT * EXCEPT (Z) FROM TEST1;
SELECT * EXCEPT (B, TEST1.B) FROM TEST1;
SELECT * EXCEPT (A) FROM TEST1, TEST2;
SELECT * EXCEPT (TEST1.A, B, TEST2.D) FROM TEST1, TEST2;
SELECT TEST1.*, TEST2.* FROM TEST1, TEST2;
SELECT TEST1.* EXCEPT (A), TEST2.* EXCEPT (A) FROM TEST1, TEST2;
SELECT TEST1.* EXCEPT (A), TEST2.* EXCEPT (D) FROM TEST1, TEST2;
SELECT * EXCEPT (T1.A, T2.D) FROM TEST1 T1, TEST2 T2;
SELECT ID, "VALUE" FROM TEST FOR UPDATE;
SELECT * FROM T1 LEFT JOIN T2 ON A = B FOR UPDATE;
SELECT DISTINCT "VALUE" FROM TEST FOR UPDATE;
SELECT DISTINCT ON("VALUE") ID, "VALUE" FROM TEST FOR UPDATE;
SELECT SUM("VALUE") FROM TEST FOR UPDATE;
SELECT ID FROM TEST GROUP BY "VALUE" FOR UPDATE;
SELECT 1 FROM TEST HAVING TRUE FOR UPDATE;
SELECT ID FROM TEST WHERE ID != ALL (SELECT ID FROM TEST WHERE ID IN(1, 3));
SELECT (1, 3) > ANY (SELECT ID, V FROM TEST);
SELECT (1, 2) > ANY (SELECT ID, V FROM TEST);
SELECT (2, 3) = ANY (SELECT ID, V FROM TEST);
SELECT (3, 4) > ALL (SELECT ID, V FROM TEST);
SELECT 1 = ALL (SELECT * FROM VALUES (NULL), (1), (2), (NULL) ORDER BY 1);
SELECT G / 10 G1, G / 10 G2, SUM(T.V) S FROM TEST T GROUP BY G / 10, G / 10;
SELECT G / 10 G1, G / 10 G2, SUM(T.V) S FROM TEST T GROUP BY G2;
SELECT RAND(), RAND() + 1, RAND() + 1, RAND() GROUP BY RAND() + 1;
SELECT RAND() A, RAND() + 1 B, RAND() + 1 C, RAND() D, RAND() + 2 E, RAND() + 3 F GROUP BY B, C, E, F;
SELECT * FROM TEST WHERE (A, B) IN (VALUES (11, 12), (21, 22), (41, 42));
SELECT * FROM TEST WHERE (A, B) = (VALUES (11, 12));
SELECT * FROM TEST WHERE (A, B) IN ((1, 2), (3, 4));
SELECT * FROM TEST WHERE (A, B) IN ((1::BIGINT, 2), (3, 4));
SELECT * FROM TEST WHERE (A, B) IN ((1000000000000, 2), (3, 4));
SELECT COUNT(*) C FROM TEST HAVING C < 1;
SELECT COUNT(*) C FROM TEST QUALIFY C < 1;
SELECT A, ROW_NUMBER() OVER (ORDER BY B) R
FROM (VALUES (1, 2), (2, 1), (3, 3)) T(A, B);
SELECT X, A, ROW_NUMBER() OVER (ORDER BY B) R
FROM (SELECT 1 X), (VALUES (1, 2), (2, 1), (3, 3)) T(A, B);
SELECT A, SUM(S) OVER (ORDER BY S) FROM
    (SELECT A, SUM(B) FROM (VALUES (1, 2), (1, 3), (3, 5), (3, 10)) V(A, B) GROUP BY A) S(A, S);
SELECT A, SUM(A) OVER W SUM FROM (VALUES 1, 2) T(A) WINDOW W AS (ORDER BY A);
SELECT A, B, C FROM (SELECT A, B, C FROM (VALUES (1, 2, 3)) V(A, B, C));
SELECT * FROM (SELECT * FROM (VALUES (1, 2, 3)) V(A, B, C));
SELECT * FROM
    (SELECT X * X, Y FROM
        (SELECT A + 5, B FROM
            (VALUES (1, 2)) V(A, B)
        ) T(X, Y)
    );
SELECT _ROWID_ S1, TEST._ROWID_ S2, PUBLIC.TEST._ROWID_ S3, SCRIPT.PUBLIC.TEST._ROWID_ S4,
    "_ROWID_" U1, TEST."_ROWID_" U2, PUBLIC.TEST."_ROWID_" U3, SCRIPT.PUBLIC.TEST."_ROWID_" U4
    FROM TEST;
SELECT X.ID FROM TEST X JOIN TEST Y ON Y.ID IN (SELECT 1);
SELECT T1.A, T2.ARR FROM TEST T1 JOIN (
    SELECT A, ARRAY_AGG(B) OVER (ORDER BY B ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) ARR FROM TEST
) T2 ON T1.A = T2.A;
SELECT COUNT(*) FROM (SELECT I, SUM(I) S, COUNT(I) C FROM TEST GROUP BY I HAVING S + C <= 9 ORDER BY I);
SELECT (SELECT A, B FROM TEST ORDER BY A + B FETCH FIRST ROW ONLY);
SELECT * FROM TEST UNION ALL SELECT * FROM TEST OFFSET 2 ROWS;
SELECT (1, 2) IN (SELECT * FROM TEST UNION ALL SELECT * FROM TEST OFFSET 2 ROWS);
SELECT * FROM TEST UNION ALL SELECT * FROM TEST ORDER BY A DESC, B DESC OFFSET 2 ROWS;
SELECT (1, 2) IN (SELECT * FROM TEST UNION ALL SELECT * FROM TEST ORDER BY A DESC, B DESC OFFSET 2 ROWS);
SELECT (1, 2) IN (SELECT * FROM TEST UNION ALL SELECT * FROM TEST ORDER BY A DESC, B DESC OFFSET 2 ROWS FETCH NEXT 1 ROW ONLY);
SELECT DISTINCT DATA FROM TEST ORDER BY (CASE WHEN EXISTS(SELECT * FROM TEST T WHERE T.NAME = 'A') THEN 1 ELSE 2 END);
SELECT DISTINCT DATA FROM TEST X ORDER BY (CASE WHEN EXISTS(SELECT * FROM TEST T WHERE T.ID = X.ID + 1) THEN 1 ELSE 2 END);
SELECT SUM(A), B, C FROM TEST GROUP BY B, C;
SELECT SUM(A), B, C FROM TEST GROUP BY (B), C, ();
SELECT SUM(A), B, C FROM TEST GROUP BY (B, C);
SELECT COUNT(*) FROM TEST;
SELECT COUNT(*) FROM TEST GROUP BY ();
SELECT COUNT(*) FROM TEST WHERE FALSE;
SELECT COUNT(*) FROM TEST WHERE FALSE GROUP BY ();
SELECT COUNT(*) FROM TEST WHERE FALSE GROUP BY (), ();
SELECT 1 FROM TEST GROUP BY ();
SELECT A AS A1, A AS A2 FROM TEST GROUP BY A;
SELECT;
SELECT FROM DUAL;
SELECT * FROM DUAL JOIN (SELECT * FROM DUAL) ON 1 = 1;
SELECT WHERE FALSE;
SELECT GROUP BY ();
SELECT HAVING FALSE;
SELECT QUALIFY FALSE;
SELECT ORDER BY (SELECT 1);
SELECT OFFSET 0 ROWS;
SELECT FETCH FIRST 0 ROWS ONLY;
SELECT A, A FROM TEST GROUP BY A HAVING SUM(A) > 0;
SELECT * FROM (SELECT * FROM T1 FETCH FIRST 2 ROWS ONLY) T1 JOIN T2 USING (T1_ID);
SELECT A, 1 AS X, B FROM TEST ORDER BY A, X, B DESC;
SELECT X FROM SYSTEM_RANGE(1, 2) ORDER BY X DESC FETCH FIRST 0xFFFFFFFF ROWS ONLY;
SELECT ((SELECT 1 X) EXCEPT (SELECT 1 Y)) T;
select * from
    (select * from
        (select * from
            (select * from
                (select * from
                    (select * from
                        (select * from
                            (select * from
                                (select * from test as t399 where x0 < 1 and x0 >= x0 or null <= -1) as t398
                            where -1 is not distinct from -1) as t397
                        where 3 is distinct from 2) as t396
                    where null is distinct from -1) as t395
                where 3 is distinct from -1 or null = x1) as t394
            where x0 is distinct from null) as t393
        where x0 >= null and -1 <= 1 and 3 is not distinct from -1) as t392
    where -1 >= 3) as t391
where -1 is distinct from -1 or 2 is distinct from x0;
SELECT * FROM (TABLE TEST) ORDER BY A, B, C FETCH FIRST ROW ONLY;
SELECT (1, 2, 3) IN (TABLE TEST);
SELECT (TABLE TEST FETCH FIRST ROW ONLY) "ROW";
select * from a inner join b on a=b right outer join c on c=a;
select * from c left outer join (a inner join b on b=a) on c=a;
select * from c left outer join a on c=a inner join b on b=a;
select a.id from test a inner join test b on a.id > b.id and b.id < 3 group by a.id;
select * from system_range(1, 3) t1 inner join system_range(2, 3) t2 inner join system_range(1, 2) t3 on t3.x=t2.x on t1.x=t2.x;
SELECT * FROM PARENT P LEFT OUTER JOIN CHILD C ON C.PARENTID=P.ID;
select a.i from t1 a inner join (select a.i from t2 a inner join (select i from t3) b on a.i=b.i) b on a.i=b.i;
select * from two;
select * from one natural join two left join two three on
one.id=three.id left join one four on two.id=four.id where three.val
is null;
select * from one natural join two left join two three on
one.id=three.id left join one four on two.id=four.id where
three.val>=DATE'2006-07-01';
select * from one natural join two left join two three on
one.id=three.id left join one four on two.id=four.id where three.val
is null or three.val>=DATE'2006-07-01';
select * from one natural join two left join one four on
two.id=four.id left join two three on one.id=three.id where three.val
is null or three.val>=DATE'2006-07-01';
select * from test1
inner join test2 on test1.id=test2.id left
outer join test3 on test2.id=test3.id
where test3.id is null;
select * from test1
inner join test2 on test1.id=test2.id
left outer join test3 on test2.id=test3.id
where test3.id is null;
SELECT TEST1.ID, TEST2.ID, TEST3.ID
FROM TEST2
LEFT OUTER JOIN TEST3 ON TEST2.ID = TEST3.ID
INNER JOIN TEST1
WHERE TEST3.ID IS NULL AND TEST1.ID = TEST2.ID;
select * from left_hand left outer join right_hand on left_hand.id=right_hand.id;
select * from left_hand left join right_hand on left_hand.id=right_hand.id;
select * from left_hand natural join right_hand;
select * from left_hand left outer join right_hand on left_hand.id=right_hand.id where left_hand.id=1;
select * from left_hand left join right_hand on left_hand.id=right_hand.id where left_hand.id=1;
select * from left_hand natural join right_hand where left_hand.id=1;
select * from left_hand left outer join right_hand on left_hand.id=right_hand.id where left_hand.id=1 having right_hand.id=2;
select * from left_hand left join right_hand on left_hand.id=right_hand.id where left_hand.id=1 having right_hand.id=2;
select * from left_hand natural join right_hand where left_hand.id=1 having right_hand.id=2;
select * from left_hand left outer join right_hand on left_hand.id=right_hand.id where left_hand.id=1 group by left_hand.id having right_hand.id=2;
select * from left_hand left join right_hand on left_hand.id=right_hand.id where left_hand.id=1 group by left_hand.id having right_hand.id=2;
select * from left_hand natural join right_hand where left_hand.id=1 group by left_hand.id having right_hand.id=2;
SELECT * FROM t1 left outer join t2 on t1.id=t2.id;
SELECT * FROM t1 left outer join t2 on t1.id=t2.id left outer join t3 on t1.id=t3.id;
SELECT * FROM t1 left outer join t2 on t1.id=t2.id inner join t3 on t1.id=t3.id;
select * from test l0 inner join test l1 on l0.sid=l1.sid, test l3 where l0.sid=l3.parent;
select * from
test l0
inner join test l1 on l0.sid=l1.sid
inner join test l2 on l0.sid=l2.id,
test l5
inner join test l3 on l5.sid=l3.sid
inner join test l4 on l5.sid=l4.id
where l2.id is not null
and l0.sid=l5.parent;
select * from t1 join t2 on t1.id=t2.id;
select * from t1 left join t2 on t1.id=t2.id;
select * from t1 right join t2 on t1.id=t2.id;
select * from t1 cross join t2;
select * from t1 natural join t2;
select * from customer c natural join invoice i natural join INVOICE_LINE l;
select c.*, i.*, l.* from customer c natural join invoice i natural join INVOICE_LINE l;
SELECT * FROM PARENT P INNER JOIN CHILD C ON P.ID = C.PARENTID;
SELECT * FROM PARENT P LEFT OUTER JOIN CHILD C ON P.ID = C.PARENTID;
SELECT * FROM CHILD C RIGHT OUTER JOIN PARENT P ON P.ID = C.PARENTID;
SELECT * FROM A LEFT JOIN B ON TRUE;
SELECT A.A1, A.A2, B.B1, B.B2 FROM A RIGHT JOIN B ON TRUE;
SELECT * FROM A LEFT JOIN B;
SELECT A.A1, A.A2, B.B1, B.B2 FROM A RIGHT JOIN B;
SELECT * FROM A LEFT JOIN B ON TRUE NATURAL JOIN C;
SELECT A.A1, A.A2, B.B1, B.B2, C.C1 FROM A RIGHT JOIN B ON TRUE NATURAL JOIN C;
SELECT * FROM A LEFT JOIN B NATURAL JOIN C;
SELECT A.A1, A.A2, B.B1, B.B2, C.C1 FROM A RIGHT JOIN B NATURAL JOIN C;
SELECT T1.X1, T2.X2, T3.X3, T4.X4, T5.X5 FROM (
    T1 INNER JOIN (
        T2 LEFT OUTER JOIN (
            T3 INNER JOIN T4 ON T3.X3 = T4.X4
        ) ON T2.X2 = T4.X4
    ) ON T1.X1 = T2.X2
) INNER JOIN T5 ON T2.X2 = T5.X5;
SELECT A.X FROM A JOIN B ON A.X = B.Y AND B.Y >= COALESCE((SELECT Z FROM C FETCH FIRST ROW ONLY), 0);
SELECT * FROM TEST X LEFT OUTER JOIN TEST Y ON Y.A = X.A || '1';
SELECT T1.B, T2.B FROM T1 INNER JOIN T2 USING (A);
SELECT * FROM T1 INNER JOIN T2 USING (A);
SELECT * FROM T1 INNER JOIN T2 USING (B);
SELECT T1.B, T2.B FROM T1 INNER JOIN T2 USING (A, B);
SELECT * FROM T1 INNER JOIN T2 USING (B, A);
SELECT *
    FROM (VALUES(1, 'A'), (2, 'B')) T1(A, B)
    JOIN (VALUES(2, 'C'), (3, 'D')) T2(A, C) USING (A);
SELECT *
    FROM (VALUES(1, 'A'), (2, 'B')) T1(A, B)
    LEFT JOIN (VALUES(2, 'C'), (3, 'D')) T2(A, C) USING (A);
SELECT *
    FROM (VALUES(1, 'A'), (2, 'B')) T1(A, B)
    RIGHT JOIN (VALUES(2, 'C'), (3, 'D')) T2(A, C) USING (A);
SELECT T1.*, T2.*
    FROM (VALUES(1, 'A'), (2, 'B')) T1(A, B)
    RIGHT JOIN (VALUES(2, 'C'), (3, 'D')) T2(A, C) USING (A);
SELECT *
    FROM (VALUES(1, 'A'), (2, 'B')) T1(A, B)
    NATURAL JOIN (VALUES(2, 'C'), (3, 'D')) T2(A, C);
SELECT * FROM T1 RIGHT JOIN T2 USING (A);
SELECT * FROM T1 RIGHT JOIN T2 USING (A);
SELECT * EXCEPT (T1.A) FROM T1 RIGHT JOIN T2 USING (A);
SELECT * EXCEPT (T2.A) FROM T1 RIGHT JOIN T2 USING (A);
SELECT * FROM S1.T RIGHT JOIN S2.T USING(A);
SELECT * FROM T1 JOIN T2 LEFT JOIN T3 ON T2.C2 = T3.C3 ON T1.C1 = T2.C2;
SELECT * FROM T1 RIGHT JOIN T2 LEFT JOIN T3 ON T2.C2 = T3.C3 ON T1.C1 = T2.C2;
SELECT X.A, Y.B, Z.C
FROM (SELECT 1 A) X JOIN (
    (SELECT 1 B) Y JOIN (SELECT 1 C) Z ON Z.C = Y.B
) ON Y.B = X.A;
SELECT * FROM (VALUES(1, 2));
SELECT * FROM (VALUES(1, 2)) AS T;
SELECT * FROM (VALUES(1, 2)) AS T(A, B);
SELECT A AS A1, B AS B1 FROM (VALUES(1, 2)) AS T(A, B);
SELECT A AS A1, B AS B1 FROM (VALUES(1, 2)) AS T(A, B) WHERE A <> B;
SELECT A AS A1, B AS B1 FROM (VALUES(1, 2)) AS T(A, B) WHERE A1 <> B1;
SELECT * FROM (VALUES(1, 2)) AS T(A);
SELECT * FROM (VALUES(1, 2)) AS T(A, a);
SELECT * FROM (VALUES(1, 2)) AS T(A, B, C);
SELECT V AS V1, A AS A1, B AS B1 FROM (VALUES (1)) T1(V) INNER JOIN (VALUES(1, 2)) T2(A, B) ON V = A;
SELECT * FROM (TEST) AS T(A, B);
SELECT * FROM TEST AS T(A, B);
SELECT * FROM TEST AS T(A, B) USE INDEX (TEST_I_IDX);
SELECT * FROM (SELECT 1 A, 2 A) T(B, C);
SELECT DISTINCT NAME FROM TEST ORDER BY NAME;
SELECT DISTINCT NAME FROM TEST ORDER BY LOWER(NAME);
SELECT DISTINCT ID FROM TEST ORDER BY ID;
SELECT DISTINCT ID FROM TEST ORDER BY -ID - 1;
SELECT DISTINCT ID FROM TEST ORDER BY (-ID + 10) > 0 AND NOT (ID = 0), ID;
SELECT DISTINCT NAME, ID + 1 FROM TEST ORDER BY UPPER(NAME) || (ID + 1);
SELECT DISTINCT ID FROM TEST ORDER BY NAME;
SELECT DISTINCT ID FROM TEST ORDER BY UPPER(NAME);
SELECT DISTINCT ID FROM TEST ORDER BY CURRENT_TIMESTAMP;
SELECT DISTINCT ID FROM TEST ORDER BY NAME;
SELECT DISTINCT ID FROM TEST ORDER BY LOWER(NAME);
SELECT DISTINCT ID FROM TEST JOIN TEST2 ON ID = ID2 ORDER BY LOWER(NAME);
SELECT DISTINCT ON(C1, C2) C1, C2, C3, C4, C5 FROM TEST;
SELECT DISTINCT ON(C1 + C2) C1, C2, C3, C4, C5 FROM TEST;
SELECT DISTINCT ON(C1 + C2, C3) C1, C2, C3, C4, C5 FROM TEST;
SELECT DISTINCT ON(C1) C2 FROM TEST ORDER BY C1;
SELECT DISTINCT ON(C1) C1, C4, C5 FROM TEST ORDER BY C1, C5;
SELECT DISTINCT ON(C1) C1, C4, C5 FROM TEST ORDER BY C1, C5 DESC;
SELECT T1.C1, T2.C5 FROM TEST T1 JOIN (
    SELECT DISTINCT ON(C1) C1, C4, C5 FROM TEST ORDER BY C1, C5
) T2 ON T1.C4 = T2.C4 ORDER BY T1.C1;
SELECT T1.C1, T2.C5 FROM TEST T1 JOIN (
    SELECT DISTINCT ON(C1) C1, C4, C5 FROM TEST ORDER BY C1, C5 DESC
) T2 ON T1.C4 = T2.C4 ORDER BY T1.C1;
SELECT DISTINCT ON(C1) C2 FROM TEST ORDER BY C3;
SELECT * FROM (VALUES (1::BIGINT, 2)) T (A, B) WHERE (A, B) IN (VALUES(1, 2));
SELECT * FROM (VALUES (1000000000000, 2)) T (A, B) WHERE (A, B) IN (VALUES(1, 2));
SELECT * FROM (VALUES (1, 2)) T (A, B) WHERE (A, B) IN (VALUES(1::BIGINT, 2));
SELECT * FROM (VALUES (1, 2)) T (A, B) WHERE (A, B) IN (VALUES(1000000000000, 2));
SELECT _ROWID_, A FROM TEST WHERE B = 4;
SELECT _ROWID_, A FROM TEST WHERE B = 4;
SELECT * FROM TEST WHERE V >= -1;
SELECT * FROM TEST WHERE V < -1;
SELECT T1.ID, T2.V AS LV FROM (SELECT ID, MAX(V) AS LV FROM T GROUP BY ID) AS T1
    INNER JOIN T AS T2 ON T2.ID = T1.ID AND T2.V = T1.LV
    WHERE T1.ID IN (1, 2) ORDER BY ID;
SELECT (SELECT ROWNUM) R FROM VALUES 1, 2, 3;
SELECT T1.A FROM TEST T1 LEFT OUTER JOIN TEST T2 ON T1.B = T2.A WHERE (SELECT T2.C) IS NOT NULL ORDER BY T1.A;
SELECT X, (SELECT X IN (SELECT B FROM TEST)) FROM SYSTEM_RANGE(1, 2);
SELECT T1.A FROM TEST T1 LEFT OUTER JOIN TEST T2 ON T1.B = T2.A WHERE (SELECT T2.C + ROWNUM) IS NOT NULL ORDER BY T1.A;
SELECT T FROM A JOIN B ON T >= D;
SELECT T AT TIME ZONE 'UTC' FROM TEST GROUP BY T;
SELECT T AT TIME ZONE 'UTC' FROM TEST GROUP BY T;
SELECT COUNT(*) FILTER (WHERE B = 10) N, COUNT(*) FILTER (WHERE B <> 10) O FROM TEST;
select 0 as x from system_range(1, 2) d group by d.x;
select 1 "a", count(*) from dual group by "a" order by "a";
SELECT SUM(points) FROM RESULTS
WHERE eventID IN
(SELECT eventID FROM RESULTS
WHERE studentID = 2
ORDER BY points DESC
LIMIT 2 )
AND studentID = 2;
SELECT eventID X FROM RESULTS
WHERE studentID = 2
ORDER BY points DESC
LIMIT 2;
SELECT SUM(r.points) FROM RESULTS r,
(SELECT eventID FROM RESULTS
WHERE studentID = 2
ORDER BY points DESC
LIMIT 2 ) r2
WHERE r2.eventID = r.eventId
AND studentID = 2;
select * from system_range(1,1) order by x limit 3 offset 3;
select char(nextval('seq')) as x;
select char(nextval('seq')) as x;
select id from test where name in(null, null);
select * from (select * from test order by name limit 1) where id < 10;
select * from test union select * from test order by test.name;
select name from test where name > all(select name from test where name<'b');
select count(*) from (select name from test where name > all(select name from test where name<'b')) x;
select * from test where id >= all(select id from test where 1=0);
select * from test where id = all(select id from test where 1=0);
select * from test where id = all(select id from test union all select id from test);
select * from test where null >= all(select id from test where 1=0);
select * from test where null = all(select id from test where 1=0);
select * from test where null = all(select id from test union all select id from test);
select * from test where id >= all(select cast(null as int) from test);
select * from test where id = all(select null from test union all select id from test);
select * from test where null >= all(select cast(null as int) from test);
select * from test where null = all(select null from test union all select id from test);
select x from dual order by y.x;
select rownum(), id, name from test order by id;
select rownum(), id, name from test order by name;
select rownum(), id, name from test order by name desc;
select 2^2;
select * from dual where cast('xx' as varchar_ignorecase(1)) = 'X' and cast('x x ' as char(2)) = 'x';
select (1) one;
select * from test order by id limit -1;
select * from test order by id limit 0;
select * from test order by id limit 1;
select * from test order by id limit 1+1;
select * from test order by id limit null;
select 1, 2 from (select * from dual) union all select 3, 4 from dual;
select 3 from (select * from dual) union all select 2 from dual;
select * from (select null as x) where x=1;
select * from test where id = 0.00;
select * from test where id = 0.0;
select count(*) from (select 1 union (select 2 intersect select 2)) x;
select count(*) from (select 1 from dual where 1 in ((select 1 union select 1))) a;
select count(*) from test where id = 'X1';
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'TEST';
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'CHILD';
select 1 from test a where 1 in(select 1 from test b where b.id in(select 1 from test c where c.id=a.id));
select @n := case when x = 1 then 1 else @n * x end f from system_range(1, 4);
select * from (select "x" from dual);
select * from(select 1 from system_range(1, 2) group by sin(x) order by sin(x));
SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TEST';
select * from v_test;
select x/3 as a, count(*) c from system_range(1, 10) group by a having c>2;
select id+1 as x, count(*) from test group by x;
select 1 as id, id as b, count(*)  from test group by id;
select id+1 as x, count(*) from test group by -x;
select id+1 as x, count(*) from test group by x having x>2;
select id+1 as x, count(*) from test group by 1;
select column_name, datetime_precision from information_schema.columns c where c.table_name = 'TEST' order by column_name;
select -test.a a from test order by test.a;
select -test.a from test order by test.a;
select -test.a aa from test order by a;
select -test.a aa from test order by aa;
select -test.a a from test order by a;
SELECT table_c.center_id, table_a.a_id, table_b.b_id
FROM table_c
INNER JOIN table_a ON table_c.left_id = table_a.left_id
AND table_c.right_id = table_a.right_id
LEFT JOIN table_b ON table_b.a_id = table_a.a_id;
SELECT * FROM table_c INNER JOIN view_a
ON table_c.center_id = view_a.center_id;
select t1.pk from t t1, t t2 where t1.pk = t2.attr order by t1.pk;
SELECT CONSTRAINT_NAME, INDEX_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
SELECT CONSTRAINT_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE;
select * from test order by id;
select * from a.x, b.x;
select d, year(d), extract(year from d), cast(d as timestamp) from p;
error select top sum(1) 0 from dual;
select * from test;
SELECT * FROM TEST;
select x, set(@t, ifnull(@t, 0) + x) from system_range(1, 3);
select * from system_range(1, 2) a,
(select * from system_range(1, 2) union select * from system_range(1, 2)
union select * from system_range(1, 1)) v where a.x = v.x;
select * from ((select * from test) union (select * from test)) where id = 0;
select * from ((test d1 inner join test d2 on d1.id = d2.id) inner join test d3 on d1.id = d3.id) inner join test d4 on d4.id = d1.id;
select * from person order by id;
select * from person order by id limit 2;
select * from person order by id limit 2 offset 1;
select * from person order by id limit 2147483647 offset 1;
select * from person order by id limit 2147483647-1 offset 1;
select * from person order by id limit 2147483647-1 offset 2;
select * from person order by id limit 2147483647-2 offset 2;
select table_name, character_maximum_length from information_schema.columns where column_name = 'A';
select * from (select dir_num, count(*) as cnt from multi_pages  t, b_holding bh
where t.bh_id=bh.id and bh.site='Hello' group by dir_num) as x
where cnt < 1000 order by dir_num asc;
select dir_num, count(*) as cnt from multi_pages  t, b_holding bh
where t.bh_id=bh.id and bh.site='Hello' group by dir_num
having count(*) < 1000 order by dir_num asc;
SELECT * FROM (SELECT CAST(BIRTH AS DATE) B
FROM TEST GROUP BY CAST(BIRTH AS DATE)) A
WHERE A.B >= '2006-05-05';
select * from test;
SELECT 'Hello' ~ 'He.*' T1, 'HELLO' ~ 'He.*' F2, CAST('HELLO' AS VARCHAR_IGNORECASE) ~ 'He.*' T3;
SELECT 'Hello' ~* 'He.*' T1, 'HELLO' ~* 'He.*' T2, 'hallo' ~* 'He.*' F3;
SELECT 'Hello' !~* 'Ho.*' T1, 'HELLO' !~* 'He.*' F2, 'hallo' !~* 'Ha.*' F3;
select * from test where name = -1 and name = id;
select * from system_range(1, 2) where x=x+1 and x=1;
select * from V, C where V.V  = C.C;
SELECT * FROM test_view WHERE renamed_col = 'a';
select table_name from tables where 1=0;
select * from script.PUBLIC.x;
select r+d, r+r, d+d from d;
select distinct length(c) from test order by length(c);
select id, c, v, length(c), length(v) from test order by id;
select id from test where c='a' order by id;
select id from test where c='a ' order by id;
select id from test where c=v order by id;
SELECT LEAST(ID, C, NAME), GREATEST(ID, C, NAME), LEAST(NULL, C), GREATEST(NULL, NULL), ID FROM TEST ORDER BY ID;
select family, (select count(car) from cars where cars.family = people.family) as x
from people group by family order by family;
select (1, 2);
select * from (select 1), (select 2);
select * from t2 where c1 not in(select c2 from t1);
select * from t2 where c1 not in(null, 2, 3);
select * from t1 where c2 not in(select c1 from t2);
select * from t1 where not exists(select * from t2 where t1.c2=t2.c1);
SELECT * FROM test WHERE family_name IN ('de Smith', 'Smith');
SELECT * FROM test WHERE family_name BETWEEN 'D' AND 'T';
SELECT * FROM test WHERE family_name IN ('de Smith', 'Smith');
SELECT DISTINCT * FROM TEST ORDER BY ID;
select currval('main_seq'), currval('TestSchema', 'TestSeq');
select nextval('TestSchema', 'ABC');
select nextval('abc'), currval('Abc'), nextval('TestSchema', 'ABC');
select nextval('test');
select * from test;
select x/10 y from system_range(1, 100) group by x/10;
select timestamp '2001-02-03T10:30:33';
select id/1000 from test group by id/1000;
select id/(10*100) from test group by id/(10*100);
select id/1000 from test group by id/100;
select (x/10000) from system_range(10, 20) group by (x/10000);
select sum(x), (x/10) from system_range(10, 100) group by (x/10);
select * from ADDRESS_VIEW;
select min(SUBSTRING(random_uuid(), 15,1)='4') from system_range(1, 10);
select min(8=bitand(12, PARSE_INT2(SUBSTRING(random_uuid(), 20,1), 16))) from system_range(1, 10);
select BITGET(x, 0) AS IS_SET from system_range(1, 2);
select * from test;
select DOMAIN_NAME, DOMAIN_DEFAULT, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, PARENT_DOMAIN_NAME, REMARKS from information_schema.domains;
select * from dual2;
SELECT * FROM C WHERE NOT EXISTS ((SELECT ID_A FROM A) EXCEPT (SELECT ID_B FROM B));
SELECT t1.ID, (SELECT t1.id || ':' || AVG(t2.ID) FROM X t2) AS col2 FROM X t1;
select * from test order by id;
select rownum, (select count(*) from test) as col2, rownum from test;
select rownum, * from (select * from test where id>1 order by id desc);
select * from test;
select * from test;
select * from test where name='HELLO';
select * from test2 where name='HELLO';
select * from test where name like 'HELLO';
select * from test2 where name like 'HELLO';
select * from test2, test where test2.name = test.name;
select * from test, test2 where test2.name = test.name;
select * from test2, test where test2.name = test.name;
select * from test, test2 where test2.name = test.name;
SELECT t.f1, t.f2 FROM test t ORDER BY t.f2;
SELECT t1.f1, t1.f2, t2.f1, t2.f2 FROM test t1, test t2 ORDER BY t2.f2, t1.f2;
SELECT id, sum(id) FROM test GROUP BY id ORDER BY id*sum(id);
select *
from test t1
inner join test t2 on t2.id=t1.id
inner join test t3 on t3.id=t2.id
where exists (select 1 from test t4 where t2.id=t4.id);
select * from test t1 where id in(select id from test t2 where t1.id=t2.id);
select * from test t1 where id in(id, id+1);
select * from test t1 where id in(id);
select * from test t1 where id in(select id from test);
select * from test t1 where id in(1, select max(id) from test);
select * from test t1 where id in(1, select max(id) from test t2 where t1.id=t2.id);
select * from t1;
SELECT * FROM TEST WHERE foo = 123456789014567;
SELECT TABLE_NAME, INDEX_NAME, INDEX_TYPE_NAME FROM INFORMATION_SCHEMA.INDEXES;
SELECT TABLE_NAME, INDEX_NAME, ORDINAL_POSITION, COLUMN_NAME FROM INFORMATION_SCHEMA.INDEX_COLUMNS;
select SEQUENCE_NAME, BASE_VALUE, INCREMENT, REMARKS from INFORMATION_SCHEMA.SEQUENCES;
select count(*) from test where id in ((select id from test where 1=0));
select count(*) from test where id = ((select id from test where 1=0)+1);
select count(*) from test where id = (select id from test where 1=0);
select count(*) from test where id in ((select id from test));
select count(*) from test where id = ((select id from test));
select count(*) from test where id = ARRAY [(select id from test), 1];
select count(*) from test where id = ((select id from test fetch first row only), 1);
select (select id from test where 1=0) from test;
-- select select a from test order by id;
select max(id) from test where id = max(id) group by id;
select * from test where a=TRUE=a;
SELECT T.ID FROM TEST "T";
SELECT T."ID" FROM TEST "T";
SELECT "T".ID FROM TEST "T";
SELECT "T"."ID" FROM TEST "T";
SELECT T.ID FROM "TEST" T;
SELECT T."ID" FROM "TEST" T;
SELECT "T".ID FROM "TEST" T;
SELECT "T"."ID" FROM "TEST" T;
SELECT T.ID FROM "TEST" "T";
SELECT T."ID" FROM "TEST" "T";
SELECT "T".ID FROM "TEST" "T";
SELECT "T"."ID" FROM "TEST" "T";
select "TEST".id from test;
select test."ID" from test;
select test."id" from test;
select "TEST"."ID" from test;
select "test"."ID" from test;
select public."TEST".id from test;
select public.test."ID" from test;
select public."TEST"."ID" from test;
select public."test"."ID" from test;
select "PUBLIC"."TEST".id from test;
select "PUBLIC".test."ID" from test;
select public."TEST"."ID" from test;
select "public"."TEST"."ID" from test;
SELECT * FROM TEST ORDER BY I;
select current from test;
SELECT my_new_int FROM my_table;
SELECT * FROM my_table;
select * from test;
SELECT * FROM PlanElements;
SELECT * FROM TEST;
SELECT GROUP_CONCAT(ID) FROM TEST;
SELECT * FROM SESSION.TEST;
SELECT group_concat(name) FROM TEST group by id;
select * from test;
select a, b, c from test;
SELECT * FROM TEST;
SELECT * FROM TEST;
SELECT "ROWNUM", ROWNUM, "SELECT" "AS", "PRIMARY" AS "X", "KEY", "NEXTVAL", "INDEX", "SELECT" "FROM" FROM "CREATE";
SELECT * FROM PARENT;
SELECT * FROM CHILD;
select * from STRING_TEST;
select * from STRING_TEST_ic;
SELECT * FROM TEST WHERE NAME = 'HELLO';
SELECT * FROM TEST WHERE NAME = 'HE11O';
SELECT * FROM TEST ORDER BY NAME;
SELECT * FROM TEST ORDER BY ID;
select * from test;
SELECT COUNT(*) FROM PARENT, CHILD A, CHILD B, CHILD C, CHILD D, CHILD E, CHILD F, CHILD G, CHILD H
WHERE AID=A.ID AND BID=B.ID AND CID=C.ID
AND DID=D.ID AND EID=E.ID AND FID=F.ID AND GID=G.ID AND HID=H.ID;
select * from test;
select * from test;
SELECT * FROM TEST WHERE NOT (1=1);
select * from test_null where a=0;
select * from test_null where not a=0;
select * from test_null where (a=0 or b=0);
select * from test_null where not (a=0 or b=0);
select * from test_null where (a=1 or b=0);
select * from test_null where not( a=1 or b=0);
select * from test_null where not(not( a=1 or b=0));
select * from test_null where a=0 or b=0;
SELECT count(*) FROM test_null WHERE not ('X'=null and 1=0);
SELECT DISTINCT TABLE_SCHEMA, TABLE_CATALOG FROM INFORMATION_SCHEMA.TABLES ORDER BY TABLE_SCHEMA;
SELECT * FROM INFORMATION_SCHEMA.SCHEMATA;
SELECT * FROM INFORMATION_SCHEMA.INFORMATION_SCHEMA_CATALOG_NAME;
SELECT INFORMATION_SCHEMA.SCHEMATA.SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;
SELECT INFORMATION_SCHEMA.SCHEMATA.* FROM INFORMATION_SCHEMA.SCHEMATA;
SELECT * FROM TEST_SEQ ORDER BY ID;
SELECT * FROM TEST;
select * from test;
SELECT * FROM TEST;
SELECT * FROM TEST WHERE ? IS NULL;
SELECT TOP 2 * FROM TEST ORDER BY ID;
SELECT * FROM TEST ORDER BY ID LIMIT 2+0 OFFSET 1+0;
SELECT * FROM TEST UNION ALL SELECT * FROM TEST ORDER BY ID LIMIT 2+0 OFFSET 1+0;
SELECT * FROM TEST ORDER BY ID OFFSET 4;
SELECT ID FROM TEST GROUP BY ID UNION ALL SELECT ID FROM TEST GROUP BY ID;
SELECT * FROM (SELECT ID FROM TEST GROUP BY ID);
SELECT * FROM TEST2COL WHERE A=0 AND B=0;
SELECT * FROM TEST2COL WHERE A=0;
SELECT * FROM TEST2COL WHERE B=0;
SELECT COUNT(*) FROM T_1;
SELECT ROLE_NAME FROM INFORMATION_SCHEMA.ROLES;
SELECT GRANTEE, GRANTEETYPE, GRANTEDROLE, RIGHTS, TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.RIGHTS;
SELECT * FROM INFORMATION_SCHEMA.TABLE_PRIVILEGES;
SELECT * FROM INFORMATION_SCHEMA.COLUMN_PRIVILEGES;
SELECT GRANTEE, GRANTEETYPE, GRANTEDROLE, RIGHTS, TABLE_NAME FROM INFORMATION_SCHEMA.RIGHTS;
SELECT * FROM INFORMATION_SCHEMA.TABLE_PRIVILEGES;
SELECT * FROM INFORMATION_SCHEMA.ROLES;
SELECT * FROM INFORMATION_SCHEMA.RIGHTS;
SELECT * FROM test t1 inner join test t2 on t1.id=t2.id and t2.name is not null where t1.id=1;
SELECT * FROM test t1 left outer join test t2 on t1.id=t2.id and t2.name is not null where t1.id=1;
SELECT * FROM test t1 left outer join test t2 on t1.id=t2.id and t2.name is null where t1.id=1;
SELECT * FROM SYSTEM_RANGE(1,2) UNION ALL SELECT * FROM SYSTEM_RANGE(1,2) ORDER BY 1;
SELECT * FROM CHILDREN UNION ALL SELECT * FROM CHILDREN ORDER BY ID, NAME FOR UPDATE;
SELECT 'Child', ID, NAME FROM CHILDREN UNION SELECT 'Class', ID, NAME FROM CLASSES;
SELECT * FROM CHILDREN EXCEPT SELECT * FROM CHILDREN WHERE CLASS=0;
SELECT CLASS FROM CHILDREN INTERSECT SELECT ID FROM CLASSES;
SELECT * FROM CHILDREN CH, CLASSES CL WHERE CH.CLASS = CL.ID;
SELECT CH.ID CH_ID, CH.NAME CH_NAME, CL.ID CL_ID, CL.NAME CL_NAME FROM CHILDREN CH, CLASSES CL WHERE CH.CLASS = CL.ID;
SELECT CH.ID CH_ID1, CH.NAME CH_NAME2, CL.ID CL_ID3, CL.NAME CL_NAME4
FROM CHILDREN CH, CLASSES CL WHERE CH.CLASS = CL.ID;
SELECT * FROM CHILDREN_CLASSES WHERE CH_NAME <> 'X';
SELECT * FROM CHILDREN_CLASS1;
SELECT * FROM CHILDREN_CLASS2;
SELECT * FROM CHILDREN_CLASS12;
SELECT * FROM V_UNION WHERE ID=1;
SELECT * FROM V_EXCEPT WHERE ID=1;
SELECT * FROM V_INTERSECT WHERE ID=1;
SELECT A.ID AID, A.NAME A_NAME, B.ID BID, B.NAME B_NAME FROM TEST_A A INNER JOIN TEST_B B WHERE A.ID = B.ID;
SELECT COUNT(*) FROM TEST_ALL;
SELECT * FROM TEST_A;
SELECT * FROM TEST_ALL;
SELECT * FROM TEST_ALL WHERE  AID=1;
SELECT * FROM TEST_ALL WHERE AID>0;
SELECT * FROM TEST_ALL WHERE AID<2;
SELECT * FROM TEST_ALL WHERE AID<=2;
SELECT * FROM TEST_ALL WHERE AID>=2;
SELECT TABLE_NAME, VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = 'PUBLIC';
SELECT * FROM TEST_A_SUB WHERE NAME IS NOT NULL;
error SELECT T1.* T2;
error select replace('abchihihi', 'i', 'o') abcehohoho, replace('this is tom', 'i') 1e_th_st_om from test;
error select monthname(date )'005-0E9-12') d_set fm test;
SELECT * FROM TEST T WHERE NOT EXISTS(SELECT * FROM TEST T2 WHERE T.ID > T2.ID);
select * from test where (select max(t1.id) from test t1) between 0 and 100;
SELECT * FROM TEST T WHERE T.ID = (SELECT T2.ID FROM TEST T2 WHERE T2.ID=T.ID);
SELECT (SELECT T2.NAME FROM TEST T2 WHERE T2.ID=T.ID), T.NAME FROM TEST T;
SELECT (SELECT SUM(T2.ID) FROM TEST T2 WHERE T2.ID>T.ID), T.ID FROM TEST T;
select * from test t where t.id+1 in (select id from test);
select * from test t where t.id in (select id from test where id=t.id);
select 1 from test, test where 1 in (select 1 from test where id=1);
select * from test, test where id=id;
select 1 from test, test where id=id;
select 1 from test where id in (select id from test, test);
SELECT A, B, COUNT(*) CAL, COUNT(A) CA, COUNT(B) CB, MIN("VALUE") MI, MAX("VALUE") MA, SUM("VALUE") S FROM TEST GROUP BY A, B;
SELECT ID, XB, XBL, XO, XCL, XVI FROM TEST;
SELECT ID FROM TEST WHERE XCL = XCL;
SELECT ID FROM TEST WHERE XCL LIKE 'abc%';
SELECT ID FROM TEST WHERE XVI LIKE 'abc%';
SELECT 'abc', 'Papa Joe''s', CAST(-1 AS SMALLINT), CAST(2 AS BIGINT), CAST(0 AS DOUBLE), CAST('0a0f' AS BINARY(4)) B, CAST(125 AS TINYINT), TRUE, FALSE FROM TEST WHERE ID=1;
SELECT CAST('abcd' AS VARCHAR(255)) C1, CAST('ef_gh' AS VARCHAR(3)) C2;
SELECT * FROM TEST;
SELECT XD+1, XD-1, XD-XD FROM TEST;
SELECT ID, CAST(XTS AS DATE) TS2D,
CAST(XTS AS TIME(9)) TS2T,
CAST(XD AS TIMESTAMP) D2TS FROM TEST;
select * from test;
SELECT *, 0xFF, -0x1234567890abcd FROM TEST;
SELECT XD, CAST(XD AS DECIMAL(10,1)) D2DE, CAST(XD2 AS DECIMAL(4, 3)) DO2DE, CAST(XR AS DECIMAL(20,3)) R2DE FROM TEST;
SELECT ID, CAST(XB AS DOUBLE) L2D, CAST(X_SM AS DOUBLE) S2D, CAST(XT AS DOUBLE) X2D FROM TEST;
SELECT ID, CAST(XB AS REAL) L2D, CAST(X_SM AS REAL) S2D, CAST(XT AS REAL) T2R FROM TEST;
SELECT ID, CAST(X_SM AS BIGINT) S2L, CAST(XT AS BIGINT) B2L, CAST(XD2 AS BIGINT) D2L, CAST(XR AS BIGINT) R2L FROM TEST;
SELECT ID, CAST(XB AS INT) L2I, CAST(XD2 AS INT) D2I, CAST(XD2 AS SMALLINT) DO2I, CAST(XR AS SMALLINT) R2I FROM TEST;
SELECT ID, CAST(XD AS SMALLINT) D2S, CAST(XB AS SMALLINT) L2S, CAST(XT AS SMALLINT) B2S FROM TEST;
SELECT ID, CAST(XD2 AS TINYINT) D2B, CAST(XD AS TINYINT) DE2B, CAST(XB AS TINYINT) L2B, CAST(X_SM AS TINYINT) S2B FROM TEST;
SELECT ID, CAST(XD2 AS BIT) D2B, CAST(XD AS BIT) DE2B, CAST(XB AS BIT) L2B, CAST(X_SM AS BIT) S2B FROM TEST;
SELECT CAST('TRUE' AS BIT) NT, CAST('1.0' AS BIT) N1, CAST('0.0' AS BIT) N0;
SELECT ID, ID+X1, ID+XT, ID+X_SM, ID+XB, ID+XD, ID+XD2, ID+XR FROM TEST;
SELECT ID, 10-X1, 10-XT, 10-X_SM, 10-XB, 10-XD, 10-XD2, 10-XR FROM TEST;
SELECT ID, 10*X1, 10*XT, 10*X_SM, 10*XB, 10*XD, 10*XD2, 10*XR FROM TEST;
SELECT ID, SIGN(XT), SIGN(X_SM), SIGN(XB), SIGN(XD), SIGN(XD2), SIGN(XR) FROM TEST;
SELECT ID, XT-XT-XT, X_SM-X_SM-X_SM, XB-XB-XB, XD-XD-XD, XD2-XD2-XD2, XR-XR-XR FROM TEST;
SELECT ID, XT+XT, X_SM+X_SM, XB+XB, XD+XD, XD2+XD2, XR+XR FROM TEST;
SELECT ID, XT*XT, X_SM*X_SM, XB*XB, XD*XD, XD2*XD2, XR*XR FROM TEST;
SELECT 2/3 FROM TEST WHERE ID=1;
SELECT ID/ID FROM TEST;
SELECT XT/XT FROM TEST;
SELECT X_SM/X_SM FROM TEST;
SELECT XB/XB FROM TEST;
SELECT XD/XD FROM TEST;
SELECT XD2/XD2 FROM TEST;
SELECT XR/XR FROM TEST;
SELECT ID++0, -X1, -XT, -X_SM, -XB, -XD, -XD2, -XR FROM TEST;
SELECT ID, X1||'!', XT||'!', X_SM||'!', XB||'!', XD||'!', XD2||'!', XR||'!' FROM TEST;
SELECT * FROM CUSTOMER WHERE ID IN(1,2,4,-1);
SELECT * FROM CUSTOMER WHERE ID NOT IN(3,4,5,'1');
SELECT * FROM CUSTOMER WHERE ID NOT IN(SELECT CUSTOMER_ID FROM INVOICE);
SELECT * FROM INVOICE WHERE CUSTOMER_ID IN(SELECT C.ID FROM CUSTOMER C);
SELECT * FROM CUSTOMER WHERE NAME IN('Lehmann', 20);
SELECT * FROM CUSTOMER WHERE NAME NOT IN('Scott');
SELECT * FROM CUSTOMER WHERE NAME IN(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME NOT IN(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME = ANY(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME = ALL(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME > ALL(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME > ANY(SELECT NAME FROM CUSTOMER);
SELECT * FROM CUSTOMER WHERE NAME < ANY(SELECT NAME FROM CUSTOMER);
select stddev_pop(x) s_px, stddev_samp(x) s_sx, var_pop(x) v_px, var_samp(x) v_sx,
stddev_pop(y) s_py, stddev_samp(y) s_sy, var_pop(y) v_py, var_samp(y) v_sy from t;
select var(100000000.1) z from system_range(1, 1000000);
select * from s;
select some(y>10), every(y>10), min(y), max(y) from t;
select * from s;
select * from s;
select * from s;
select * from s;
select * from s;
select stddev_pop(distinct x) s_px, stddev_samp(distinct x) s_sx, var_pop(distinct x) v_px, var_samp(distinct x) v_sx,
stddev_pop(distinct y) s_py, stddev_samp(distinct y) s_sy, var_pop(distinct y) v_py, var_samp(distinct y) V_SY from t;
select some(y>10), every(y>10), min(y), max(y) from t;
SELECT IFNULL(NAME, '') || ': ' || GROUP_CONCAT("VALUE" ORDER BY NAME, "VALUE" DESC SEPARATOR ', ') FROM TEST GROUP BY NAME ORDER BY 1;
SELECT GROUP_CONCAT(ID ORDER BY ID) FROM TEST;
SELECT STRING_AGG(ID,';') FROM TEST;
SELECT DISTINCT NAME FROM TEST;
SELECT DISTINCT NAME FROM TEST ORDER BY NAME DESC NULLS LAST;
SELECT DISTINCT NAME FROM TEST ORDER BY NAME DESC NULLS LAST LIMIT 2 OFFSET 1;
SELECT NAME, COUNT(*), SUM("VALUE"), MAX("VALUE"), MIN("VALUE"), AVG("VALUE"), COUNT(DISTINCT "VALUE") FROM TEST GROUP BY NAME;
SELECT NAME, MAX("VALUE"), MIN("VALUE"), MAX("VALUE"+1)*MIN("VALUE"+1) FROM TEST GROUP BY NAME;
SELECT * FROM TEST ORDER BY NAME;
SELECT * FROM TEST ORDER BY NAME DESC;
SELECT * FROM TEST ORDER BY NAME NULLS FIRST;
SELECT * FROM TEST ORDER BY NAME DESC NULLS FIRST;
SELECT * FROM TEST ORDER BY NAME NULLS LAST;
SELECT * FROM TEST ORDER BY NAME DESC NULLS LAST;
SELECT ID, '=', NAME FROM TEST ORDER BY 2 FOR UPDATE;
SELECT NAME, SUM(ID) FROM TEST GROUP BY NAME HAVING COUNT(*)>1 ORDER BY NAME;
SELECT * FROM TEST;
SELECT TOP 2 * FROM TEST;
SELECT TOP 2 * FROM TEST ORDER BY ID DESC;
SELECT * FROM TEST ORDER BY ID ASC;
SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES;
SELECT * FROM B_TEST;
SELECT A_INT FROM A_TEST;
SELECT * FROM CHILD;
SELECT * FROM INVOICE_LINE;
SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS;
skip select 0 from ((select 0 as f from dual u1 where null in (?, ?, ?, ?, ?) select 0 as f from dual u1 where null in (?, ?, ?, ?, ?)) union all (select u2.f from (select u2.f from (select 0 as f from (select 0 as f from (select 0 from dual u2f1f1 where now() = ?select 0 from dual u2f1f1 where now() = ?) u2f1) u2)) where f = 12345;
select b from x;
select * from test where "YEAR" in (select distinct "YEAR" from test order by "YEAR" desc limit 1 offset 0);
select 1000L / 10;
select * from (select 1 as y from dual order by y);
select 1 from(select 2 from(select 1) a right join dual b) c;
select 1.00 / 3 * 0.00;
select 1.00000 / 3 * 0.0000;
select 1.0000000 / 3 * 0.00000;
select 1.0000000 / 3 * 0.000000;
select * from (select group_concat(distinct 1) from system_range(1, 3));
select sum(mod(x, 2) = 1) from system_range(1, 10);
select count(*) from (select b.x from a left join b);
select count(distinct now()) c from system_range(1, 100), system_range(1, 1000);
select {fn TIMESTAMPADD(SQL_TSI_DAY, 1, {ts '2011-10-20 20:30:40.001'})};
select {fn TIMESTAMPADD(SQL_TSI_SECOND, 1, cast('2011-10-20 20:30:40.001' as timestamp))};
select N'test';
select E'test\\test';
select column_default from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select is_nullable from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select data_type from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select data_type from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select column_default from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select is_nullable from information_schema.columns c where c.table_name = 'TEST' and c.column_name = 'ID';
select x from (select *, rownum as r from system_range(1, 3)) where r=2;
select count(*) from test where name like 'Hello++World++' escape '+';
select count(*) from test where name like '+H+e+l+l+o++World++' escape '+';
select count(*) from test where name like 'Hello+World++' escape '+';
select count(*) from test where name like 'Hello++World+' escape '+';
select count(*) from system_range(1, 1);
select count(*) from system_range(1, -1);
select 1 from dual where '\' like '\' escape '';
select left(timestamp '2001-02-03 08:20:31+04', 4);
select * from test order by id;
select count(1) from test;
select distinct t from test;
select count(*)from((select 1 from dual limit 1)union(select 2 from dual limit 1));
select datediff(yyyy, now(), now());
select 1 from t group by year(d) order by year(d);
select 1 from t group by d/10 order by d/10;
select nextval('"test".REPORT_ID_SEQ');
select nextval('"test"."report_id_seq"');
select nextval('test.report_id_seq');
SELECT * FROM SYSTEM_RANGE(1, 100) OFFSET 99 ROWS;
SELECT * FROM SYSTEM_RANGE(1, 100) OFFSET 50 ROWS FETCH FIRST 1 ROW ONLY;
SELECT * FROM SYSTEM_RANGE(1, 100) FETCH FIRST 1 ROWS ONLY;
SELECT * FROM SYSTEM_RANGE(1, 100) FETCH FIRST ROW ONLY;
select remarks from INFORMATION_SCHEMA.COLUMNS where table_name='TEST';
SELECT SOME(X>4) FROM SYSTEM_RANGE(1,6);
SELECT EVERY(X>4) FROM SYSTEM_RANGE(1,6);
SELECT BOOL_OR(X>4) FROM SYSTEM_RANGE(1,6);
SELECT BOOL_AND(X>4) FROM SYSTEM_RANGE(1,6);
SELECT BIT_OR(X) FROM SYSTEM_RANGE(1,6);
SELECT BIT_AND(X) FROM SYSTEM_RANGE(1,6);
SELECT BIT_AND(X) FROM SYSTEM_RANGE(1,1);
SELECT * FROM TEST;
SELECT NEXT VALUE FOR TEST_SEQ;
SELECT NEXT VALUE FOR TEST_SEQ;
select count(*) from (select * from ((select * from test) union (select * from test)) a) b where id = 0;
select count(*) from (select * from ((select * from test) union select * from test) a) b where id = 0;
select count(*) from (select * from (select * from test union select * from test) a) b where id = 0;
select 1 from ((test d1 inner join test d2 on d1.id = d2.id) inner join test d3 on d1.id = d3.id) inner join test d4 on d4.id = d1.id;
select replace(lpad('string', 10), ' ', '*');
select instr('abcisj','s', -1) from dual;
select * from test where id between 0 and 1;
select * from test where id between 3 and 4;
SELECT COUNT(*) FROM TEST WHERE NAME REGEXP 'World';
SELECT NAME FROM TEST WHERE NAME REGEXP 'WorldW';
select count(script.public.test.id) from script.public.test;
select year(timestamp '2007-07-26T18:44:26.109000+02:00');
select group_concat(id order by id) from test;
select count(*) from test;
select * from dual where 'a_z' like '%=_%' escape '=';
select * FROM test_view;
select sum(C0) from (select count(*) AS C0 from (select distinct * from test1) as temp);
select distinct id from test a order by a.id;
select SUM (CASE when ID=1 then 0 ELSE A END) col0 from Foo;
select (SELECT true)+1 GROUP BY 1;
select SUM (CASE when ID=1 then A ELSE 0 END) col0 from Foo;
select count(*) from A left outer join (B  inner join C on C.BID=B.ID )  on B.AID=A.ID where A.id=1;
select count(*) from A left outer join (B  left join C on C.BID=B.ID )  on B.AID=A.ID where A.id=1;
select count(*) from A left outer join B on B.AID=A.ID inner join C on C.BID=B.ID where A.id=1;
select count(*) from (A left outer join B on B.AID=A.ID) inner join C on C.BID=B.ID where A.id=1;
select a.test.id + b.test.id from a.test, b.test;
select date '+0011-01-01';
select date'-0010-01-01';
select remarks from information_schema.triggers where trigger_name = 'TEST_TRIGGER';
select remarks from information_schema.triggers where trigger_name = 'TEST_TRIGGER';
select remarks from information_schema.routines where routine_name = 'PARSE_LONG';
select remarks from information_schema.routines where routine_name = 'PARSE_LONG';
select remarks from information_schema.roles where role_name = 'HR';
select remarks from information_schema.roles where role_name = 'HR';
select remarks from information_schema.domains where domain_name = 'EMAIL';
select remarks from information_schema.domains where domain_name = 'EMAIL';
select remarks from information_schema.schemata where schema_name = 'TESTS';
select remarks from information_schema.sequences where sequence_name = 'WALK';
select remarks from information_schema.schemata where schema_name = 'TESTS';
select remarks from information_schema.sequences where sequence_name = 'WALK';
select remarks from information_schema.table_constraints where constraint_name = 'CONST1';
select remarks from information_schema.indexes where index_name = 'IDX_ID';
select remarks from information_schema.table_constraints where constraint_name = 'CONST1';
select remarks from information_schema.indexes where index_name = 'IDX_ID';
select remarks from information_schema.users where user_name = 'SALES';
select remarks from information_schema.users where user_name = 'SALES';
select remarks from information_schema.users where user_name = 'SALES_USER';
select remarks from information_schema.users where user_name = 'SALES_USER';
select remarks from information_schema.tables where table_name = 'TEST_LINK';
select remarks from information_schema.tables where table_name = 'TEST_LINK';
select remarks from information_schema.tables where table_name = 'TEST_LINK';
select remarks from information_schema.tables where table_name = 'TEST_L';
select remarks from information_schema.tables where table_name = 'TEST_L';
select remarks from information_schema.tables where table_name = 'TEST_V';
select remarks from information_schema.tables where table_name = 'TEST_V';
select remarks from information_schema.tables where table_name = 'TEST_VIEW';
select remarks from information_schema.tables where table_name = 'TEST_VIEW';
select remarks from information_schema.tables where table_name = 'TEST';
select remarks from information_schema.tables where table_name = 'TEST';
select remarks from information_schema.tables where table_name = 'TEST1';
select remarks from information_schema.tables where table_name = 'TEST1';
select remarks from information_schema.tables where table_name = 'TEST1';
select remarks from information_schema.columns where table_name = 'TEST' and column_name = 'B';
select remarks from information_schema.columns where table_name = 'TEST' and column_name = 'B';
select remarks from information_schema.columns where table_name = 'TEST' and column_name = 'A';
select remarks from information_schema.columns where table_name = 'TEST' and column_name = 'A';
select remarks from information_schema.columns where table_name = 'TEST2';
select remarks from information_schema.columns where table_name = 'TEST2';
select count(*) from test1 where a='abcaaaa';
select count(*) from test1 where a='abcbbbb';
select count(*) from test1 where a='abccccc';
select count(*) from test1 where a='abcdddd';
select count(*) from test1 where a='abccccc';
select count(*) from test1 where a='abcdddd';
select count(*) from test1 where a='abccccc';
select count(*) from test;
select max(col1) from test;
select count(*) from test;
select max(col1) from test;
SELECT 1 "A""B""""C""";
SELECT 1 ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345;
SELECT 1 ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456;
SELECT 1 "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
SELECT 1 "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456";
SELECT 1 "ABCDEFGHIJKLMNOPQRSTUVWXYZ01234""5ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
SELECT 1 "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345""ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
SELECT 3 U&"\0031", 4 U&"/0032" UESCAPE '/';
SELECT 1 U&"ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ01234\0035";
SELECT 1 U&"ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ012345ABCDEFGHIJKLMNOPQRSTUVWXYZ01234\00356";
SELECT * FROM TEST;
SELECT * FROM TEST ORDER BY ID;
SELECT * FROM TEST ORDER BY ID;
SELECT * FROM TEST ORDER BY ID;
SELECT ID, V, LENGTH(V2) > 18 AS L FROM TEST ORDER BY ID;
SELECT ID, V, LENGTH(V2) > 18 AS L FROM TEST ORDER BY ID;
SELECT ID, V, LENGTH(V2) > 18 AS L FROM TEST ORDER BY ID;
SELECT ID, V, LENGTH(V2) > 18 AS L FROM TEST ORDER BY ID;
SELECT COLUMN_NAME, COLUMN_DEFAULT, COLUMN_ON_UPDATE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TEST' ORDER BY COLUMN_NAME;
SELECT COLUMN_NAME, COLUMN_DEFAULT, COLUMN_ON_UPDATE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TEST' ORDER BY COLUMN_NAME;
select quarter(date '2005-09-01');
select length(curdate()) c1, length(current_date()) c2, substring(curdate(), 5, 1) c3;
SELECT CURRENT_DATE IS OF (DATE);
SELECT FORMATDATETIME(TIMESTAMP WITH TIME ZONE '2010-05-06 07:08:09.123Z', 'yyyy-MM-dd HH:mm:ss.SSS z');
SELECT FORMATDATETIME(TIMESTAMP WITH TIME ZONE '2010-05-06 07:08:09.123+13:30', 'yyyy-MM-dd HH:mm:ss.SSS z');
select second(timestamp '2005-01-01 23:10:59');
SELECT CAST(CURRENT_TIME AS TIME(9)) = LOCALTIME;
SELECT CAST(CURRENT_TIME(0) AS TIME(9)) = LOCALTIME(0);
SELECT CAST(CURRENT_TIME(9) AS TIME(9)) = LOCALTIME(9);
select length(curtime())>=8 c1, length(current_time())>=8 c2, substring(curtime(), 3, 1) c3;
select length(now())>18 c1, length(current_timestamp())>18 c2, length(now(0))>18 c3, length(now(2))>18 c4;
SELECT CAST(CURRENT_TIME AS TIME(9)) = LOCALTIME;
SELECT CAST(CURRENT_TIME(0) AS TIME(9)) = LOCALTIME(0);
SELECT CAST(CURRENT_TIME(9) AS TIME(9)) = LOCALTIME(9);
select dateadd('month', 1, timestamp '2003-01-31 10:20:30.012345678');
select dateadd('year', -1, timestamp '2000-02-29 10:20:30.012345678');
select ts + t from test;
select ts + t * 0.5 x from test;
select ts + 0.5 x from test;
select ts - 1.5 x from test;
select ts + t / 0.5 x from test;
select 1 + d + 1, d - 1, 2 + ts + 2, ts - 2 from test;
select 1 + d + t + 1 from test;
SELECT DATEADD('MICROSECOND', 1, TIME '10:00:01'), DATEADD('MCS', 1, TIMESTAMP '2010-10-20 10:00:01.1');
SELECT DATEADD('NANOSECOND', 1, TIME '10:00:01'), DATEADD('NS', 1, TIMESTAMP '2010-10-20 10:00:01.1');
SELECT DATEADD('HOUR', 1, DATE '2010-01-20');
SELECT DATEADD('MINUTE', 30, TIME '12:30:55');
SELECT DATEADD('DAY', 1, TIME '12:30:55');
SELECT DATEADD('QUARTER', 1, DATE '2010-11-16');
SELECT DATEADD('DAY', 10, TIMESTAMP WITH TIME ZONE '2000-01-05 15:00:30.123456789-10');
SELECT TIMESTAMPADD('DAY', 10, TIMESTAMP '2000-01-05 15:00:30.123456789');
SELECT TIMESTAMPADD('TIMEZONE_HOUR', 1, TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+07:30');
SELECT TIMESTAMPADD('TIMEZONE_MINUTE', -45, TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+07:30');
SELECT TIMESTAMPADD('TIMEZONE_SECOND', -45, TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+07:30');
SELECT TIMESTAMPADD('TIMEZONE_HOUR', 1, TIME WITH TIME ZONE '10:00:00+07:30');
SELECT TIMESTAMPADD('TIMEZONE_MINUTE', -45, TIME WITH TIME ZONE '10:00:00+07:30');
SELECT DATEADD(HOUR, 1, TIME '23:00:00');
SELECT DATEADD(HOUR, 1, TIME WITH TIME ZONE '21:00:00+01');
SELECT DATEADD(HOUR, 1, TIME WITH TIME ZONE '23:00:00+01');
SELECT D FROM (SELECT '2010-01-01' D) WHERE D IN (SELECT D1 - 1 FROM (SELECT DATE '2010-01-02' D1));
SELECT DATEADD(MILLENNIUM, 1, DATE '2000-02-29');
SELECT DATEADD(CENTURY, 1, DATE '2000-02-29');
SELECT DATEADD(DECADE, 1, DATE '2000-02-29');
select trunc('2015-05-29 15:00:00');
select trunc('2015-05-29');
select trunc(timestamp '2000-01-01 10:20:30.0');
select trunc(timestamp '2001-01-01 14:00:00.0');
select dayofmonth(date '2005-09-12');
select dayofmonth(ts) d from test;
select datediff('yy', timestamp '2003-12-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('year', timestamp '2003-12-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('mm', timestamp '2003-11-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('month', timestamp '2003-11-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('dd', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-05 10:00:00.0');
select datediff('day', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-05 10:00:00.0');
select datediff('hh', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-02 10:00:00.0');
select datediff('hour', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-02 10:00:00.0');
select datediff('mi', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('minute', timestamp '2004-01-01 10:20:30.0', timestamp '2004-01-01 10:00:00.0');
select datediff('ss', timestamp '2004-01-01 10:00:00.5', timestamp '2004-01-01 10:00:01.0');
select datediff('second', timestamp '2004-01-01 10:00:00.5', timestamp '2004-01-01 10:00:01.0');
select datediff('ms', timestamp '2004-01-01 10:00:00.5', timestamp '2004-01-01 10:00:01.0');
select datediff('millisecond', timestamp '2004-01-01 10:00:00.5', timestamp '2004-01-01 10:00:01.0');
SELECT DATEDIFF('SECOND', '1900-01-01 00:00:00.001', '1900-01-01 00:00:00.002'), DATEDIFF('SECOND', '2000-01-01 00:00:00.001', '2000-01-01 00:00:00.002');
SELECT DATEDIFF('SECOND', '1900-01-01 00:00:00.000', '1900-01-01 00:00:00.001'), DATEDIFF('SECOND', '2000-01-01 00:00:00.000', '2000-01-01 00:00:00.001');
SELECT DATEDIFF('MINUTE', '1900-01-01 00:00:00.000', '1900-01-01 00:00:01.000'), DATEDIFF('MINUTE', '2000-01-01 00:00:00.000', '2000-01-01 00:00:01.000');
SELECT DATEDIFF('MINUTE', '1900-01-01 00:00:01.000', '1900-01-01 00:00:02.000'), DATEDIFF('MINUTE', '2000-01-01 00:00:01.000', '2000-01-01 00:00:02.000');
SELECT DATEDIFF('HOUR', '1900-01-01 00:00:00.000', '1900-01-01 00:00:01.000'), DATEDIFF('HOUR', '2000-01-01 00:00:00.000', '2000-01-01 00:00:01.000');
SELECT DATEDIFF('HOUR', '1900-01-01 00:00:00.001', '1900-01-01 00:00:01.000'), DATEDIFF('HOUR', '2000-01-01 00:00:00.001', '2000-01-01 00:00:01.000');
SELECT DATEDIFF('HOUR', '1900-01-01 01:00:00.000', '1900-01-01 01:00:01.000'), DATEDIFF('HOUR', '2000-01-01 01:00:00.000', '2000-01-01 01:00:01.000');
SELECT DATEDIFF('HOUR', '1900-01-01 01:00:00.001', '1900-01-01 01:00:01.000'), DATEDIFF('HOUR', '2000-01-01 01:00:00.001', '2000-01-01 01:00:01.000');
select datediff(day, '2015-12-09 23:59:00.0', '2016-01-16 23:59:00.0'), datediff(wk, '2015-12-09 23:59:00.0', '2016-01-16 23:59:00.0');
SELECT DATEDIFF('MICROSECOND', '2006-01-01 00:00:00.0000000', '2006-01-01 00:00:00.123456789'),
    DATEDIFF('MCS', '2006-01-01 00:00:00.0000000', '2006-01-01 00:00:00.123456789'),
    DATEDIFF('MCS', '2006-01-01 00:00:00.0000000', '2006-01-02 00:00:00.123456789');
SELECT DATEDIFF('NANOSECOND', '2006-01-01 00:00:00.0000000', '2006-01-01 00:00:00.123456789'),
    DATEDIFF('NS', '2006-01-01 00:00:00.0000000', '2006-01-01 00:00:00.123456789'),
    DATEDIFF('NS', '2006-01-01 00:00:00.0000000', '2006-01-02 00:00:00.123456789');
SELECT DATEDIFF('ISO_WEEK', DATE '2018-02-02', DATE '2018-02-03');
SELECT DATEDIFF('ISO_WEEK', DATE '2018-02-03', DATE '2018-02-04');
SELECT DATEDIFF('ISO_WEEK', DATE '2018-02-04', DATE '2018-02-05');
SELECT DATEDIFF('ISO_WEEK', DATE '2018-02-05', DATE '2018-02-06');
SELECT DATEDIFF('ISO_WEEK', DATE '1969-12-27', DATE '1969-12-28');
SELECT DATEDIFF('ISO_WEEK', DATE '1969-12-28', DATE '1969-12-29');
SELECT DATEDIFF('QUARTER', DATE '2009-12-30', DATE '2009-12-31');
SELECT DATEDIFF('QUARTER', DATE '2010-01-01', DATE '2009-12-31');
SELECT DATEDIFF('QUARTER', DATE '2010-01-01', DATE '2010-01-02');
SELECT DATEDIFF('QUARTER', DATE '2010-01-01', DATE '2010-03-31');
SELECT DATEDIFF('QUARTER', DATE '-1000-01-01', DATE '2000-01-01');
SELECT DATEDIFF('TIMEZONE_HOUR', TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+01',
    TIMESTAMP WITH TIME ZONE '2012-02-02 12:00:00+02');
SELECT DATEDIFF('TIMEZONE_MINUTE', TIMESTAMP WITH TIME ZONE '2010-01-01 10:00:00+01:15',
    TIMESTAMP WITH TIME ZONE '2012-02-02 12:00:00+02');
SELECT DATEDIFF('TIMEZONE_SECOND', TIMESTAMP WITH TIME ZONE '1880-01-01 10:00:00-07:52:58',
    TIMESTAMP WITH TIME ZONE '1890-02-02 12:00:00-08');
SELECT DATEDIFF('TIMEZONE_HOUR', TIME WITH TIME ZONE '10:00:00+01',
    TIME WITH TIME ZONE '12:00:00+02');
SELECT DATEDIFF('TIMEZONE_MINUTE', TIME WITH TIME ZONE '10:00:00+01:15',
    TIME WITH TIME ZONE '12:00:00+02');
select datediff('HOUR', timestamp '2007-01-06 10:00:00Z', '2007-01-06 10:00:00Z');
select datediff('HOUR', timestamp '1234-05-06 10:00:00+01:00', '1234-05-06 10:00:00+02:00');
select datediff('HOUR', timestamp '1234-05-06 10:00:00+01:00', '1234-05-06 10:00:00-02:00');
select timestampdiff(month, '2003-02-01','2003-05-01');
select timestampdiff(YEAR,'2002-05-01','2001-01-01');
select timestampdiff(YEAR,'2017-01-01','2016-12-31 23:59:59');
select timestampdiff(YEAR,'2017-01-01','2017-12-31 23:59:59');
select timestampdiff(MINUTE,'2003-02-01','2003-05-01 12:05:55');
SELECT DATEDIFF(MILLENNIUM, DATE '2000-12-31', DATE '2001-01-01');
SELECT DATEDIFF(MILLENNIUM, DATE '2001-01-01', DATE '3000-12-31');
SELECT DATEDIFF(MILLENNIUM, DATE '2001-01-01', DATE '3001-01-01');
SELECT DATEDIFF(CENTURY, DATE '2000-12-31', DATE '2001-01-01');
SELECT DATEDIFF(CENTURY, DATE '2001-01-01', DATE '2100-12-31');
SELECT DATEDIFF(CENTURY, DATE '2001-01-01', DATE '2101-01-01');
SELECT DATEDIFF(DECADE, DATE '2009-12-31', DATE '2010-01-01');
SELECT DATEDIFF(DECADE, DATE '2010-01-01', DATE '2019-12-31');
SELECT DATEDIFF(DECADE, DATE '2010-01-01', DATE '2020-01-01');
select iso_week('2006-12-31') w, iso_year('2007-12-31') y, iso_day_of_week('2007-12-31') w;
select month(date '2005-09-25');
select monthname(date '2005-09-12');
SELECT EXTRACT(NANOSECOND FROM TIME '10:00:00.123456789') IS OF (INTEGER);
SELECT EXTRACT(EPOCH FROM TIME '01:00:00') IS OF (NUMERIC);
SELECT EXTRACT (MICROSECOND FROM TIME '10:00:00.123456789'),
    EXTRACT (MCS FROM TIMESTAMP '2015-01-01 11:22:33.987654321');
SELECT EXTRACT (NANOSECOND FROM TIME '10:00:00.123456789'),
    EXTRACT (NS FROM TIMESTAMP '2015-01-01 11:22:33.987654321');
select EXTRACT (EPOCH from time '00:00:00');
select EXTRACT (EPOCH from time '10:00:00');
select EXTRACT (EPOCH from time '10:00:00.123456');
select EXTRACT (EPOCH from date '1970-01-01');
select EXTRACT (EPOCH from date '2000-01-03');
select EXTRACT (EPOCH from timestamp '1970-01-01 00:00:00');
select EXTRACT (EPOCH from timestamp '1970-01-03 12:00:00.123456');
select EXTRACT (EPOCH from timestamp '2000-01-03 12:00:00.123456');
select EXTRACT (EPOCH from timestamp '2500-01-03 12:00:00.654321');
select EXTRACT (EPOCH from timestamp with time zone '1970-01-01 00:00:00+05');
select EXTRACT (EPOCH from timestamp with time zone '1970-01-03 12:00:00.123456+05');
select EXTRACT (EPOCH from timestamp with time zone '2000-01-03 12:00:00.123456+05');
select extract(EPOCH from '2001-02-03 14:15:16');
SELECT EXTRACT(EPOCH FROM INTERVAL '10.1' SECOND);
SELECT EXTRACT(EPOCH FROM INTERVAL -'0.000001' SECOND);
SELECT EXTRACT(EPOCH FROM INTERVAL '0-1' YEAR TO MONTH);
SELECT EXTRACT(EPOCH FROM INTERVAL '-0-1' YEAR TO MONTH);
SELECT EXTRACT(EPOCH FROM INTERVAL '1-0' YEAR TO MONTH);
SELECT EXTRACT(EPOCH FROM INTERVAL '-1-0' YEAR TO MONTH);
SELECT EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP WITH TIME ZONE '2010-01-02 5:00:00+07:15');
SELECT EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP WITH TIME ZONE '2010-01-02 5:00:00-08:30');
SELECT EXTRACT(TIMEZONE_MINUTE FROM TIMESTAMP WITH TIME ZONE '2010-01-02 5:00:00+07:15');
SELECT EXTRACT(TIMEZONE_MINUTE FROM TIMESTAMP WITH TIME ZONE '2010-01-02 5:00:00-08:30');
SELECT EXTRACT(TIMEZONE_SECOND FROM TIMESTAMP WITH TIME ZONE '1880-01-01 10:00:00-07:52:58');
SELECT EXTRACT(TIMEZONE_HOUR FROM TIME WITH TIME ZONE '5:00:00+07:15');
SELECT EXTRACT(TIMEZONE_MINUTE FROM TIME WITH TIME ZONE '5:00:00+07:15');
select extract(hour from timestamp '2001-02-03 14:15:16');
select extract(hour from '2001-02-03 14:15:16');
SELECT EXTRACT(YEAR FROM INTERVAL '-1' YEAR);
SELECT EXTRACT(YEAR FROM INTERVAL '1-2' YEAR TO MONTH);
SELECT EXTRACT(MONTH FROM INTERVAL '-1-3' YEAR TO MONTH);
SELECT EXTRACT(MONTH FROM INTERVAL '3' MONTH);
SELECT EXTRACT(DAY FROM INTERVAL '1100' DAY);
SELECT EXTRACT(DAY FROM INTERVAL '10 23' DAY TO HOUR);
SELECT EXTRACT(DAY FROM INTERVAL '10 23:15' DAY TO MINUTE);
SELECT EXTRACT(DAY FROM INTERVAL '10 23:15:30' DAY TO SECOND);
SELECT EXTRACT(HOUR FROM INTERVAL '15' HOUR);
SELECT EXTRACT(HOUR FROM INTERVAL '2 15' DAY TO HOUR);
SELECT EXTRACT(HOUR FROM INTERVAL '2 10:30' DAY TO MINUTE);
SELECT EXTRACT(HOUR FROM INTERVAL '2 10:30:15' DAY TO SECOND);
SELECT EXTRACT(HOUR FROM INTERVAL '20:10' HOUR TO MINUTE);
SELECT EXTRACT(HOUR FROM INTERVAL '20:10:22' HOUR TO SECOND);
SELECT EXTRACT(MINUTE FROM INTERVAL '-35' MINUTE);
SELECT EXTRACT(MINUTE FROM INTERVAL '1 20:33' DAY TO MINUTE);
SELECT EXTRACT(MINUTE FROM INTERVAL '1 20:33:10' DAY TO SECOND);
SELECT EXTRACT(MINUTE FROM INTERVAL '20:34' HOUR TO MINUTE);
SELECT EXTRACT(MINUTE FROM INTERVAL '20:34:10' HOUR TO SECOND);
SELECT EXTRACT(MINUTE FROM INTERVAL '-34:10' MINUTE TO SECOND);
SELECT EXTRACT(SECOND FROM INTERVAL '-100' SECOND);
SELECT EXTRACT(SECOND FROM INTERVAL '10 11:22:33' DAY TO SECOND);
SELECT EXTRACT(SECOND FROM INTERVAL '1:2:3' HOUR TO SECOND);
SELECT EXTRACT(SECOND FROM INTERVAL '-2:43' MINUTE TO SECOND);
SELECT EXTRACT(SECOND FROM INTERVAL '11.123456789' SECOND);
SELECT EXTRACT(MILLISECOND FROM INTERVAL '11.123456789' SECOND);
SELECT EXTRACT(MICROSECOND FROM INTERVAL '11.123456789' SECOND);
SELECT EXTRACT(NANOSECOND FROM INTERVAL '11.123456789' SECOND);
SELECT D, ISO_YEAR(D) Y1, EXTRACT(ISO_WEEK_YEAR FROM D) Y2, EXTRACT(ISO_YEAR FROM D) Y3, EXTRACT(ISOYEAR FROM D) Y4
    FROM (VALUES DATE '2017-01-01', DATE '2017-01-02') V(D);
SELECT D, EXTRACT(ISO_DAY_OF_WEEK FROM D) D1, EXTRACT(ISODOW FROM D) D2
    FROM (VALUES DATE '2019-02-03', DATE '2019-02-04') V(D);
SELECT D, EXTRACT(DOW FROM D) D3 FROM (VALUES DATE '2019-02-02', DATE '2019-02-03') V(D);
SELECT EXTRACT(MILLENNIUM FROM DATE '-1000-12-31');
SELECT EXTRACT(MILLENNIUM FROM DATE '-999-01-01');
SELECT EXTRACT(MILLENNIUM FROM DATE '0000-12-31');
SELECT EXTRACT(MILLENNIUM FROM DATE '0001-01-01');
SELECT EXTRACT(MILLENNIUM FROM DATE '1000-12-31');
SELECT EXTRACT(MILLENNIUM FROM DATE '1001-01-01');
SELECT EXTRACT(CENTURY FROM DATE '-100-12-31');
SELECT EXTRACT(CENTURY FROM DATE '-99-01-01');
SELECT EXTRACT(CENTURY FROM DATE '0000-12-31');
SELECT EXTRACT(CENTURY FROM DATE '0001-01-01');
SELECT EXTRACT(CENTURY FROM DATE '0100-12-31');
SELECT EXTRACT(CENTURY FROM DATE '0101-01-01');
SELECT EXTRACT(DECADE FROM DATE '-11-12-31');
SELECT EXTRACT(DECADE FROM DATE '-10-01-01');
SELECT EXTRACT(DECADE FROM DATE '-1-12-31');
SELECT EXTRACT(DECADE FROM DATE '0000-01-01');
SELECT EXTRACT(DECADE FROM DATE '0009-12-31');
SELECT EXTRACT(DECADE FROM DATE '0010-01-01');
SELECT DAYOFWEEK(DATE '2005-09-12') = EXTRACT(DAY_OF_WEEK FROM DATE '2005-09-12');
SELECT CAST(CURRENT_TIMESTAMP AS TIMESTAMP(9)) = LOCALTIMESTAMP;
SELECT CAST(CURRENT_TIMESTAMP(0) AS TIMESTAMP(9)) = LOCALTIMESTAMP(0);
SELECT CAST(CURRENT_TIMESTAMP(9) AS TIMESTAMP(9)) = LOCALTIMESTAMP(9);
SELECT (SELECT T FROM TEST WHERE I = 1) = (SELECT T FROM TEST WHERE I = 2);
SELECT (SELECT T FROM TEST WHERE I = 2) = (SELECT T FROM TEST WHERE I = 3);
SELECT (SELECT T FROM TEST WHERE I = 3) = (SELECT T FROM TEST WHERE I = 4);
SELECT (SELECT T FROM TEST WHERE I = 5) = (SELECT T FROM TEST WHERE I = 6);
SELECT (SELECT T FROM TEST WHERE I = 6) = (SELECT T FROM TEST WHERE I = 7);
SELECT (SELECT T FROM TEST WHERE I = 7) = (SELECT T FROM TEST WHERE I = 8);
SELECT GETDATE();
SELECT LOCALTIMESTAMP(3) = GETDATE();
select hour(time '23:10:59');
select hour(ts) h from test;
select hour('2001-02-03 14:15:16');
select minute(timestamp '2005-01-01 23:10:59');
select year(date '2005-01-01');
SELECT DATE_TRUNC('MICROSECONDS', time '00:00:00.000');
SELECT DATE_TRUNC('microseconds', time '00:00:00.000');
SELECT DATE_TRUNC(microseconds, time '00:00:00.000');
SELECT DATE_TRUNC('MICROSECONDS', time '15:00:00');
SELECT DATE_TRUNC('microseconds', time '15:00:00');
SELECT DATE_TRUNC('MICROSECONDS', time '15:14:13');
SELECT DATE_TRUNC('microseconds', time '15:14:13');
SELECT DATE_TRUNC('MICROSECONDS', time '15:14:13.123456789');
SELECT DATE_TRUNC('microseconds', time '15:14:13.123456789');
SELECT DATE_TRUNC('MICROSECONDS', date '2015-05-29');
SELECT DATE_TRUNC('microseconds', date '2015-05-29');
SELECT DATE_TRUNC('MICROSECONDS', date '1970-01-01');
SELECT DATE_TRUNC('microseconds', date '1970-01-01');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13.123456789+00');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13.123456789+00');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13.123456789-06');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13.123456789-06');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('MICROSECONDS', timestamp with time zone '2015-05-29 15:14:13.123456789+10');
select DATE_TRUNC('microseconds', timestamp with time zone '2015-05-29 15:14:13.123456789+10');
SELECT DATE_TRUNC('microseconds', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('MICROSECONDS', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('microseconds', timestamp '2015-05-29 15:14:13.123456789');
SELECT DATE_TRUNC('MICROSECONDS', timestamp '2015-05-29 15:14:13.123456789');
SELECT DATE_TRUNC('microseconds', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('MICROSECONDS', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('microseconds', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('MICROSECONDS', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('MILLISECONDS', time '00:00:00.000');
SELECT DATE_TRUNC('milliseconds', time '00:00:00.000');
SELECT DATE_TRUNC('MILLISECONDS', time '15:00:00');
SELECT DATE_TRUNC('milliseconds', time '15:00:00');
SELECT DATE_TRUNC('MILLISECONDS', time '15:14:13');
SELECT DATE_TRUNC('milliseconds', time '15:14:13');
SELECT DATE_TRUNC('MILLISECONDS', time '15:14:13.123456');
SELECT DATE_TRUNC('milliseconds', time '15:14:13.123456');
SELECT DATE_TRUNC('MILLISECONDS', date '2015-05-29');
SELECT DATE_TRUNC('milliseconds', date '2015-05-29');
SELECT DATE_TRUNC('MILLISECONDS', date '1970-01-01');
SELECT DATE_TRUNC('milliseconds', date '1970-01-01');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13.123456+00');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13.123456+00');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13.123456-06');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13.123456-06');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('MILLISECONDS', timestamp with time zone '2015-05-29 15:14:13.123456+10');
select DATE_TRUNC('milliseconds', timestamp with time zone '2015-05-29 15:14:13.123456+10');
SELECT DATE_TRUNC('milliseconds', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('MILLISECONDS', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('milliseconds', timestamp '2015-05-29 15:14:13.123456');
SELECT DATE_TRUNC('MILLISECONDS', timestamp '2015-05-29 15:14:13.123456');
SELECT DATE_TRUNC('milliseconds', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('MILLISECONDS', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('milliseconds', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('MILLISECONDS', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('SECOND', time '00:00:00.000');
SELECT DATE_TRUNC('second', time '00:00:00.000');
SELECT DATE_TRUNC('SECOND', time '15:00:00');
SELECT DATE_TRUNC('second', time '15:00:00');
SELECT DATE_TRUNC('SECOND', time '15:14:13');
SELECT DATE_TRUNC('second', time '15:14:13');
SELECT DATE_TRUNC('SECOND', time '15:14:13.123456');
SELECT DATE_TRUNC('second', time '15:14:13.123456');
SELECT DATE_TRUNC('SECOND', date '2015-05-29');
SELECT DATE_TRUNC('second', date '2015-05-29');
SELECT DATE_TRUNC('SECOND', date '1970-01-01');
SELECT DATE_TRUNC('second', date '1970-01-01');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13.123456+00');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13.123456+00');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13.123456-06');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13.123456-06');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('SECOND', timestamp with time zone '2015-05-29 15:14:13.123456+10');
select DATE_TRUNC('second', timestamp with time zone '2015-05-29 15:14:13.123456+10');
SELECT DATE_TRUNC('second', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('SECOND', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('second', timestamp '2015-05-29 15:14:13.123456');
SELECT DATE_TRUNC('SECOND', timestamp '2015-05-29 15:14:13.123456');
SELECT DATE_TRUNC('second', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('SECOND', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('second', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('SECOND', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('MINUTE', time '00:00:00');
SELECT DATE_TRUNC('minute', time '00:00:00');
SELECT DATE_TRUNC('MINUTE', time '15:00:00');
SELECT DATE_TRUNC('minute', time '15:00:00');
SELECT DATE_TRUNC('MINUTE', time '15:14:13');
SELECT DATE_TRUNC('minute', time '15:14:13');
SELECT DATE_TRUNC('MINUTE', date '2015-05-29');
SELECT DATE_TRUNC('minute', date '2015-05-29');
SELECT DATE_TRUNC('MINUTE', date '1970-01-01');
SELECT DATE_TRUNC('minute', date '1970-01-01');
select DATE_TRUNC('MINUTE', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('minute', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('MINUTE', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('minute', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('MINUTE', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('minute', timestamp with time zone '2015-05-29 15:14:13+10');
SELECT DATE_TRUNC('MINUTE', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('MINUTE', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('MINUTE', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('HOUR', time '00:00:00');
SELECT DATE_TRUNC('hour', time '00:00:00');
SELECT DATE_TRUNC('HOUR', time '15:00:00');
SELECT DATE_TRUNC('hour', time '15:00:00');
SELECT DATE_TRUNC('HOUR', time '15:14:13');
SELECT DATE_TRUNC('hour', time '15:14:13');
SELECT DATE_TRUNC('HOUR', date '2015-05-29');
SELECT DATE_TRUNC('hour', date '2015-05-29');
SELECT DATE_TRUNC('HOUR', date '1970-01-01');
SELECT DATE_TRUNC('hour', date '1970-01-01');
select DATE_TRUNC('HOUR', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('hour', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('HOUR', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('hour', timestamp with time zone '2015-05-29 15:14:13-06');
select DATE_TRUNC('HOUR', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('hour', timestamp with time zone '2015-05-29 15:14:13+10');
SELECT DATE_TRUNC('hour', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('HOUR', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('hour', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('HOUR', timestamp '2015-05-29 15:00:00');
SELECT DATE_TRUNC('hour', timestamp '2015-05-29 00:00:00');
SELECT DATE_TRUNC('HOUR', timestamp '2015-05-29 00:00:00');
select DATE_TRUNC('day', time '00:00:00');
select DATE_TRUNC('DAY', time '00:00:00');
select DATE_TRUNC('day', time '15:14:13');
select DATE_TRUNC('DAY', time '15:14:13');
select DATE_TRUNC('day', date '2015-05-29');
select DATE_TRUNC('DAY', date '2015-05-29');
select DATE_TRUNC('day', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('DAY', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('day', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('DAY', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('day', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('DAY', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('day', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('DAY', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('week', time '00:00:00');
select DATE_TRUNC('WEEK', time '00:00:00');
select DATE_TRUNC('week', time '15:14:13');
select DATE_TRUNC('WEEK', time '15:14:13');
SELECT DATE_TRUNC(ISO_WEEK, TIME '00:00:00');
SELECT DATE_TRUNC(ISO_WEEK, TIME '15:14:13');
SELECT DATE_TRUNC(ISO_WEEK, DATE '2015-05-28');
SELECT DATE_TRUNC(ISO_WEEK, TIMESTAMP '2015-05-29 15:14:13');
SELECT DATE_TRUNC(ISO_WEEK, TIMESTAMP '2018-03-14 00:00:00.000');
SELECT DATE_TRUNC(ISO_WEEK, TIMESTAMP WITH TIME ZONE '2015-05-29 15:14:13+00');
SELECT DATE_TRUNC(ISO_WEEK, TIMESTAMP WITH TIME ZONE '2015-05-29 05:14:13-06');
SELECT DATE_TRUNC(ISO_WEEK, TIMESTAMP WITH TIME ZONE '2015-05-29 15:14:13+10');
select DATE_TRUNC('month', time '00:00:00');
select DATE_TRUNC('MONTH', time '00:00:00');
select DATE_TRUNC(MONTH, time '00:00:00');
select DATE_TRUNC('month', time '15:14:13');
select DATE_TRUNC('MONTH', time '15:14:13');
select DATE_TRUNC('month', date '2015-05-28');
select DATE_TRUNC('MONTH', date '2015-05-28');
select DATE_TRUNC('month', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('MONTH', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('MONTH', timestamp '2018-03-14 00:00:00.000');
select DATE_TRUNC('month', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('MONTH', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('month', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('MONTH', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('month', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('MONTH', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('quarter', time '00:00:00');
select DATE_TRUNC('QUARTER', time '00:00:00');
select DATE_TRUNC('quarter', time '15:14:13');
select DATE_TRUNC('QUARTER', time '15:14:13');
select DATE_TRUNC('quarter', date '2015-05-28');
select DATE_TRUNC('QUARTER', date '2015-05-28');
select DATE_TRUNC('quarter', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('QUARTER', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2018-03-14 00:00:00.000');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-05-01 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-07-29 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-09-29 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-10-29 15:14:13');
SELECT DATE_TRUNC('QUARTER', timestamp '2015-12-29 15:14:13');
select DATE_TRUNC('quarter', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('QUARTER', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('quarter', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('QUARTER', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('quarter', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('QUARTER', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('year', time '00:00:00');
select DATE_TRUNC('YEAR', time '00:00:00');
select DATE_TRUNC('year', time '15:14:13');
select DATE_TRUNC('YEAR', time '15:14:13');
select DATE_TRUNC('year', date '2015-05-28');
select DATE_TRUNC('YEAR', date '2015-05-28');
select DATE_TRUNC('year', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('YEAR', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('year', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('YEAR', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('year', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('YEAR', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('year', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('YEAR', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('decade', time '00:00:00');
select DATE_TRUNC('DECADE', time '00:00:00');
select DATE_TRUNC('decade', time '15:14:13');
select DATE_TRUNC('DECADE', time '15:14:13');
select DATE_TRUNC('decade', date '2015-05-28');
select DATE_TRUNC('DECADE', date '2015-05-28');
select DATE_TRUNC('decade', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('DECADE', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('decade', timestamp '2010-05-29 15:14:13');
select DATE_TRUNC('decade', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('DECADE', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('decade', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('DECADE', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('decade', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('DECADE', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('century', time '00:00:00');
select DATE_TRUNC('CENTURY', time '00:00:00');
select DATE_TRUNC('century', time '15:14:13');
select DATE_TRUNC('CENTURY', time '15:14:13');
select DATE_TRUNC('century', date '2015-05-28');
select DATE_TRUNC('CENTURY', date '2015-05-28');
select DATE_TRUNC('century', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('CENTURY', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('century', timestamp '2199-05-29 15:14:13');
SELECT DATE_TRUNC('CENTURY', timestamp '2000-05-29 15:14:13');
SELECT DATE_TRUNC('century', timestamp '2001-05-29 15:14:13');
select DATE_TRUNC('century', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('CENTURY', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('century', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('CENTURY', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('century', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('CENTURY', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('millennium', time '00:00:00');
select DATE_TRUNC('MILLENNIUM', time '00:00:00');
select DATE_TRUNC('millennium', time '15:14:13');
select DATE_TRUNC('MILLENNIUM', time '15:14:13');
select DATE_TRUNC('millennium', date '2015-05-28');
select DATE_TRUNC('MILLENNIUM', date '2015-05-28');
select DATE_TRUNC('millennium', timestamp '2015-05-29 15:14:13');
select DATE_TRUNC('MILLENNIUM', timestamp '2015-05-29 15:14:13');
SELECT DATE_TRUNC('millennium', timestamp '2000-05-29 15:14:13');
select DATE_TRUNC('millennium', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('MILLENNIUM', timestamp with time zone '2015-05-29 15:14:13+00');
select DATE_TRUNC('millennium', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('MILLENNIUM', timestamp with time zone '2015-05-29 05:14:13-06');
select DATE_TRUNC('millennium', timestamp with time zone '2015-05-29 15:14:13+10');
select DATE_TRUNC('MILLENNIUM', timestamp with time zone '2015-05-29 15:14:13+10');
SELECT DATE_TRUNC('---', '2015-05-29 15:14:13');
SELECT DATE_TRUNC('', '2015-05-29 15:14:13');
SELECT DATE_TRUNC('', '');
SELECT DATE_TRUNC('YEAR', '');
SELECT DATE_TRUNC('microseconds', '2015-05-29 15:14:13');
select DATE_TRUNC('YEAR', DATE '2015-05-28');
SELECT DATE_TRUNC(DECADE, DATE '0000-01-20');
SELECT DATE_TRUNC(DECADE, DATE '-1-12-31');
SELECT DATE_TRUNC(DECADE, DATE '-10-01-01');
SELECT DATE_TRUNC(DECADE, DATE '-11-12-31');
SELECT DATE_TRUNC(CENTURY, DATE '0001-01-20');
SELECT DATE_TRUNC(CENTURY, DATE '0000-12-31');
SELECT DATE_TRUNC(CENTURY, DATE '-1-12-31');
SELECT DATE_TRUNC(CENTURY, DATE '-99-01-01');
SELECT DATE_TRUNC(CENTURY, DATE '-100-12-31');
SELECT DATE_TRUNC(MILLENNIUM, DATE '0001-01-20');
SELECT DATE_TRUNC(MILLENNIUM, DATE '0000-12-31');
SELECT DATE_TRUNC(MILLENNIUM, DATE '-1-12-31');
SELECT DATE_TRUNC(MILLENNIUM, DATE '-999-01-01');
SELECT DATE_TRUNC(MILLENNIUM, DATE '-1000-12-31');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2019-12-30');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2020-01-01');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2020-12-01');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2020-12-31');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2017-01-01');
SELECT DATE_TRUNC(ISO_WEEK_YEAR, DATE '2017-01-02');
select dayofyear(date '2005-01-01') d1;
select dayname(date '2005-09-12');
select BIT_AND_AGG(v), BIT_AND_AGG(v) filter (where v <= 0xffffffff0fff) from test where v >= 0xff0fffffffff;
SELECT BIT_NAND_AGG(V), BIT_NAND_AGG(V) FILTER (WHERE V <= 0xffffffff0fff) FROM TEST WHERE V >= 0xff0fffffffff;
select BIT_AND_AGG(v), BIT_AND_AGG(v) filter (where v <= 0xffffffff0fff) from test where v >= 0xff0fffffffff;
SELECT BIT_NAND_AGG(V), BIT_NAND_AGG(V) FILTER (WHERE V <= 0xffffffff0fff) FROM TEST WHERE V >= 0xff0fffffffff;
SELECT
    V,
    BITNOT(BIT_AND_AGG(V) FILTER (WHERE V > 0) OVER (PARTITION BY BITAND(V, 7) ORDER BY V)) G,
    BIT_NAND_AGG(V) FILTER (WHERE V > 0) OVER (PARTITION BY BITAND(V, 7) ORDER BY V) C FROM TEST;
select max(v), max(v) filter (where v <= 8) from test where v <= 10;
select max(v), max(v) filter (where v <= 8) from test where v <= 10;
select max(v), max(v) filter (where v <= 8) from test;
SELECT MAX(V) FROM TEST;
SELECT MAX(X) FROM SYSTEM_RANGE(1, 2, 0);
SELECT MAX(X) FROM SYSTEM_RANGE(1, 2);
SELECT MAX(X) FROM SYSTEM_RANGE(2, 1);
SELECT MAX(X) FROM SYSTEM_RANGE(1, 2, -1);
SELECT MAX(X) FROM SYSTEM_RANGE(2, 1, -1);
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(distinct v) from test;
select
    percentile_disc(0.5) within group (order by v) d50a,
    percentile_disc(0.5) within group (order by v desc) d50d,
    median(v) m from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select percentile_cont(0.16) within group (order by v) from test;
select median(v) from test;
select median(v) from test;
select median(distinct v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median (v) from test;
select name, median("VALUE") from test group by name order by name;
select median(v) from test where v <> 20;
select median(v) from test where v <> 20;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(v) from test;
select median(v), median(v) filter (where v >= 40) from test where v <= 100;
select median(v), median(v) filter (where v >= 40) from test where v <= 100;
select median(v), median(v) filter (where v >= 40) from test;
select dept, median(amount) from test group by dept order by dept;
select dept, median(amount) filter (where amount >= 20) from test group by dept order by dept;
select dept, median(amount) filter (where amount >= 20) from test
    where (amount < 200) group by dept order by dept;
select
    percentile_cont(0.05) within group (order by v) c05a,
    percentile_cont(0.05) within group (order by v desc) c05d,
    percentile_cont(0.5) within group (order by v) c50,
    percentile_cont(0.5) within group (order by v desc) c50d,
    percentile_cont(0.95) within group (order by v) c95a,
    percentile_cont(0.95) within group (order by v desc) c95d,
    g from test group by g;
select
    percentile_disc(0.05) within group (order by v) d05a,
    percentile_disc(0.05) within group (order by v desc) d05d,
    percentile_disc(0.5) within group (order by v) d50,
    percentile_disc(0.5) within group (order by v desc) d50d,
    percentile_disc(0.95) within group (order by v) d95a,
    percentile_disc(0.95) within group (order by v desc) d95d,
    g from test group by g;
select
    percentile_disc(0.05) within group (order by v) over (partition by g order by v) d05a,
    percentile_disc(0.05) within group (order by v desc) over (partition by g order by v) d05d,
    percentile_disc(0.5) within group (order by v) over (partition by g order by v) d50,
    percentile_disc(0.5) within group (order by v desc) over (partition by g order by v) d50d,
    percentile_disc(0.95) within group (order by v) over (partition by g order by v) d95a,
    percentile_disc(0.95) within group (order by v desc) over (partition by g order by v) d95d,
    g, v from test order by g, v;
select
    percentile_disc(0.05) within group (order by v) d05a,
    percentile_disc(0.05) within group (order by v desc) d05d,
    percentile_disc(0.5) within group (order by v) d50,
    percentile_disc(0.5) within group (order by v desc) d50d,
    percentile_disc(0.95) within group (order by v) d95a,
    percentile_disc(0.95) within group (order by v desc) d95d
    from test;
SELECT percentile_disc(null) within group (order by v) from test;
SELECT percentile_disc(-0.01) within group (order by v) from test;
SELECT percentile_disc(1.01) within group (order by v) from test;
SELECT percentile_disc(v) within group (order by v) from test;
SELECT percentile_disc(null) within group (order by v) from test;
SELECT percentile_disc(-0.01) within group (order by v) from test;
SELECT percentile_disc(1.01) within group (order by v) from test;
SELECT percentile_disc(v) within group (order by v) from test;
SELECT PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY V) FROM (VALUES TIME WITH TIME ZONE '10:30:00Z', TIME WITH TIME ZONE '15:30:00+10') T(V);
SELECT PERCENTILE_CONT(0.7) WITHIN GROUP (ORDER BY V) FROM (VALUES TIME WITH TIME ZONE '10:00:00Z', TIME WITH TIME ZONE '12:00:00+00:00:01') T(V);
SELECT PERCENTILE_CONT(0.7) WITHIN GROUP (ORDER BY V) FROM (VALUES TIME WITH TIME ZONE '23:59:59.999999999Z', TIME WITH TIME ZONE '23:59:59.999999999+00:00:01') T(V);
SELECT PERCENTILE_CONT(0.7) WITHIN GROUP (ORDER BY V) FROM (VALUES TIME WITH TIME ZONE '00:00:00Z', TIME WITH TIME ZONE '00:00:00-00:00:01') T(V);
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY V NULLS LAST) FROM (VALUES NULL, 1, 3) T(V);
SELECT BIT_XOR_AGG(V), BIT_XOR_AGG(DISTINCT V), BIT_XOR_AGG(V) FILTER (WHERE V <> 1) FROM (VALUES 1, 1, 2, 3, 4) T(V);
SELECT BIT_XNOR_AGG(V), BIT_XNOR_AGG(DISTINCT V), BIT_XNOR_AGG(V) FILTER (WHERE V <> 1) FROM (VALUES 1, 1, 2, 3, 4) T(V);
SELECT A, ANY(B < 2), SOME(B > 3), BOOL_OR(B = 1), ANY(B = 1) FILTER (WHERE A = 1) FROM TEST GROUP BY A;
SELECT TRUE = (ANY((SELECT X > 0 FROM SYSTEM_RANGE(1, 1))));
SELECT TRUE = (ANY((SELECT X < 0 FROM SYSTEM_RANGE(1, 1))));
SELECT REGR_SXY(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_SXX(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT JSON_ARRAYAGG(J NULL ON NULL) FROM TEST;
SELECT JSON_ARRAYAGG(J) FROM TEST;
SELECT JSON_ARRAYAGG(ALL J) FROM TEST;
SELECT JSON_ARRAYAGG(DISTINCT J) FROM TEST;
SELECT JSON_ARRAYAGG(J NULL ON NULL) FROM TEST;
SELECT JSON_ARRAYAGG(J ABSENT ON NULL) FROM TEST;
SELECT JSON_ARRAYAGG(J ORDER BY ID DESC NULL ON NULL) FROM TEST;
SELECT JSON_ARRAY(NULL NULL ON NULL);
SELECT JSON_ARRAYAGG(J) FROM TEST;
SELECT JSON_ARRAYAGG(J NULL ON NULL) FROM TEST;
SELECT JSON_ARRAYAGG(J) FROM TEST;
SELECT
    RANK(1) WITHIN GROUP (ORDER BY V) R1,
    RANK(3) WITHIN GROUP (ORDER BY V) R3,
    RANK(7) WITHIN GROUP (ORDER BY V) R7
    FROM TEST;
SELECT
    DENSE_RANK(1) WITHIN GROUP (ORDER BY V) R1,
    DENSE_RANK(3) WITHIN GROUP (ORDER BY V) R3,
    DENSE_RANK(7) WITHIN GROUP (ORDER BY V) R7
    FROM TEST;
SELECT
    ROUND(PERCENT_RANK(1) WITHIN GROUP (ORDER BY V), 2) R1,
    ROUND(PERCENT_RANK(3) WITHIN GROUP (ORDER BY V), 2) R3,
    ROUND(PERCENT_RANK(7) WITHIN GROUP (ORDER BY V), 2) R7
    FROM TEST;
SELECT
    ROUND(CUME_DIST(1) WITHIN GROUP (ORDER BY V), 2) R1,
    ROUND(CUME_DIST(3) WITHIN GROUP (ORDER BY V), 2) R3,
    ROUND(CUME_DIST(7) WITHIN GROUP (ORDER BY V), 2) R7
    FROM TEST;
SELECT
    RANK(1, 1) WITHIN GROUP (ORDER BY V, V + 1) R11,
    RANK(1, 2) WITHIN GROUP (ORDER BY V, V + 1) R12,
    RANK(1, 3) WITHIN GROUP (ORDER BY V, V + 1) R13
    FROM TEST;
SELECT
    RANK(1, 1) WITHIN GROUP (ORDER BY V, V + 1 DESC) R11,
    RANK(1, 2) WITHIN GROUP (ORDER BY V, V + 1 DESC) R12,
    RANK(1, 3) WITHIN GROUP (ORDER BY V, V + 1 DESC) R13
    FROM TEST;
SELECT RANK(3) WITHIN GROUP (ORDER BY V) FILTER (WHERE V <> 2) FROM TEST;
SELECT
    RANK(1) WITHIN GROUP (ORDER BY V) OVER () R1,
    RANK(3) WITHIN GROUP (ORDER BY V) OVER () R3,
    RANK(7) WITHIN GROUP (ORDER BY V) OVER () R7,
    V
    FROM TEST ORDER BY V;
SELECT
    RANK(1) WITHIN GROUP (ORDER BY V) OVER (ORDER BY V) R1,
    RANK(3) WITHIN GROUP (ORDER BY V) OVER (ORDER BY V) R3,
    RANK(7) WITHIN GROUP (ORDER BY V) OVER (ORDER BY V) R7,
    RANK(7) WITHIN GROUP (ORDER BY V) FILTER (WHERE V <> 2) OVER (ORDER BY V) F7,
    V
    FROM TEST ORDER BY V;
SELECT
    RANK(1) WITHIN GROUP (ORDER BY V) FILTER (WHERE FALSE) R,
    DENSE_RANK(1) WITHIN GROUP (ORDER BY V) FILTER (WHERE FALSE) D,
    PERCENT_RANK(1) WITHIN GROUP (ORDER BY V) FILTER (WHERE FALSE) P,
    CUME_DIST(1) WITHIN GROUP (ORDER BY V) FILTER (WHERE FALSE) C
    FROM VALUES (1) T(V);
SELECT RANK(1) WITHIN GROUP (ORDER BY V, V) FROM TEST;
SELECT RANK(1, 2) WITHIN GROUP (ORDER BY V) FROM TEST;
SELECT RANK(V) WITHIN GROUP (ORDER BY V) FROM TEST;
SELECT RANK(2, 2) WITHIN GROUP (ORDER BY B ASC NULLS FIRST, C ASC NULLS FIRST) FROM TEST;
SELECT RANK(2, 2) WITHIN GROUP (ORDER BY B ASC NULLS LAST, C ASC NULLS LAST) FROM TEST;
select count(v), count(v) filter (where v >= 4) from test where v <= 10;
select count(*), count(*) filter (where v >= 4) from test;
select count(*), count(*) filter (where v >= 4) from test where v <= 10;
select count(v), count(v) filter (where v >= 4) from test where v <= 10;
select count(v), count(v) filter (where v >= 4) from test;
SELECT COUNT(ID) OVER (ORDER BY NAME) AS NR,
    A.ID AS ID FROM (SELECT ID, NAME FROM TEST ORDER BY NAME) AS A;
SELECT NR FROM (SELECT COUNT(ID) OVER (ORDER BY NAME) AS NR,
    A.ID AS ID FROM (SELECT ID, NAME FROM TEST ORDER BY NAME) AS A)
    AS B WHERE B.ID = 1;
SELECT I, V, COUNT(V) OVER W C, COUNT(DISTINCT V) OVER W D FROM
    VALUES (1, 1), (2, 1), (3, 1), (4, 1), (5, 2), (6, 2), (7, 3) T(I, V)
    WINDOW W AS (ORDER BY I);
SELECT I, C, COUNT(I) OVER (PARTITION BY C) CNT FROM
    VALUES (1, 1), (2, 1), (3, 2), (4, 2), (5, 2) T(I, C);
SELECT X, COUNT(*) OVER (ORDER BY X) C FROM VALUES (1), (1), (2), (2), (3) V(X);
SELECT COUNT(*) FROM TEST;
SELECT COUNT(N) FROM TEST;
SELECT COUNT(DISTINCT N) FROM TEST;
SELECT COUNT(*) FROM TEST GROUP BY N;
SELECT COUNT(N) OVER (PARTITION BY N) C FROM TEST;
SELECT COUNT((A, B)) C, COUNT(DISTINCT (A, B)) CD FROM TEST;
SELECT COUNT(*) OVER (PARTITION BY A, B) C1, COUNT(*) OVER (PARTITION BY (A, B)) C2 FROM TEST;
SELECT COUNT(*) FROM TEST;
SELECT COUNT(1) FROM TEST;
SELECT COUNT(DISTINCT 1) FROM TEST;
SELECT COUNT(1) FROM TEST FILTER WHERE X <> 1;
SELECT COUNT(1) OVER(PARTITION BY X IS NULL) FROM TEST;
SELECT COUNT(NULL) FROM TEST;
SELECT COUNT(DISTINCT NULL) FROM TEST;
SELECT COUNT(X) FROM TEST;
SELECT COUNT(X) FROM TEST;
SELECT COUNT(DISTINCT X) FROM TEST;
SELECT REGR_SYY(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_INTERCEPT(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
select sum(cast(x as int)) from system_range(2147483547, 2147483637);
select sum(x) from system_range(9223372036854775707, 9223372036854775797);
select sum(cast(100 as tinyint)) from system_range(1, 1000);
select sum(cast(100 as smallint)) from system_range(1, 1000);
select sum(v), sum(v) filter (where v >= 4) from test where v <= 10;
select sum(v), sum(v) filter (where v >= 4) from test where v <= 10;
select sum(v), sum(all v), sum(distinct v) from test;
select sum(v) from test;
SELECT X, COUNT(*), SUM(COUNT(*)) OVER() FROM VALUES (1), (1), (1), (1), (2), (2), (3) T(X) GROUP BY X;
SELECT SUM(ID) FROM TEST;
SELECT SUM(ID) OVER () FROM TEST;
SELECT
    ID,
    SUM(ID) OVER (ORDER BY ID) S,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) S_U_C,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) S_C_U,
    SUM(ID) OVER (ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) S_U_U
    FROM (SELECT X ID FROM SYSTEM_RANGE(1, 8));
SELECT I, V, SUM(V) OVER W S, SUM(DISTINCT V) OVER W D FROM
    VALUES (1, 1), (2, 1), (3, 1), (4, 1), (5, 2), (6, 2), (7, 3) T(I, V)
    WINDOW W AS (ORDER BY I);
SELECT * FROM (SELECT SUM(V) OVER (ORDER BY V ROWS BETWEEN CURRENT ROW AND CURRENT ROW) S FROM (VALUES 1, 2, 2) T(V));
SELECT V, SUM(V) FILTER (WHERE V <> 1) OVER (ROWS CURRENT ROW) S FROM (VALUES 1, 2, 2) T(V);
SELECT V,
    SUM(V) FILTER (WHERE V <> 1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) S,
    SUM(V) FILTER (WHERE V <> 1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) T
    FROM (VALUES 1, 2, 2) T(V);
SELECT COLUMN_NAME, DATA_TYPE_SQL('PUBLIC', 'A', 'TABLE', DTD_IDENTIFIER) TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'A' ORDER BY ORDINAL_POSITION;
SELECT SUM(I) FROM (VALUES INTERVAL '999999999999999999' SECOND, INTERVAL '1' SECOND) T(I);
SELECT JSON_OBJECTAGG(KEY N VALUE J) FROM TEST;
SELECT JSON_OBJECTAGG(N VALUE J) FROM TEST;
SELECT JSON_OBJECTAGG(N: J) FROM TEST;
SELECT JSON_OBJECTAGG(N: J ABSENT ON NULL) FROM TEST;
SELECT JSON_OBJECTAGG(N: J ABSENT ON NULL) FILTER (WHERE J IS NULL) FROM TEST;
SELECT JSON_OBJECTAGG(N: J) FILTER (WHERE FALSE) FROM TEST;
SELECT JSON_OBJECTAGG(NULL: J) FROM TEST;
SELECT JSON_OBJECTAGG(N: J) FROM TEST;
SELECT JSON_OBJECTAGG(N: J WITHOUT UNIQUE KEYS) FROM TEST;
SELECT JSON_OBJECTAGG(N: J WITH UNIQUE KEYS) FROM TEST;
SELECT CORR(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_AVGX(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT COVAR_POP(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_AVGY(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
select min(v), min(v) filter (where v >= 4) from test where v >= 2;
select min(v), min(v) filter (where v >= 4) from test where v >= 2;
select min(v), min(v) filter (where v >= 4) from test;
SELECT MIN(V) FROM TEST;
SELECT MIN(V) FROM TEST;
SELECT MIN(X) FROM SYSTEM_RANGE(1, 2, 0);
SELECT MIN(X) FROM SYSTEM_RANGE(1, 2);
SELECT MIN(X) FROM SYSTEM_RANGE(2, 1);
SELECT MIN(X) FROM SYSTEM_RANGE(1, 2, -1);
SELECT MIN(X) FROM SYSTEM_RANGE(2, 1, -1);
select listagg(v, '-') within group (order by v asc),
    listagg(v, '-') within group (order by v desc) filter (where v >= '4')
    from test where v >= '2';
select group_concat(v order by v asc separator '-'),
    group_concat(v order by v desc separator '-') filter (where v >= '4')
    from test where v >= '2';
select group_concat(v order by v asc separator '-'),
    group_concat(v order by v desc separator '-') filter (where v >= '4')
    from test where v >= '2';
select group_concat(v order by v asc separator '-'),
    group_concat(v order by v desc separator '-') filter (where v >= '4')
    from test;
select group_concat(v) from test;
select group_concat(distinct v) from test;
select group_concat(distinct v order by v desc) from test;
SELECT LISTAGG(V, ',') WITHIN GROUP (ORDER BY ID) FROM TEST;
SELECT LISTAGG(COALESCE(CAST(V AS VARCHAR), 'null'), ',') WITHIN GROUP (ORDER BY ID) FROM TEST;
SELECT LISTAGG(V, ',') WITHIN GROUP (ORDER BY V) FROM TEST;
select g, listagg(v, '-') from test group by g;
select g, listagg(v, '-') over (partition by g) from test order by v;
select g, listagg(v, '-' on overflow error) within group (order by v) filter (where v <> 2) over (partition by g) from test order by v;
select listagg(distinct v, '-') from test;
error select g, group_concat(v separator v) from test group by g;
SELECT LISTAGG(A) WITHIN GROUP (ORDER BY B ASC NULLS FIRST, C ASC NULLS FIRST) FROM TEST;
SELECT LISTAGG(A) WITHIN GROUP (ORDER BY B ASC NULLS LAST, C ASC NULLS LAST) FROM TEST;
SELECT LISTAGG(DISTINCT A, ' ') WITHIN GROUP (ORDER BY B) FROM (VALUES ('a', 2), ('a', 3), ('b', 1)) T(A, B);
SELECT STRING_AGG(B, ', ') FROM TEST GROUP BY A;
SELECT STRING_AGG(B, ', ' ORDER BY B DESC) FROM TEST GROUP BY A;
SELECT LISTAGG(V, '') WITHIN GROUP(ORDER BY V) FROM (VALUES 'a', 'b') T(V);
SELECT REGR_SLOPE(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT MODE(V) FROM TEST;
SELECT MODE(DISTINCT V) FROM TEST;
SELECT MODE(V) FROM TEST;
SELECT MODE(V), MODE() WITHIN GROUP (ORDER BY V DESC) FROM TEST;
SELECT MODE(V) FILTER (WHERE (V > 1)), MODE(V) FILTER (WHERE (V < 0)) FROM TEST;
SELECT STATS_MODE(V) FROM TEST;
SELECT MODE(V ORDER BY V) FROM TEST;
SELECT MODE(V ORDER BY V ASC) FROM TEST;
SELECT MODE(V ORDER BY V DESC) FROM TEST;
SELECT MODE(V ORDER BY V + 1) FROM TEST;
SELECT MODE() WITHIN GROUP (ORDER BY V) FROM TEST;
SELECT MODE() WITHIN GROUP (ORDER BY V ASC) FROM TEST;
SELECT MODE() WITHIN GROUP (ORDER BY V DESC) FROM TEST;
SELECT
    MODE() WITHIN GROUP (ORDER BY V) OVER () MA,
    MODE() WITHIN GROUP (ORDER BY V DESC) OVER () MD,
    MODE() WITHIN GROUP (ORDER BY V) OVER (ORDER BY V) MWA,
    MODE() WITHIN GROUP (ORDER BY V DESC) OVER (ORDER BY V) MWD,
    V FROM TEST;
SELECT MODE(N) FROM TEST;
SELECT ENVELOPE(V) FROM TEST;
SELECT ENVELOPE(V) FROM TEST;
SELECT ENVELOPE(V), ENVELOPE(V) FILTER (WHERE V <> 'POINT(3 1)') FILTERED1,
    ENVELOPE(V) FILTER (WHERE V <> 'POINT(1 2)') FILTERED2 FROM TEST;
SELECT ENVELOPE(N) FROM (SELECT V AS N FROM TEST);
SELECT ENVELOPE(V) FROM TEST;
SELECT ENVELOPE(V) FILTER (WHERE V <> 'POINT(3 1)') FILTERED FROM TEST;
SELECT ENVELOPE(V) FROM TEST WHERE V <> 'POINT(3 1)';
SELECT ENVELOPE(N) FROM (SELECT V AS N FROM TEST);
SELECT ENVELOPE(V) FROM TEST;
SELECT ENVELOPE(N) FROM (SELECT V AS N FROM TEST);
SELECT ENVELOPE(V) FROM TEST;
SELECT ESTIMATED_ENVELOPE('TEST', 'V');
SELECT RAND(1000) * 0;
SELECT ENVELOPE(N) FROM (SELECT V AS N FROM TEST);
SELECT ENVELOPE(V) FROM TEST;
SELECT ESTIMATED_ENVELOPE('TEST', 'V');
SELECT RAND(1000) * 0;
SELECT ENVELOPE(N) FROM (SELECT V AS N FROM TEST);
SELECT ENVELOPE(V) FROM TEST;
SELECT ENVELOPE(G2) FROM TEST;
SELECT COVAR_SAMP(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_R2(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT REGR_COUNT(Y, X) OVER (ORDER BY R) FROM (VALUES
    (1, NULL, 1),
    (2, 1, NULL),
    (3, NULL, NULL),
    (4, -3, -2),
    (5, -3, -1),
    (6, 10, 9),
    (7, 10, 10),
    (8, 10, 11),
    (9, 11, 7)
) T(R, Y, X) ORDER BY R;
SELECT A, EVERY(B < 5), BOOL_AND(B > 1), EVERY(B >= 1) FILTER (WHERE A = 1) FROM TEST GROUP BY A;
select array_agg(v order by v asc),
    array_agg(v order by v desc) filter (where v >= '4')
    from test where v >= '2';
select ARRAY_AGG(v order by v asc),
    ARRAY_AGG(v order by v desc) filter (where v >= '4')
    from test where v >= '2';
select ARRAY_AGG(v order by v asc),
    ARRAY_AGG(v order by v desc) filter (where v >= '4')
    from test;
select array_agg(v) from test;
select array_agg(distinct v) from test;
select array_agg(distinct v order by v desc) from test;
SELECT ARRAY_AGG(ID), NAME FROM TEST;
SELECT ARRAY_AGG(ID ORDER BY ID), NAME FROM TEST GROUP BY NAME;
SELECT ARRAY_AGG(ID ORDER BY ID) OVER (), NAME FROM TEST;
SELECT ARRAY_AGG(ID ORDER BY ID) OVER (PARTITION BY NAME), NAME FROM TEST;
SELECT
    ARRAY_AGG(ID ORDER BY ID) FILTER (WHERE ID < 3 OR ID > 4) OVER (PARTITION BY NAME) A,
    ARRAY_AGG(ID ORDER BY ID) FILTER (WHERE ID < 3 OR ID > 4) OVER (PARTITION BY NAME ORDER BY ID) AO,
    ID, NAME FROM TEST ORDER BY ID;
SELECT
    ARRAY_AGG(ID ORDER BY ID) FILTER (WHERE ID < 3 OR ID > 4)
    OVER (ORDER BY ID ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) A,
    ID FROM TEST ORDER BY ID;
SELECT ARRAY_AGG(SUM(ID)) OVER () FROM TEST;
SELECT ARRAY_AGG(ID ORDER BY ID) OVER() FROM TEST GROUP BY ID ORDER BY ID;
SELECT ARRAY_AGG(NAME) OVER(PARTITION BY NAME) FROM TEST GROUP BY NAME;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) OVER (PARTITION BY NAME), NAME FROM TEST GROUP BY NAME;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) OVER (PARTITION BY NAME), NAME FROM TEST
    WHERE ID <> 5
    GROUP BY NAME HAVING ARRAY_AGG(ID ORDER BY ID)[1] > 1
    QUALIFY ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) OVER (PARTITION BY NAME) <> ARRAY[ARRAY[3]];
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) OVER (PARTITION BY NAME), NAME FROM TEST
    GROUP BY NAME ORDER BY NAME OFFSET 1 ROW;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) FILTER (WHERE NAME > 'b') OVER (PARTITION BY NAME), NAME FROM TEST
    GROUP BY NAME ORDER BY NAME;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) FILTER (WHERE NAME > 'c') OVER (PARTITION BY NAME), NAME FROM TEST
    GROUP BY NAME ORDER BY NAME;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) FILTER (WHERE NAME > 'b') OVER () FROM TEST GROUP BY NAME ORDER BY NAME;
SELECT ARRAY_AGG(ARRAY_AGG(ID ORDER BY ID)) FILTER (WHERE NAME > 'c') OVER () FROM TEST GROUP BY NAME ORDER BY NAME;
SELECT ARRAY_AGG(ID) OVER() FROM TEST GROUP BY NAME;
SELECT ARRAY_AGG(ID) OVER(PARTITION BY NAME ORDER BY ID), NAME FROM TEST;
SELECT ARRAY_AGG(ID) OVER(PARTITION BY NAME ORDER BY ID DESC), NAME FROM TEST;
SELECT
    ARRAY_AGG(ID ORDER BY ID) OVER(PARTITION BY NAME ORDER BY ID DESC) A,
    ARRAY_AGG(ID) OVER(PARTITION BY NAME ORDER BY ID DESC) D,
    NAME FROM TEST;
SELECT ARRAY_AGG(SUM(ID)) OVER(ORDER BY ID) FROM TEST GROUP BY ID;
SELECT
    ARRAY_AGG(ID) OVER (ORDER BY G RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) D,
    ARRAY_AGG(ID) OVER (ORDER BY G RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) R,
    ARRAY_AGG(ID) OVER (ORDER BY G RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) G,
    ARRAY_AGG(ID) OVER (ORDER BY G RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) T,
    ARRAY_AGG(ID) OVER (ORDER BY G RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE NO OTHERS) N
    FROM TEST;
SELECT *,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) R_ID,
    ARRAY_AGG("VALUE") OVER (ORDER BY "VALUE" ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) R_V,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) V_ID,
    ARRAY_AGG("VALUE") OVER (ORDER BY "VALUE" RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) V_V,
    ARRAY_AGG("VALUE") OVER (ORDER BY "VALUE" DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) V_V_R,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING) G_ID,
    ARRAY_AGG("VALUE") OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING) G_V
    FROM TEST;
SELECT *,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) A1,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) A2
    FROM TEST;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS -1 PRECEDING) FROM TEST;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY ID ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) FROM TEST FETCH FIRST 4 ROWS ONLY;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY ID ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM TEST OFFSET 4 ROWS;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY ID RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING) FROM TEST FETCH FIRST 4 ROWS ONLY;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY ID RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM TEST OFFSET 4 ROWS;
SELECT *,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING) N,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING EXCLUDE TIES) T,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 PRECEDING AND 0 FOLLOWING EXCLUDE TIES) T1
    FROM TEST;
SELECT *,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) U_P,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 2 PRECEDING AND 1 PRECEDING) P,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) F,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) U_F
    FROM TEST;
SELECT *,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 1 PRECEDING AND 0 PRECEDING) P,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN 0 FOLLOWING AND 1 FOLLOWING) F
    FROM TEST;
SELECT ID, "VALUE",
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING EXCLUDE GROUP) G,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING EXCLUDE TIES) T
    FROM TEST;
SELECT ID, "VALUE", ARRAY_AGG(ID) OVER(ORDER BY "VALUE" ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING EXCLUDE GROUP) G
    FROM TEST ORDER BY ID FETCH FIRST 3 ROWS ONLY;
SELECT ID, "VALUE", ARRAY_AGG(ID) OVER(ORDER BY "VALUE" ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING EXCLUDE GROUP) G
    FROM TEST ORDER BY ID FETCH FIRST 3 ROWS ONLY;
SELECT ID, "VALUE", ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING) A
    FROM TEST;
SELECT ID, "VALUE",
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) CP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) CF,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) RP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) RF,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) GP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) GF
    FROM TEST;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY ID RANGE BETWEEN CURRENT ROW AND 1 PRECEDING) FROM TEST;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING) FROM TEST;
SELECT *, ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM TEST;
SELECT ID, "VALUE", ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING EXCLUDE CURRENT ROW) A
    FROM TEST;
SELECT ID, "VALUE", ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN 1 FOLLOWING AND 1 FOLLOWING EXCLUDE CURRENT ROW) A
    FROM TEST;
SELECT ID, "VALUE",
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) CP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) CF,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) RP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) RF,
    ARRAY_AGG(ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) GP,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY "VALUE" GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) GF
    FROM TEST;
SELECT ID, "VALUE",
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND "VALUE" FOLLOWING) RG,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY ID RANGE BETWEEN "VALUE" PRECEDING AND UNBOUNDED FOLLOWING) RGR,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY ID ROWS BETWEEN UNBOUNDED PRECEDING AND "VALUE" FOLLOWING) R,
    ARRAY_AGG(ID ORDER BY ID) OVER (ORDER BY ID ROWS BETWEEN "VALUE" PRECEDING AND UNBOUNDED FOLLOWING) RR
    FROM TEST;
SELECT ID, "VALUE",
    ARRAY_AGG(ID ORDER BY ID) OVER
        (PARTITION BY "VALUE" ORDER BY ID ROWS BETWEEN "VALUE" / 3 PRECEDING AND "VALUE" / 3 FOLLOWING) A,
    ARRAY_AGG(ID ORDER BY ID) OVER
        (PARTITION BY "VALUE" ORDER BY ID ROWS BETWEEN UNBOUNDED PRECEDING AND "VALUE" / 3 FOLLOWING) AP,
    ARRAY_AGG(ID ORDER BY ID) OVER
        (PARTITION BY "VALUE" ORDER BY ID ROWS BETWEEN "VALUE" / 3 PRECEDING AND UNBOUNDED FOLLOWING) AF
    FROM TEST;
SELECT ARRAY_AGG("VALUE") FROM TEST;
SELECT ARRAY_AGG("VALUE" ORDER BY ID) FROM TEST;
SELECT ARRAY_AGG("VALUE" ORDER BY ID) FILTER (WHERE "VALUE" IS NOT NULL) FROM TEST;
SELECT ARRAY_AGG("VALUE" ORDER BY "VALUE") FROM TEST;
SELECT ARRAY_AGG("VALUE" ORDER BY "VALUE" NULLS LAST) FROM TEST;
SELECT ARRAY_AGG(DISTINCT A ORDER BY B) FROM (VALUES (4, 3), (5, 1), (5, 2)) T(A, B);
select BIT_OR_AGG(v), BIT_OR_AGG(v) filter (where v >= 8) from test where v <= 512;
SELECT BIT_NOR_AGG(V), BIT_NOR_AGG(V) FILTER (WHERE V >= 8) FROM TEST WHERE V <= 512;
select BIT_OR_AGG(v), BIT_OR_AGG(v) filter (where v >= 8) from test where v <= 512;
SELECT BIT_NOR_AGG(V), BIT_NOR_AGG(V) FILTER (WHERE V >= 8) FROM TEST WHERE V <= 512;
select avg(cast(x as int)) from system_range(2147483547, 2147483637);
select avg(x) from system_range(9223372036854775707, 9223372036854775797);
select avg(cast(100 as tinyint)) from system_range(1, 1000);
select avg(cast(100 as smallint)) from system_range(1, 1000);
select avg(v), avg(v) filter (where v >= 40) from test where v <= 100;
select avg(v), avg(v) filter (where v >= 40) from test where v <= 100;
SELECT COLUMN_NAME, DATA_TYPE_SQL('PUBLIC', 'A', 'TABLE', DTD_IDENTIFIER) TYPE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'A' ORDER BY ORDINAL_POSITION;
SELECT AVG(X) FROM (VALUES INTERVAL '1' DAY, INTERVAL '2' DAY) T(X);
SELECT AVG(X) FROM (VALUES CAST(1 AS NUMERIC(1)), CAST(2 AS NUMERIC(1))) T(X);
SELECT AVG(I) FROM (VALUES 9e99999 - 1, 1e99999 + 1) T(I);
SELECT AVG(I) = 5E99999 FROM (VALUES CAST(9e99999 - 1 AS NUMERIC(100000)), CAST(1e99999 + 1 AS NUMERIC(100000))) T(I);
SELECT AVG(I) FROM (VALUES INTERVAL '999999999999999999' SECOND, INTERVAL '1' SECOND) T(I);
SELECT HISTOGRAM(X) FROM VALUES (1), (2), (3), (1), (2), (NULL), (5) T(X);
SELECT HISTOGRAM(X) FILTER (WHERE X > 1) FROM VALUES (1), (2), (3), (1), (2), (NULL), (5) T(X);
SELECT HISTOGRAM(X) FILTER (WHERE X > 0) FROM VALUES (0) T(X);
error SELECT HISTOGRAM(DISTINCT X) FROM VALUES (0) T(X);
error SELECT HISTOGRAM(ALL X) FROM VALUES (0) T(X);
select autocommit();
select array_contains(ARRAY[4.0, 2.0, 2.0], 2.0);
select array_contains(ARRAY[4.0, 2.0, 2.0], 5.0);
select array_contains(ARRAY['one', 'two'], 'one');
select array_contains(ARRAY['one', 'two'], 'xxx');
select array_contains(ARRAY['one', 'two'], null);
select array_contains(ARRAY[null, 'two'], null);
select array_contains(null, 'one');
select array_contains(ARRAY[ARRAY[1, 2], ARRAY[3, 4]], ARRAY[1, 2]);
select array_contains(ARRAY[ARRAY[1, 2], ARRAY[3, 4]], ARRAY[5, 6]);
SELECT ID, ARRAY_CONTAINS(A, 1L), ARRAY_CONTAINS(A, 2L), ARRAY_CONTAINS(A, 3L), ARRAY_CONTAINS(A, 4L) FROM TEST;
SELECT * FROM (
    SELECT ID, ARRAY_CONTAINS(A, 1L), ARRAY_CONTAINS(A, 2L), ARRAY_CONTAINS(A, 3L), ARRAY_CONTAINS(A, 4L) FROM TEST
);
select readonly();
SELECT TRIM_ARRAY(ARRAY[1, 2], -1);
SELECT TRIM_ARRAY(ARRAY[1, 2], 0);
SELECT TRIM_ARRAY(ARRAY[1, 2], 1);
SELECT TRIM_ARRAY(ARRAY[1, 2], 2);
SELECT TRIM_ARRAY(ARRAY[1, 2], 3);
SELECT TRIM_ARRAY(NULL, 1);
SELECT TRIM_ARRAY(NULL, -1);
SELECT TRIM_ARRAY(ARRAY[1], NULL);
select casewhen(null, '1', '2') xn, casewhen(1>0, 'n', 'y') xy, casewhen(0<1, 'a', 'b') xa;
select rownum() as rnum, str from test where str = 'A';
SELECT str FROM FINAL TABLE (UPDATE test SET str = char(rownum + 48) WHERE str = '0');
SELECT * FROM (VALUES 1, 2) AS T1(X), (VALUES 1, 2) AS T2(X) WHERE ROWNUM = 1;
SELECT 1 ORDER BY ROWNUM;
select ifnull(null, '1') x1, ifnull(null, null) xn, ifnull('a', 'b') xa;
SELECT ISNULL(NULL, '1');
select isnull(null, '1') x1, isnull(null, null) xn, isnull('a', 'b') xa;
SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'T';
select convert(null, varchar(255)) xn, convert(' 10', int) x10, convert(' 20 ', int) x20;
select coalesce(null, null) xn, coalesce(null, 'a') xa, coalesce('1', '2') x1;
select * from table(a int=(1)), table(b int=2), table(c int=row(3));
SELECT * FROM (SELECT * FROM TEST) ORDER BY id;
SELECT * FROM (SELECT * FROM TEST) x ORDER BY id;
select * from table(id int = (1));
select * from table(id int=(1, 2), name varchar=('Hello', 'World')) x order by id;
SELECT * FROM (TABLE(ID INT = (1, 2)));
SELECT ID, DATA_TYPE_SQL('PUBLIC', 'C', 'CONSTANT', ID) FROM (VALUES NULL, 'TYPE', 'X') T(ID);
SELECT ID, DATA_TYPE_SQL('PUBLIC', 'D', 'DOMAIN', ID) FROM (VALUES NULL, 'TYPE', 'X') T(ID);
SELECT ID, DATA_TYPE_SQL('PUBLIC', 'T', 'TABLE', ID) FROM (VALUES NULL, '0', '1', '2', 'X') T(ID);
SELECT ID, DATA_TYPE_SQL('PUBLIC', 'R_1', 'ROUTINE', ID) FROM (VALUES NULL, 'RESULT', '0', '1', '2', '3', 'X') T(ID);
SELECT DATA_TYPE_SQL(S, O, T, I) FROM (VALUES
    (NULL, 'C', 'CONSTANT', 'TYPE'),
    ('X', 'C', 'CONSTANT', 'TYPE'),
    ('PUBLIC', NULL, 'CONSTANT', 'TYPE'),
    ('PUBLIC', 'X', 'CONSTANT', 'TYPE'),
    ('PUBLIC', 'C', NULL, 'TYPE'),
    (NULL, 'D', 'DOMAIN', 'TYPE'),
    ('X', 'D', 'DOMAIN', 'TYPE'),
    ('PUBLIC', NULL, 'DOMAIN', 'TYPE'),
    ('PUBLIC', 'X', 'DOMAIN', 'TYPE'),
    ('PUBLIC', 'D', NULL, 'TYPE'),
    (NULL, 'T', 'TABLE', '1'),
    ('X', 'T', 'TABLE', '1'),
    ('PUBLIC', NULL, 'TABLE', '1'),
    ('PUBLIC', 'X', 'TABLE', '1'),
    ('PUBLIC', 'T', NULL, '1'),
    (NULL, 'R_1', 'ROUTINE', '1'),
    ('X', 'R_1', 'ROUTINE', '1'),
    ('PUBLIC', NULL, 'ROUTINE', '1'),
    ('PUBLIC', 'R_0', 'ROUTINE', '1'),
    ('PUBLIC', 'R_2', 'ROUTINE', '1'),
    ('PUBLIC', 'R_Z', 'ROUTINE', '1'),
    ('PUBLIC', 'X', 'ROUTINE', '1'),
    ('PUBLIC', 'X_1', 'ROUTINE', '1'),
    ('PUBLIC', 'R_1', NULL, '1'),
    ('PUBLIC', 'T', 'X', '1')
    ) T(S, O, T, I);
SELECT A, ARRAY_GET(A, 1), ARRAY_GET(A, 1) IS OF (INTEGER) FROM TEST;
select cast(null as varchar(255)) xn, cast(' 10' as int) x10, cast(' 20 ' as int) x20;
select cast(128 as varbinary);
select cast(65535 as varbinary);
select cast(X'ff' as tinyint);
select cast(X'7f' as tinyint);
select cast(X'00ff' as smallint);
select cast(X'000000ff' as int);
select cast(X'000000000000ffff' as long);
select cast(cast(65535 as long) as varbinary);
select cast(cast(-1 as tinyint) as varbinary);
select cast(cast(-1 as smallint) as varbinary);
select cast(cast(-1 as int) as varbinary);
select cast(cast(-1 as long) as varbinary);
select cast(cast(1 as tinyint) as varbinary);
select cast(cast(1 as smallint) as varbinary);
select cast(cast(1 as int) as varbinary);
select cast(cast(1 as long) as varbinary);
select cast(X'ff' as tinyint);
select cast(X'ffff' as smallint);
select cast(X'ffffffff' as int);
select cast(X'ffffffffffffffff' as long);
select cast(' 011 ' as int);
select cast(cast(0.1 as real) as decimal(1, 1));
select cast(cast(95605327.73 as float) as decimal(10, 8));
select cast(cast('01020304-0506-0708-090a-0b0c0d0e0f00' as uuid) as varbinary);
select cast('12345678123456781234567812345678' as uuid);
select cast('000102030405060708090a0b0c0d0e0f' as uuid);
select -cast(0 as double);
SELECT * FROM (SELECT CAST('11:11:11.123456789' AS TIME));
SELECT * FROM (SELECT CAST('11:11:11.123456789' AS TIME(0)));
SELECT * FROM (SELECT CAST('11:11:11.123456789' AS TIME(9)));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789' AS TIMESTAMP));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789' AS TIMESTAMP(0)));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789' AS TIMESTAMP(9)));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789Z' AS TIMESTAMP WITH TIME ZONE));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789Z' AS TIMESTAMP(0) WITH TIME ZONE));
SELECT * FROM (SELECT CAST('2000-01-01 11:11:11.123456789Z' AS TIMESTAMP(9) WITH TIME ZONE));
SELECT CURRENT_TIMESTAMP(9) = CAST(CURRENT_TIME(9) AS TIMESTAMP(9) WITH TIME ZONE);
SELECT LOCALTIMESTAMP(9) = CAST(LOCALTIME(9) AS TIMESTAMP(9));
SELECT CAST('true ' AS BOOLEAN) V, CAST(CAST('true' AS CHAR(10)) AS BOOLEAN) F;
SELECT CURRENT_SCHEMA, SCHEMA();
SELECT CARDINALITY(NULL);
SELECT CARDINALITY(ARRAY[]);
SELECT CARDINALITY(ARRAY[1, 2, 5]);
SELECT ARRAY_LENGTH(ARRAY[1, 2, 5]);
SELECT ID, ARRAY_MAX_CARDINALITY(A), ARRAY_MAX_CARDINALITY(B) FROM TEST;
SELECT ARRAY_MAX_CARDINALITY(ARRAY_AGG(ID)) FROM TEST;
SELECT ARRAY_MAX_CARDINALITY(ARRAY['a', 'b']);
SELECT ARRAY_MAX_CARDINALITY(NULL);
SELECT ARRAY_MAX_CARDINALITY(CAST(NULL AS INT ARRAY));
select array_cat(ARRAY[1, 2], ARRAY[3, 4]) = ARRAY[1, 2, 3, 4];
select array_cat(ARRAY[1, 2], null) is null;
select array_cat(null, ARRAY[1, 2]) is null;
select array_append(ARRAY[1, 2], 3) = ARRAY[1, 2, 3];
select array_append(ARRAY[1, 2], null) is null;
select array_append(null, 3) is null;
SELECT * FROM UNNEST();
SELECT * FROM UNNEST(ARRAY[]);
SELECT * FROM UNNEST(ARRAY[1, 2, 3]);
SELECT * FROM UNNEST(ARRAY[1], ARRAY[2, 3, 4], ARRAY[5, 6]);
SELECT * FROM UNNEST(ARRAY[1], ARRAY[2, 3, 4], ARRAY[5, 6]) WITH ORDINALITY;
SELECT 1 IN(SELECT * FROM UNNEST(ARRAY[1, 2, 3]));
SELECT 4 IN(SELECT * FROM UNNEST(ARRAY[1, 2, 3]));
SELECT X, X IN(SELECT * FROM UNNEST(ARRAY[2, 4])) FROM SYSTEM_RANGE(1, 5);
select nullif(null, null) xn, nullif('a', 'a') xn, nullif('1', '2') x1;
SELECT
    A = B,
    NULLIF(A, B), CASE WHEN A = B THEN NULL ELSE A END
    FROM (VALUES
        (1, (1, NULL), (1, NULL)),
        (2, (1, NULL), (2, NULL)),
        (3, (2, NULL), (1, NULL)),
        (4, (1, 1), (1, 2))
    ) T(N, A, B) ORDER BY N;
-- select select decode(1, 2, 'a', 'else');
select decode(1, 1, '1', 1, '11') from dual;
select user() x_sa, current_user() x_sa2;
SELECT CURRENT_USER;
SELECT SESSION_USER;
SELECT SYSTEM_USER;
SELECT CURRENT_ROLE;
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('ROLE', 'A'),
    DB_OBJECT_ID('ROLE', 'B'),
    DB_OBJECT_SQL('ROLE', 'A'),
    DB_OBJECT_SQL('ROLE', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('SCHEMA', 'A'),
    DB_OBJECT_ID('SCHEMA', 'B'),
    DB_OBJECT_SQL('SCHEMA', 'A'),
    DB_OBJECT_SQL('SCHEMA', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('USER', 'A'),
    DB_OBJECT_ID('USER', 'B'),
    DB_OBJECT_SQL('USER', 'A'),
    DB_OBJECT_SQL('USER', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('CONSTANT', 'PUBLIC', 'A'),
    DB_OBJECT_ID('CONSTANT', 'PUBLIC', 'B'),
    DB_OBJECT_SQL('CONSTANT', 'PUBLIC', 'A'),
    DB_OBJECT_SQL('CONSTANT', 'PUBLIC', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('DOMAIN', 'PUBLIC', 'A'),
    DB_OBJECT_ID('DOMAIN', 'PUBLIC', 'B'),
    DB_OBJECT_SQL('DOMAIN', 'PUBLIC', 'A'),
    DB_OBJECT_SQL('DOMAIN', 'PUBLIC', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('ROUTINE', 'PUBLIC', 'A'),
    DB_OBJECT_ID('ROUTINE', 'PUBLIC', 'B'),
    DB_OBJECT_SQL('ROUTINE', 'PUBLIC', 'A'),
    DB_OBJECT_SQL('ROUTINE', 'PUBLIC', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES (
    DB_OBJECT_ID('SEQUENCE', 'PUBLIC', 'A'),
    DB_OBJECT_ID('SEQUENCE', 'PUBLIC', 'B'),
    DB_OBJECT_SQL('SEQUENCE', 'PUBLIC', 'A'),
    DB_OBJECT_SQL('SEQUENCE', 'PUBLIC', 'B')
)) T(ID_A, ID_B, SQL_A, SQL_B);
SELECT T, ID_A <> ID_B, SQL_A, SQL_B FROM (VALUES
(
    'CONSTRAINT',
    DB_OBJECT_ID('CONSTRAINT', 'PUBLIC', 'C_A'),
    DB_OBJECT_ID('CONSTRAINT', 'PUBLIC', 'C_B'),
    DB_OBJECT_SQL('CONSTRAINT', 'PUBLIC', 'C_A'),
    DB_OBJECT_SQL('CONSTRAINT', 'PUBLIC', 'C_B')
), (
    'INDEX',
    DB_OBJECT_ID('INDEX', 'PUBLIC', 'I_A'),
    DB_OBJECT_ID('INDEX', 'PUBLIC', 'I_B'),
    DB_OBJECT_SQL('INDEX', 'PUBLIC', 'I_A'),
    DB_OBJECT_SQL('INDEX', 'PUBLIC', 'I_B')
), (
    'SYNONYM',
    DB_OBJECT_ID('SYNONYM', 'PUBLIC', 'S_A'),
    DB_OBJECT_ID('SYNONYM', 'PUBLIC', 'S_B'),
    DB_OBJECT_SQL('SYNONYM', 'PUBLIC', 'S_A'),
    DB_OBJECT_SQL('SYNONYM', 'PUBLIC', 'S_B')
), (
    'TABLE',
    DB_OBJECT_ID('TABLE', 'PUBLIC', 'T_A'),
    DB_OBJECT_ID('TABLE', 'PUBLIC', 'T_B'),
    DB_OBJECT_SQL('TABLE', 'PUBLIC', 'T_A'),
    DB_OBJECT_SQL('TABLE', 'PUBLIC', 'T_B')
), (
    'TRIGGER',
    DB_OBJECT_ID('TRIGGER', 'PUBLIC', 'G_A'),
    DB_OBJECT_ID('TRIGGER', 'PUBLIC', 'G_B'),
    DB_OBJECT_SQL('TRIGGER', 'PUBLIC', 'G_A'),
    DB_OBJECT_SQL('TRIGGER', 'PUBLIC', 'G_B')
)) T(T, ID_A, ID_B, SQL_A, SQL_B);
select array_slice(ARRAY[1, 2, 3, 4], 1, 1) = ARRAY[1];
select array_slice(ARRAY[1, 2, 3, 4], 1, 3) = ARRAY[1, 2, 3];
select array_slice(ARRAY[1, 2, 3, 4], 1, 5) is null;
select array_slice(ARRAY[1, 2, 3, 4], 3, 1) = ARRAY[];
select array_slice(ARRAY[1, 2, 3, 4], 0, 3) = ARRAY[1, 2, 3];
select array_slice(ARRAY[1, 2, 3, 4], 1, 5) = ARRAY[1, 2, 3, 4];
select array_slice(null, 1, 3) is null;
select array_slice(ARRAY[1, 2, 3, 4], null, 3) is null;
select array_slice(ARRAY[1, 2, 3, 4], 1, null) is null;
SELECT LAST_INSERT_ID() AS L;
SELECT LAST_INSERT_ID(100) AS L;
SELECT LAST_INSERT_ID() AS L;
SELECT MAX(id) AS M FROM sequence;
SELECT LAST_INSERT_ID() AS L;
SELECT LAST_INSERT_ID(NULL) AS L;
SELECT LAST_INSERT_ID() AS L;
select mod(null, 1) vn, mod(1, null) vn1, mod(null, null) vn2, mod(10, 2) e1;
select bitor(null, 1) vn, bitor(1, null) vn1, bitor(null, null) vn2, bitor(3, 6) e7;
SELECT BITOR(10, 12);
SELECT BITNOR(10, 12);
SELECT BITOR('AA', 'BB');
SELECT BITOR(1, X'AA');
SELECT BITNOR('AA', 'BB');
SELECT BITNOR(1, X'AA');
SELECT V, BITCOUNT(V) C FROM (VALUES 0, 10, -1) T(V);
SELECT BITCOUNT(X'0123456789ABCDEF');
SELECT BITCOUNT(X'0123456789ABCDEF33');
SELECT I,
    BITGET(CAST((0xC5 - 0x100) AS TINYINT), I),
    BITGET(CAST(0xC5 AS SMALLINT), I),
    BITGET(CAST(0xC5 AS INTEGER), I),
    BITGET(CAST(0xC5 AS BIGINT), I),
    BITGET(CAST(X'C5' AS VARBINARY), I),
    BITGET(CAST(X'C5' AS BINARY), I)
    FROM (VALUES -1, 0, 1, 4, 9, 99) T(I);
SELECT X, BITGET(X'1001', X) FROM SYSTEM_RANGE(7, 9);
select tan(null) vn, tan(-1) r1;
select exp(null) vn, left(exp(1), 4) v1, left(exp(1.1), 4) v2, left(exp(-1.1), 4) v3, left(exp(1.9), 4) v4, left(exp(-1.9), 4) v5;
select lshift(null, 1) vn, lshift(1, null) vn1, lshift(null, null) vn2, lshift(3, 6) v1, lshift(3,0) v2;
SELECT I,
    LSHIFT(CAST(-128 AS TINYINT), I), LSHIFT(CAST(1 AS TINYINT), I),
    ULSHIFT(CAST(-128 AS TINYINT), I), ULSHIFT(CAST(1 AS TINYINT), I)
    FROM
    (VALUES -111, -8, -7, -1, 0, 1, 7, 8, 111) T(I) ORDER BY I;
SELECT I,
    LSHIFT(CAST(-32768 AS SMALLINT), I), LSHIFT(CAST(1 AS SMALLINT), I),
    ULSHIFT(CAST(-32768 AS SMALLINT), I), ULSHIFT(CAST(1 AS SMALLINT), I)
    FROM
    (VALUES -111, -16, -15, -1, 0, 1, 15, 16, 111) T(I) ORDER BY I;
SELECT I,
    LSHIFT(CAST(-2147483648 AS INTEGER), I), LSHIFT(CAST(1 AS INTEGER), I),
    ULSHIFT(CAST(-2147483648 AS INTEGER), I), ULSHIFT(CAST(1 AS INTEGER), I)
    FROM
    (VALUES -111, -32, -31, -1, 0, 1, 31, 32, 111) T(I) ORDER BY I;
SELECT I,
    LSHIFT(CAST(-9223372036854775808 AS BIGINT), I), LSHIFT(CAST(1 AS BIGINT), I),
    ULSHIFT(CAST(-9223372036854775808 AS BIGINT), I), ULSHIFT(CAST(1 AS BIGINT), I)
    FROM
    (VALUES -111, -64, -63, -1, 0, 1, 63, 64, 111) T(I) ORDER BY I;
SELECT LSHIFT(X'', 1);
SELECT LSHIFT(CAST(X'02' AS BINARY), 1);
SELECT I, LSHIFT(X'80ABCD09', I) FROM
    (VALUES -33, -32, -31, -17, -16, -15, -1, 0, 1, 15, 16, 17, 31, 32, 33) T(I) ORDER BY I;
select asin(null) vn, asin(-1) r1;
select rshift(null, 1) vn, rshift(1, null) vn1, rshift(null, null) vn2, rshift(3, 6) v1, rshift(1024,3) v2;
SELECT I,
    RSHIFT(CAST(-128 AS TINYINT), I), RSHIFT(CAST(1 AS TINYINT), I),
    URSHIFT(CAST(-128 AS TINYINT), I), URSHIFT(CAST(1 AS TINYINT), I)
    FROM
    (VALUES -111, -8, -7, -1, 0, 1, 7, 8, 111) T(I) ORDER BY I;
SELECT I,
    RSHIFT(CAST(-32768 AS SMALLINT), I), RSHIFT(CAST(1 AS SMALLINT), I),
    URSHIFT(CAST(-32768 AS SMALLINT), I), URSHIFT(CAST(1 AS SMALLINT), I)
    FROM
    (VALUES -111, -16, -15, -1, 0, 1, 15, 16, 111) T(I) ORDER BY I;
SELECT I,
    RSHIFT(CAST(-2147483648 AS INTEGER), I), RSHIFT(CAST(1 AS INTEGER), I),
    URSHIFT(CAST(-2147483648 AS INTEGER), I), URSHIFT(CAST(1 AS INTEGER), I)
    FROM
    (VALUES -111, -32, -31, -1, 0, 1, 31, 32, 111) T(I) ORDER BY I;
SELECT I,
    RSHIFT(CAST(-9223372036854775808 AS BIGINT), I), RSHIFT(CAST(1 AS BIGINT), I),
    URSHIFT(CAST(-9223372036854775808 AS BIGINT), I), URSHIFT(CAST(1 AS BIGINT), I)
    FROM
    (VALUES -111, -64, -63, -1, 0, 1, 63, 64, 111) T(I) ORDER BY I;
SELECT RSHIFT(X'', 1);
SELECT RSHIFT(CAST(X'02' AS BINARY), 1);
SELECT I, RSHIFT(X'80ABCD09', I) FROM
    (VALUES -33, -32, -31, -17, -16, -15, -1, 0, 1, 15, 16, 17, 31, 32, 33) T(I) ORDER BY I;
SELECT RSHIFT(-1, -9223372036854775808);
SELECT URSHIFT(-1, -9223372036854775808);
select radians(null) vn, truncate(radians(1), 10) v1, truncate(radians(1.1), 10) v2,
    truncate(radians(-1.1), 10) v3, truncate(radians(1.9), 10) v4,
    truncate(radians(-1.9), 10) v5;
SELECT RADIANS(0) IS OF (DOUBLE);
select acos(null) vn, acos(-1) r1;
select floor(null) vn, floor(1) v1, floor(1.1) v2, floor(-1.1) v3, floor(1.9) v4, floor(-1.9) v5;
SELECT FLOOR(1.5), FLOOR(-1.5), FLOOR(1.5) IS OF (NUMERIC);
SELECT FLOOR(1.5::DOUBLE), FLOOR(-1.5::DOUBLE), FLOOR(1.5::DOUBLE) IS OF (DOUBLE);
SELECT FLOOR(1.5::REAL), FLOOR(-1.5::REAL), FLOOR(1.5::REAL) IS OF (REAL);
SELECT DATA_TYPE, NUMERIC_PRECISION, NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'T';
select sqrt(null) vn, sqrt(0) e0, sqrt(1) e1, sqrt(4) e2, sqrt(100) e10, sqrt(0.25) e05;
SELECT LN(NULL), LOG(NULL, NULL), LOG(NULL, 2);
SELECT LOG(2, NULL), LOG10(NULL), LOG(NULL);
SELECT LN(-1);
SELECT LOG(-1, 2);
SELECT LOG(2, 0);
SELECT LOG(2, -1);
SELECT LOG(0);
SELECT LOG10(0);
SELECT LOG10(-1);
SELECT LN(0.5) VH, LN(1) V1, LN(2) V2, LN(3) V3, LN(10) V10;
SELECT LOG(2, 0.5) VH, LOG(2, 1) V1, LOG(2, 2) V2, LOG(2, 3) V3, LOG(2, 10) V10, LOG(2, 64) V64;
SELECT LOG(2.7182818284590452, 10);
SELECT LOG(10, 3);
SELECT LOG(0.5) VH, LOG(1) V1, LOG(2) V2, LOG(3) V3, LOG(10) V10;
SELECT LOG10(0.5) VH, LOG10(1) V1, LOG10(2) V2, LOG10(3) V3, LOG10(10) V10, LOG10(100) V100;
SELECT LOG(0.5) VH, LOG(1) V1, LOG(2) V2, LOG(3) V3, LOG(10) V10, LOG(100) V100;
SELECT LOG(0.5, 2) VH, LOG(1, 2) V1, LOG(2, 2) V2, LOG(3, 2) V3, LOG(10, 2) V10, LOG(64, 2) V64;
SELECT SECURE_RAND(NULL);
SELECT OCTET_LENGTH(SECURE_RAND(2));
select bitxor(null, 1) vn, bitxor(1, null) vn1, bitxor(null, null) vn2, bitxor(3, 6) e5;
SELECT BITXOR(10, 12);
SELECT BITXNOR(10, 12);
SELECT BITXOR('AA', 'BB');
SELECT BITXOR(1, X'AA');
SELECT BITXNOR('AA', 'BB');
SELECT BITXNOR(1, X'AA');
select roundmagic(null) en, roundmagic(cast(3.11 as double) - 3.1) e001, roundmagic(3.11-3.1-0.01) e000, roundmagic(2000000000000) e20x;
select bit_length(null) en, bit_length('') e0, bit_length('ab') e32;
select length(null) en, length('') e0, length('ab') e2;
select char_length(null) en, char_length('') e0, char_length('ab') e2;
select character_length(null) en, character_length('') e0, character_length('ab') e2;
select octet_length(null) en, octet_length('') e0, octet_length('ab') e4;
SELECT TRUNCATE(1.234, 2);
SELECT TRUNCATE(DATE '2011-03-05');
SELECT TRUNCATE(TIMESTAMP '2011-03-05 02:03:04');
SELECT TRUNCATE(TIMESTAMP WITH TIME ZONE '2011-03-05 02:03:04+07');
SELECT TRUNCATE(CURRENT_DATE, 1);
SELECT TRUNCATE(LOCALTIMESTAMP, 1);
SELECT TRUNCATE(CURRENT_TIMESTAMP, 1);
SELECT TRUNCATE('2011-03-05 02:03:04', 1);
SELECT TRUNCATE('bad');
SELECT TRUNCATE(1, 2, 3);
select truncate(null, null) en, truncate(1.99, 0) e1, truncate(-10.9, 0) em10;
select trunc(null, null) en, trunc(1.99, 0) e1, trunc(-10.9, 0) em10;
select trunc(1.3);
SELECT TRUNCATE(1.3) IS OF (NUMERIC);
SELECT TRUNCATE(CAST(1.3 AS DOUBLE)) IS OF (DOUBLE);
SELECT TRUNCATE(CAST(1.3 AS REAL)) IS OF (REAL);
SELECT TRUNCATE(1.99, 0), TRUNCATE(1.99, 1), TRUNCATE(-1.99, 0), TRUNCATE(-1.99, 1);
SELECT TRUNCATE(1.99::DOUBLE, 0), TRUNCATE(1.99::DOUBLE, 1), TRUNCATE(-1.99::DOUBLE, 0), TRUNCATE(-1.99::DOUBLE, 1);
SELECT TRUNCATE(1.99::REAL, 0), TRUNCATE(1.99::REAL, 1), TRUNCATE(-1.99::REAL, 0), TRUNCATE(-1.99::REAL, 1);
SELECT TRUNCATE(V, S) FROM (VALUES (1.111, 1)) T(V, S);
SELECT TRUNC(1, 10000000);
SELECT TRUNC(N, -1) NN, TRUNC(N) N0, TRUNC(N, 1) N1, TRUNC(N, 2) N2, TRUNC(N, 3) N3, TRUNC(N, 10000000) NL,
    TRUNC(D) D0, TRUNC(D, 2) D2, TRUNC(D, 3) D3,
    TRUNC(I) I0, TRUNC(I, 1) I1, TRUNC(I, I) II FROM T1;
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'T2' ORDER BY ORDINAL_POSITION;
SELECT TRUNC(11, -1) I, TRUNC(CAST(11 AS NUMERIC(2)), -1) N;
SELECT TRUNC(11, -2) I, TRUNC(CAST(11 AS NUMERIC(2)), -2) N;
select bitand(null, 1) vn, bitand(1, null) vn1, bitand(null, null) vn2, bitand(3, 6) e2;
SELECT BITAND(10, 12);
SELECT BITNAND(10, 12);
SELECT BITAND('AA', 'BB');
SELECT BITAND(1, X'AA');
SELECT BITNAND('AA', 'BB');
SELECT BITNAND(1, X'AA');
select atan2(null, null) vn, atan2(10, 1) r1;
select degrees(null) vn, truncate(degrees(1), 10) v1, truncate(degrees(1.1), 10) v2,
    truncate(degrees(-1.1), 10) v3, truncate(degrees(1.9), 10) v4,
    truncate(degrees(-1.9), 10) v5;
select ceil(null) vn, ceil(1) v1, ceiling(1.1) v2, ceil(-1.1) v3, ceiling(1.9) v4, ceiling(-1.9) v5;
SELECT CEIL(1.5), CEIL(-1.5), CEIL(1.5) IS OF (NUMERIC);
SELECT CEIL(1.5::DOUBLE), CEIL(-1.5::DOUBLE), CEIL(1.5::DOUBLE) IS OF (DOUBLE);
SELECT CEIL(1.5::REAL), CEIL(-1.5::REAL), CEIL(1.5::REAL) IS OF (REAL);
SELECT CEIL('a');
SELECT DATA_TYPE, NUMERIC_PRECISION, NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'T';
SELECT ORA_HASH(NULL);
SELECT ORA_HASH(NULL, 0);
SELECT ORA_HASH(NULL, 0, 0);
SELECT ORA_HASH(1);
SELECT ORA_HASH(1, -1);
SELECT ORA_HASH(1, 0);
SELECT ORA_HASH(1, 4294967295);
SELECT ORA_HASH(1, 4294967296);
SELECT ORA_HASH(1, 4294967295, -1);
SELECT ORA_HASH(1, 4294967295, 0);
SELECT ORA_HASH(1, 4294967295, 10);
SELECT ORA_HASH(1, 4294967295, 4294967295);
SELECT ORA_HASH(1, 4294967295, 4294967296);
SELECT ORA_HASH(C) FROM TEST;
select bitnot(null) vn, bitnot(0) v1, bitnot(10) v2, bitnot(-10) v3;
SELECT BITNOT('AA');
SELECT ROUND(-1.2), ROUND(-1.5), ROUND(-1.6), ROUND(2), ROUND(1.5), ROUND(1.8), ROUND(1.1);
select round(null, null) en, round(10.49, 0) e10, round(10.05, 1) e101;
select round(null) en, round(0.6, null) en2, round(1.05) e1, round(-1.51) em2;
SELECT
    ROUND(4503599627370495.0::DOUBLE), ROUND(4503599627370495.5::DOUBLE),
    ROUND(4503599627370496.0::DOUBLE), ROUND(4503599627370497.0::DOUBLE);
SELECT
    ROUND(450359962737049.50::DOUBLE, 1), ROUND(450359962737049.55::DOUBLE, 1),
    ROUND(450359962737049.60::DOUBLE, 1), ROUND(450359962737049.70::DOUBLE, 1);
SELECT ROUND(1, 10000000);
SELECT ROUND(N, -1) NN, ROUND(N) N0, ROUND(N, 1) N1, ROUND(N, 2) N2, ROUND(N, 3) N3, ROUND(N, 10000000) NL,
    ROUND(D) D0, ROUND(D, 2) D2, ROUND(D, 3) D3,
    ROUND(I) I0, ROUND(I, 1) I1, ROUND(I, I) II FROM T1;
SELECT COLUMN_NAME, DATA_TYPE, NUMERIC_PRECISION, NUMERIC_SCALE FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'T2' ORDER BY ORDINAL_POSITION;
select rand(1) e, random() f;
select rand();
select power(null, null) en, power(2, 3) e8, power(16, 0.5) e4;
SELECT POWER(10, 2) IS OF (DOUBLE);
select cot(null) vn, cot(-1) r1;
select abs(-1) r1, abs(1) r1b;
select abs(null) vn, abs(-1) r1, abs(1) r2, abs(0) r3, abs(-0.1) r4, abs(0.1) r5;
select * from table(id int=(1, 2), name varchar=('Hello', 'World')) x order by id;
SELECT I, ROTATELEFT(CAST(0x7d AS TINYINT), I) L, ROTATERIGHT(CAST(0x7d AS TINYINT), I) R
    FROM (VALUES -8, -7, -2, -1, 0, 1, 2, 7, 8) T(I) ORDER BY I;
SELECT I, ROTATELEFT(CAST(0x6d3f AS SMALLINT), I) L, ROTATERIGHT(CAST(0x6d3f AS SMALLINT), I) R
    FROM (VALUES -16, -15, -2, -1, 0, 1, 2, 15, 16) T(I) ORDER BY I;
SELECT I, ROTATELEFT(CAST(0x7d12e43c AS INTEGER), I) L, ROTATERIGHT(CAST(0x7d12e43c AS INTEGER), I) R
    FROM (VALUES -32, -31, -2, -1, 0, 1, 2, 31, 32) T(I) ORDER BY I;
SELECT I, ROTATELEFT(CAST(0x7302abe53d12e45f AS BIGINT), I) L, ROTATERIGHT(CAST(0x7302abe53d12e45f AS BIGINT), I) R
    FROM (VALUES -64, -63, -2, -1, 0, 1, 2, 63, 64) T(I) ORDER BY I;
SELECT I, ROTATELEFT(X'ABCD', I) L, ROTATERIGHT(X'ABCD', I) R
    FROM (VALUES -16, -15, -8, -1, 0, 1, 8, 15, 16) T(I) ORDER BY I;
SELECT I, ROTATELEFT(CAST(X'ABCD' AS BINARY(2)), I) L, ROTATERIGHT(CAST(X'ABCD' AS BINARY(2)), I) R
    FROM (VALUES -16, -15, -8, -1, 0, 1, 8, 15, 16) T(I) ORDER BY I;
SELECT ROTATELEFT(X'8000', 1);
SELECT ROTATERIGHT(X'0001', 1);
SELECT ROTATELEFT(X'', 1);
select atan(null) vn, atan(-1) r1;
select cos(null) vn, cos(-1) r1;
SELECT CHAR_LENGTH(CAST(RANDOM_UUID() AS VARCHAR));
SELECT RANDOM_UUID() = RANDOM_UUID();
SELECT NEWID();
SELECT SYS_GUID();
SELECT CHAR_LENGTH(CAST(NEWID() AS VARCHAR));
SELECT SYS_GUID() IS OF (RAW);
SELECT OCTET_LENGTH(SYS_GUID());
select sin(null) vn, sin(-1) r1;
select pi();
select sign(null) en, sign(10) e1, sign(0) e0, sign(-0.1) em1;
SELECT SIGN(INTERVAL '-0-1' YEAR TO MONTH) A, SIGN(INTERVAL '0' DAY) B, SIGN(INTERVAL '1' HOUR) C;
SELECT JSON_ARRAY(10, TRUE, 'str', NULL, '[1,2,3]' FORMAT JSON);
SELECT JSON_ARRAY(10, TRUE, 'str', NULL, '[1,2,3]' FORMAT JSON ABSENT ON NULL);
SELECT JSON_ARRAY(10, TRUE, 'str', NULL, '[1,2,3]' FORMAT JSON NULL ON NULL);
SELECT JSON_ARRAY();
SELECT JSON_ARRAY(NULL ON NULL);
SELECT JSON_ARRAY(NULL ABSENT ON NULL);
SELECT JSON_ARRAY(NULL NULL ON NULL);
SELECT JSON_ARRAY((SELECT V FROM TEST ORDER BY ID));
SELECT JSON_ARRAY((SELECT V FROM TEST ORDER BY ID) ABSENT ON NULL);
SELECT JSON_ARRAY((SELECT V FROM TEST ORDER BY ID) NULL ON NULL);
SELECT JSON_ARRAY((SELECT V FROM TEST ORDER BY ID) FORMAT JSON);
SELECT JSON_OBJECT('key1' : 10, 'key2' VALUE TRUE, KEY 'key3' VALUE 'str', 'key4' : NULL, 'key5' : '[1,2,3]' FORMAT JSON);
SELECT JSON_OBJECT('key1' : NULL ABSENT ON NULL);
SELECT JSON_OBJECT('key1' : NULL NULL ON NULL);
SELECT JSON_OBJECT();
SELECT JSON_OBJECT(NULL ON NULL);
SELECT JSON_OBJECT(WITHOUT UNIQUE KEYS);
SELECT JSON_OBJECT('key1' : NULL, 'key1' : 2 NULL ON NULL WITHOUT UNIQUE KEYS);
SELECT JSON_OBJECT('key1' : 1, 'key1' : 2 WITH UNIQUE KEYS);
SELECT JSON_OBJECT('key1' : 1, 'key1' : 2 NULL ON NULL WITH UNIQUE KEYS);
SELECT JSON_OBJECT('key1' : TRUE WITH UNIQUE KEYS);
error SELECT JSON_OBJECT(NULL : 1);
error SELECT JSON_OBJECT(NULL ON NULL WITHOUT);
SELECT *,
    LEAD("VALUE") OVER (ORDER BY ID) LD,
    LEAD("VALUE") RESPECT NULLS OVER (ORDER BY ID) LD_N,
    LEAD("VALUE") IGNORE NULLS OVER (ORDER BY ID) LD_NN,
    LAG("VALUE") OVER (ORDER BY ID) LG,
    LAG("VALUE") RESPECT NULLS OVER (ORDER BY ID) LG_N,
    LAG("VALUE") IGNORE NULLS OVER (ORDER BY ID) LG_NN
    FROM TEST;
SELECT *,
    LEAD("VALUE", 1) OVER (ORDER BY ID) LD,
    LEAD("VALUE", 1) RESPECT NULLS OVER (ORDER BY ID) LD_N,
    LEAD("VALUE", 1) IGNORE NULLS OVER (ORDER BY ID) LD_NN,
    LAG("VALUE", 1) OVER (ORDER BY ID) LG,
    LAG("VALUE", 1) RESPECT NULLS OVER (ORDER BY ID) LG_N,
    LAG("VALUE", 1) IGNORE NULLS OVER (ORDER BY ID) LG_NN
    FROM TEST;
SELECT *,
    LEAD("VALUE", 0) OVER (ORDER BY ID) LD,
    LEAD("VALUE", 0) RESPECT NULLS OVER (ORDER BY ID) LD_N,
    LEAD("VALUE", 0) IGNORE NULLS OVER (ORDER BY ID) LD_NN,
    LAG("VALUE", 0) OVER (ORDER BY ID) LG,
    LAG("VALUE", 0) RESPECT NULLS OVER (ORDER BY ID) LG_N,
    LAG("VALUE", 0) IGNORE NULLS OVER (ORDER BY ID) LG_NN
    FROM TEST;
SELECT *,
    LEAD("VALUE", 2) OVER (ORDER BY ID) LD,
    LEAD("VALUE", 2) RESPECT NULLS OVER (ORDER BY ID) LD_N,
    LEAD("VALUE", 2) IGNORE NULLS OVER (ORDER BY ID) LD_NN,
    LAG("VALUE", 2) OVER (ORDER BY ID) LG,
    LAG("VALUE", 2) RESPECT NULLS OVER (ORDER BY ID) LG_N,
    LAG("VALUE", 2) IGNORE NULLS OVER (ORDER BY ID) LG_NN
    FROM TEST;
SELECT *,
    LEAD("VALUE", 2, 1111.0) OVER (ORDER BY ID) LD,
    LEAD("VALUE", 2, 1111.0) RESPECT NULLS OVER (ORDER BY ID) LD_N,
    LEAD("VALUE", 2, 1111.0) IGNORE NULLS OVER (ORDER BY ID) LD_NN,
    LAG("VALUE", 2, 1111.0) OVER (ORDER BY ID) LG,
    LAG("VALUE", 2, 1111.0) RESPECT NULLS OVER (ORDER BY ID) LG_N,
    LAG("VALUE", 2, 1111.0) IGNORE NULLS OVER (ORDER BY ID) LG_NN
    FROM TEST;
SELECT LEAD("VALUE", -1) OVER (ORDER BY ID) FROM TEST;
SELECT LAG("VALUE", -1) OVER (ORDER BY ID) FROM TEST;
SELECT LEAD("VALUE") OVER () FROM TEST;
SELECT LAG("VALUE") OVER () FROM TEST;
SELECT LEAD("VALUE") OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT LAG("VALUE") OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT C, SUM(I) S, LEAD(SUM(I)) OVER (ORDER BY SUM(I)) L FROM
    VALUES (1, 1), (2, 1), (4, 2), (8, 2) T(I, C) GROUP BY C;
SELECT LEAD(X) OVER (ORDER BY 'a') FROM TEST;
SELECT LAG(X) OVER (ORDER BY 'a') FROM TEST;
SELECT ID, N, RATIO_TO_REPORT(N) OVER() R2R FROM TEST;
SELECT ID, N, RATIO_TO_REPORT(N) OVER() R2R FROM TEST;
SELECT RATIO_TO_REPORT(N) OVER (ORDER BY N) FROM TEST;
SELECT NTILE(1) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(3) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(1) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 2));
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 2)) ORDER BY X;
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 3)) ORDER BY X;
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 4)) ORDER BY X;
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 5)) ORDER BY X;
SELECT NTILE(2) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 6)) ORDER BY X;
SELECT NTILE(10) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 3)) ORDER BY X;
SELECT NTILE(10) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 22)) ORDER BY X;
SELECT NTILE(0) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(X) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 6)) ORDER BY X;
SELECT NTILE(X) OVER () FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(X) OVER (ORDER BY X RANGE CURRENT ROW) FROM (SELECT * FROM SYSTEM_RANGE(1, 1));
SELECT NTILE(100000000000) OVER (ORDER BY X) FROM (SELECT * FROM SYSTEM_RANGE(1, 4));
SELECT *,
    ROW_NUMBER() OVER () RN,
    ROUND(PERCENT_RANK() OVER (), 2) PR,
    ROUND(CUME_DIST() OVER (), 2) CD,
    ROW_NUMBER() OVER (ORDER BY ID) RNO,
    RANK() OVER (ORDER BY ID) RKO,
    DENSE_RANK() OVER (ORDER BY ID) DRO,
    ROUND(PERCENT_RANK() OVER (ORDER BY ID), 2) PRO,
    ROUND(CUME_DIST() OVER (ORDER BY ID), 2) CDO
    FROM TEST;
SELECT *,
    ROW_NUMBER() OVER (ORDER BY CATEGORY) RN,
    RANK() OVER (ORDER BY CATEGORY) RK,
    DENSE_RANK() OVER (ORDER BY CATEGORY) DR,
    ROUND(PERCENT_RANK() OVER (ORDER BY CATEGORY), 2) PR,
    ROUND(CUME_DIST() OVER (ORDER BY CATEGORY), 2) CD
    FROM TEST;
SELECT *,
    ROW_NUMBER() OVER (PARTITION BY CATEGORY ORDER BY ID) RN,
    RANK() OVER (PARTITION BY CATEGORY ORDER BY ID) RK,
    DENSE_RANK() OVER (PARTITION BY CATEGORY ORDER BY ID) DR,
    ROUND(PERCENT_RANK() OVER (PARTITION BY CATEGORY ORDER BY ID), 2) PR,
    ROUND(CUME_DIST() OVER (PARTITION BY CATEGORY ORDER BY ID), 2) CD
    FROM TEST;
SELECT *,
    ROW_NUMBER() OVER W RN,
    RANK() OVER W RK,
    DENSE_RANK() OVER W DR,
    ROUND(PERCENT_RANK() OVER W, 2) PR,
    ROUND(CUME_DIST() OVER W, 2) CD
    FROM TEST WINDOW W AS (PARTITION BY CATEGORY ORDER BY ID) QUALIFY ROW_NUMBER() OVER W = 2;
SELECT *,
    ROW_NUMBER() OVER (PARTITION BY CATEGORY ORDER BY ID) RN,
    RANK() OVER (PARTITION BY CATEGORY ORDER BY ID) RK,
    DENSE_RANK() OVER (PARTITION BY CATEGORY ORDER BY ID) DR,
    ROUND(PERCENT_RANK() OVER (PARTITION BY CATEGORY ORDER BY ID), 2) PR,
    ROUND(CUME_DIST() OVER (PARTITION BY CATEGORY ORDER BY ID), 2) CD
    FROM TEST QUALIFY RN = 3;
SELECT
    ROW_NUMBER() OVER (ORDER BY CATEGORY) RN,
    RANK() OVER (ORDER BY CATEGORY) RK,
    DENSE_RANK() OVER (ORDER BY CATEGORY) DR,
    PERCENT_RANK() OVER () PR,
    CUME_DIST() OVER () CD,
    CATEGORY C
    FROM TEST GROUP BY CATEGORY ORDER BY RN;
SELECT RANK() OVER () FROM TEST;
SELECT DENSE_RANK() OVER () FROM TEST;
SELECT ROW_NUMBER() OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT RANK() OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT DENSE_RANK() OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT PERCENT_RANK() OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT CUME_DIST() OVER (ORDER BY ID RANGE CURRENT ROW) FROM TEST;
SELECT ROW_NUMBER() OVER (ORDER BY TYPE) RN, TYPE, SUM(CNT) SUM FROM TEST GROUP BY TYPE;
SELECT A, B, C, ROW_NUMBER() OVER (PARTITION BY A, B) N FROM
    VALUES (1, 1, 1), (1, 1, 2), (1, 2, 3), (2, 1, 4) T(A, B, C);
SELECT RANK () OVER () FROM TEST;
SELECT DENSE_RANK () OVER () FROM TEST;
SELECT ROW_NUMBER() OVER () FROM VALUES (1);
SELECT RANK() OVER (ORDER BY 'a') FROM TEST;
SELECT DENSE_RANK() OVER (ORDER BY 'a') FROM TEST;
SELECT PERCENT_RANK() OVER (ORDER BY 'a') FROM TEST;
SELECT CUME_DIST() OVER (ORDER BY 'a') FROM TEST;
SELECT FIRST_VALUE(1) OVER (PARTITION BY ID);
SELECT FIRST_VALUE(1) OVER (ORDER BY ID);
SELECT *,
    FIRST_VALUE("VALUE") OVER (ORDER BY ID) FIRST,
    FIRST_VALUE("VALUE") RESPECT NULLS OVER (ORDER BY ID) FIRST_N,
    FIRST_VALUE("VALUE") IGNORE NULLS OVER (ORDER BY ID) FIRST_NN,
    LAST_VALUE("VALUE") OVER (ORDER BY ID) LAST,
    LAST_VALUE("VALUE") RESPECT NULLS OVER (ORDER BY ID) LAST_N,
    LAST_VALUE("VALUE") IGNORE NULLS OVER (ORDER BY ID) LAST_NN
    FROM TEST FETCH FIRST 6 ROWS ONLY;
SELECT *,
    FIRST_VALUE("VALUE") OVER (ORDER BY ID) FIRST,
    FIRST_VALUE("VALUE") RESPECT NULLS OVER (ORDER BY ID) FIRST_N,
    FIRST_VALUE("VALUE") IGNORE NULLS OVER (ORDER BY ID) FIRST_NN,
    LAST_VALUE("VALUE") OVER (ORDER BY ID) LAST,
    LAST_VALUE("VALUE") RESPECT NULLS OVER (ORDER BY ID) LAST_N,
    LAST_VALUE("VALUE") IGNORE NULLS OVER (ORDER BY ID) LAST_NN
    FROM TEST WHERE ID > 1 FETCH FIRST 3 ROWS ONLY;
SELECT *,
    NTH_VALUE("VALUE", 2) OVER (ORDER BY ID) NTH,
    NTH_VALUE("VALUE", 2) FROM FIRST OVER (ORDER BY ID) NTH_FF,
    NTH_VALUE("VALUE", 2) FROM LAST OVER (ORDER BY ID) NTH_FL,
    NTH_VALUE("VALUE", 2) RESPECT NULLS OVER (ORDER BY ID) NTH_N,
    NTH_VALUE("VALUE", 2) FROM FIRST RESPECT NULLS OVER (ORDER BY ID) NTH_FF_N,
    NTH_VALUE("VALUE", 2) FROM LAST RESPECT NULLS OVER (ORDER BY ID) NTH_FL_N,
    NTH_VALUE("VALUE", 2) IGNORE NULLS OVER (ORDER BY ID) NTH_NN,
    NTH_VALUE("VALUE", 2) FROM FIRST IGNORE NULLS OVER (ORDER BY ID) NTH_FF_NN,
    NTH_VALUE("VALUE", 2) FROM LAST IGNORE NULLS OVER (ORDER BY ID) NTH_FL_NN
    FROM TEST FETCH FIRST 6 ROWS ONLY;
SELECT *,
    NTH_VALUE("VALUE", 2) OVER(ORDER BY ID) F,
    NTH_VALUE("VALUE", 2) OVER(ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) F_U_C,
    NTH_VALUE("VALUE", 2) OVER(ORDER BY ID RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) F_C_U,
    NTH_VALUE("VALUE", 2) OVER(ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) F_U_U,
    NTH_VALUE("VALUE", 2) FROM LAST OVER(ORDER BY ID) L,
    NTH_VALUE("VALUE", 2) FROM LAST OVER(ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) L_U_C,
    NTH_VALUE("VALUE", 2) FROM LAST OVER(ORDER BY ID RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) L_C_U,
    NTH_VALUE("VALUE", 2) FROM LAST OVER(ORDER BY ID RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) L_U_U
    FROM TEST ORDER BY ID;
SELECT NTH_VALUE("VALUE", 0) OVER (ORDER BY ID) FROM TEST;
SELECT *,
    FIRST_VALUE("VALUE") OVER (PARTITION BY CATEGORY ORDER BY ID) FIRST,
    LAST_VALUE("VALUE") OVER (PARTITION BY CATEGORY ORDER BY ID) LAST,
    NTH_VALUE("VALUE", 2) OVER (PARTITION BY CATEGORY ORDER BY ID) NTH
    FROM TEST ORDER BY ID;
SELECT ID, CATEGORY,
    NTH_VALUE(CATEGORY, 2) OVER (ORDER BY CATEGORY ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) C,
    NTH_VALUE(CATEGORY, 2) OVER (ORDER BY CATEGORY ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW)
    FROM TEST FETCH FIRST 3 ROWS ONLY;
SELECT ID, CATEGORY,
    NTH_VALUE(CATEGORY, 2) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) C2,
    NTH_VALUE(CATEGORY, 3) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) C3,
    NTH_VALUE(CATEGORY, 2) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW)
    FROM TEST OFFSET 10 ROWS;
SELECT ID, CATEGORY,
    NTH_VALUE(CATEGORY, 2) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) C
    FROM TEST OFFSET 10 ROWS;
SELECT ID, CATEGORY,
    NTH_VALUE(CATEGORY, 1) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) F1,
    NTH_VALUE(CATEGORY, 2) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) F2,
    NTH_VALUE(CATEGORY, 5) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) F5,
    NTH_VALUE(CATEGORY, 5) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) L5,
    NTH_VALUE(CATEGORY, 2) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) L2,
    NTH_VALUE(CATEGORY, 1) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) L1
    FROM TEST ORDER BY ID;
SELECT ID, CATEGORY,
    NTH_VALUE(CATEGORY, 1) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) F1,
    NTH_VALUE(CATEGORY, 2) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) F2,
    NTH_VALUE(CATEGORY, 5) OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) F5,
    NTH_VALUE(CATEGORY, 5) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) L5,
    NTH_VALUE(CATEGORY, 2) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) L2,
    NTH_VALUE(CATEGORY, 1) FROM LAST OVER (ORDER BY CATEGORY RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE TIES) L1
    FROM TEST ORDER BY ID;
SELECT ID, CATEGORY,
    FIRST_VALUE(ID) OVER (ORDER BY ID ROWS BETWEEN CATEGORY FOLLOWING AND UNBOUNDED FOLLOWING) F,
    LAST_VALUE(ID) OVER (ORDER BY ID ROWS BETWEEN CURRENT ROW AND CATEGORY FOLLOWING) L,
    NTH_VALUE(ID, 2) OVER (ORDER BY ID ROWS BETWEEN CATEGORY FOLLOWING AND UNBOUNDED FOLLOWING) N
    FROM TEST ORDER BY ID;
SELECT I, X, LAST_VALUE(I) OVER (ORDER BY X) L FROM VALUES (1, 1), (2, 1), (3, 2), (4, 2), (5, 3) V(I, X);
SELECT A, MAX(B) M, FIRST_VALUE(A) OVER (ORDER BY A ROWS BETWEEN MAX(B) - 1 FOLLOWING AND UNBOUNDED FOLLOWING) F
    FROM VALUES (1, 1), (1, 1), (2, 1), (2, 2), (3, 1) V(A, B)
    GROUP BY A;
select left(null, 10) en, left('abc', null) en2, left('boat', 2) e_bo, left('', 1) ee, left('a', -1) ee2;
SELECT XMLTEXT('hello' || chr(10) || 'world');
select replace(null, null) en, replace(null, null, null) en1;
select replace('abchihihi', 'i', 'o') abcehohoho, replace('that is tom', 'i') abcethstom;
select replace('white space', ' ', '') x, replace('white space', ' ', null) y from dual;
select concat(null, null) en, concat(null, 'a') ea, concat('b', null) eb, concat('ab', 'c') abc;
SELECT CONCAT('a', 'b', 'c', 'd');
select regexp_replace('Sylvain', 'S..', 'TOTO', 'mni');
select regexp_replace('.1.2.3.4', '[^0-9]', '', 1, 0);
select regexp_replace('.1.2.3.4', '[^0-9]', '', 1, 1);
select regexp_replace('.1.2.3.4', '[^0-9]', '', 1, 2);
select regexp_replace('.1.2.3.4', '[^0-9]', '', 3, 2);
select regexp_replace('', '[^0-9]', '', 3, 2);
select regexp_replace('ababab', '', '', 3, 2);
select regexp_replace('ababab', '', '', 3, 2, '');
select regexp_replace('first last', '(\w+) (\w+)', '\2 \1');
select regexp_replace('first last', '(\w+) (\w+)', '\\2 \1');
select regexp_replace('first last', '(\w+) (\w+)', '\$2 \1');
select regexp_replace('first last', '(\w+) (\w+)', '$2 $1');
select regexp_replace('first last', '(\w+) (\w+)', '\2 \1');
select regexp_replace('first last', '(\w+) (\w+)', '$2 $1');
select regexp_replace('AbcDef', '[^a-z]', '', 'g');
select regexp_replace('First and Second', '[A-Z]', '');
select regexp_replace('AbcDef', '[^a-z]', '', 'g');
select regexp_replace('AbcDef123', '[a-z]', '!', 'gi');
select regexp_replace('First Only', '[A-Z]', '');
select ascii(null) en, ascii('') en, ascii('Abc') e65;
select char(null) en, char(65) ea;
select locate(null, null) en, locate(null, null, null) en1;
select locate('World', 'Hello World') e7, locate('hi', 'abchihihi', 2) e3;
SELECT CHARINDEX('test', 'test');
select charindex('World', 'Hello World') e7, charindex('hi', 'abchihihi', 2) e3;
select instr('Hello World', 'World') e7, instr('abchihihi', 'hi', 2) e3, instr('abcooo', 'o') e2;
select position(null, null) en, position(null, 'abc') en1, position('World', 'Hello World') e7, position('hi', 'abchihihi') e1;
select length(null) en, length('This has 17 chars') e_17;
SELECT LEN(NULL);
select len(null) en, len('MSSQLServer uses the len keyword') e_32;
SELECT LEN('A ');
SELECT LEN(CAST('A ' AS CHAR(2)));
select soundex(null) en, soundex('tom') et;
select
soundex('Washington') W252, soundex('Lee') L000,
soundex('Gutierrez') G362, soundex('Pfister') P236,
soundex('Jackson') J250, soundex('Tymczak') T522,
soundex('VanDeusen') V532, soundex('Ashcraft') A261;
select array_to_string(array[null, 0, 1, null, 2], ',');
select array_to_string(array['a', null, '', 'b', null], ',', null);
select array_to_string(array[null, 0, 1, null, 2], ',', '*');
select array_to_string(array['a', null, '', 'b', null], ',', '*');
select array_to_string(array[1, null, 3], 0, 2);
select array_to_string(null, 0, 2);
select array_to_string(array[1, null, 3], null, 2);
select array_to_string(0, ',');
SELECT XMLNODE('p', null, 'Hello' || chr(10) || 'World');
SELECT XMLNODE('p', null, 'Hello' || chr(10) || 'World', false);
select right(null, 10) en, right('abc', null) en2, right('boat-trip', 2) e_ip, right('', 1) ee, right('a', -1) ee2;
SELECT RAWTOHEX('Az');
SELECT RAWTOHEX(X'12fe');
SELECT RAWTOHEX('12345678-9abc-def0-0123-456789abcdef'::UUID);
select insert(null, null, null, null) en, insert('Rund', 1, 0, 'o') e_round, insert(null, 1, 1, 'a') ea;
select insert('World', 2, 4, 'e') welt, insert('Hello', 2, 1, 'a') hallo;
SELECT INSERT(NULL, 0, 0, NULL);
select ucase(null) en, ucase('Hello') hello, ucase('ABC') abc;
select upper(null) en, upper('Hello') hello, upper('ABC') abc;
SELECT STRINGDECODE('\7');
SELECT STRINGDECODE('\17');
SELECT STRINGDECODE('\117');
SELECT STRINGDECODE('\178');
SELECT STRINGDECODE('\u111');
SELECT STRINGDECODE('\u0057');
select difference(null, null) en, difference('a', null) en1, difference(null, 'a') en2;
select difference('abc', 'abc') e0, difference('Thomas', 'Tom') e1;
SELECT QUOTE_IDENT(NULL);
SELECT QUOTE_IDENT('');
SELECT QUOTE_IDENT('a');
SELECT QUOTE_IDENT('"a""A"');
select hextoraw(null) en, rawtohex(null) en1, hextoraw(rawtohex('abc')) abc;
SELECT HEXTORAW('0049');
SELECT HEXTORAW('0049') IS OF (RAW);
select lpad('string', 10, '+');
select space(null) en, '>' || space(1) || '<' es, '>' || space(3) || '<' e2;
select rtrim(null) en, '>' || rtrim('a') || '<' ea, '>' || rtrim(' a ') || '<' es;
select rtrim() from dual;
select ltrim(null) en, '>' || ltrim('a') || '<' ea, '>' || ltrim(' a ') || '<' e_as;
select lower(null) en, lower('Hello') hello, lower('ABC') abc;
select lcase(null) en, lcase('Hello') hello, lcase('ABC') abc;
select substr(null, null) en, substr(null, null, null) e1, substr('bob', 2) e_ob, substr('bob', 2, 1) eo;
select substring(null, null) en, substring(null, null, null) e1, substring('bob', 2) e_ob, substring('bob', 2, 1) eo;
select substring(null from null) en, substring(null from null for null) e1, substring('bob' from 2) e_ob, substring('bob' from 2 for 1) eo;
select substr('[Hello]', 2, 5);
select substr('Hello World', -5);
SELECT SUBSTRING('X', 0, 1);
SELECT SUBSTRING('AAA' FROM 4 FOR 1);
SELECT SUBSTRING(X'001122' FROM 1 FOR 3);
SELECT SUBSTRING(X'001122' FROM 1 FOR 2);
SELECT SUBSTRING(X'001122' FROM 2 FOR 2);
SELECT SUBSTRING(X'001122' FROM 4 FOR 1);
SELECT SUBSTRING(X'001122' FROM 2 FOR 1);
SELECT SUBSTRING(X'00', 0, 1);
SELECT STRINGENCODE(STRINGDECODE('abcsond\344rzeich\344 ') || char(22222) || STRINGDECODE(' \366\344\374\326\304\334\351\350\340\361!'));
SELECT TRANSLATE(txt1, 'p', 'r') FROM testTranslate ORDER BY id;
SELECT TRANSLATE(txt1, 'r', 'p') FROM testTranslate WHERE txt1 = 'caps';
SELECT TRANSLATE(NULL, NULL, NULL);
SELECT CONCAT_WS(NULL, NULL, 'a', NULL, 'b', NULL);
SELECT CONCAT_WS('*', NULL, 'a', NULL, 'b', NULL);
SELECT CONCAT_WS('*', '', 'a', NULL, 'b', NULL);
SELECT '[' || CONCAT_WS('a', NULL, NULL) || ']';
select repeat(null, null) en, repeat('Ho', 2) abcehoho , repeat('abc', 0) ee;
SELECT TRIM(BOTH '_' FROM A), '|' || TRIM(LEADING FROM B) || '|', TRIM(TRAILING 'x' FROM C) FROM TEST;
SELECT LENGTH(TRIM(B)), LENGTH(TRIM(FROM B)) FROM TEST;
SELECT TRIM(BOTH B) FROM TEST;
select TRIM(' ' FROM '  abc   ') from dual;
select rpad('string', 10, '+');
SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS LIMIT 0;
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, IS_DEFERRABLE, INITIALLY_DEFERRED FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    WHERE CONSTRAINT_CATALOG = DATABASE() AND CONSTRAINT_SCHEMA = SCHEMA() AND TABLE_CATALOG = DATABASE() AND TABLE_SCHEMA = SCHEMA()
    ORDER BY TABLE_NAME, CONSTRAINT_NAME;
SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE LIMIT 0;
SELECT CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, POSITION_IN_UNIQUE_CONSTRAINT FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE CONSTRAINT_CATALOG = DATABASE() AND CONSTRAINT_SCHEMA = SCHEMA() AND TABLE_CATALOG = DATABASE() AND TABLE_SCHEMA = SCHEMA()
    ORDER BY TABLE_NAME, CONSTRAINT_NAME, ORDINAL_POSITION;
SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS LIMIT 0;
SELECT CONSTRAINT_NAME, UNIQUE_CONSTRAINT_NAME, MATCH_OPTION, UPDATE_RULE, DELETE_RULE FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_CATALOG = DATABASE() AND CONSTRAINT_SCHEMA = SCHEMA() AND UNIQUE_CONSTRAINT_CATALOG = DATABASE() AND UNIQUE_CONSTRAINT_SCHEMA = SCHEMA()
    ORDER BY CONSTRAINT_NAME, UNIQUE_CONSTRAINT_NAME;
SELECT U1.TABLE_NAME T1, U1.COLUMN_NAME C1, U2.TABLE_NAME T2, U2.COLUMN_NAME C2
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE U1 JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC ON U1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE U2 ON RC.UNIQUE_CONSTRAINT_NAME = U2.CONSTRAINT_NAME AND U1.POSITION_IN_UNIQUE_CONSTRAINT = U2.ORDINAL_POSITION
    WHERE U1.CONSTRAINT_NAME = 'FK_2' ORDER BY U1.COLUMN_NAME;
SELECT ENFORCED FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY';
SELECT ENFORCED FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY';
SELECT ENFORCED FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY';
SELECT ENFORCED FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY';
SELECT TABLE_NAME, ROW_COUNT_ESTIMATE FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'INFORMATION_SCHEMA'
    AND TABLE_NAME IN ('INFORMATION_SCHEMA_CATALOG_NAME', 'SCHEMATA', 'ROLES', 'SESSIONS', 'IN_DOUBT', 'USERS');

