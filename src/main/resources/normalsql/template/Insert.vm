## Copyright 2010-2022 Jason Osgood
## SPDX-License-Identifier: Apache-2.0

## Main's INSERT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## fields - fields found in source SQL as List<normalsql.meta.Field>
## date - Main's timestamp

/**

${className}.java   ${date}
  
Generated by NormalSQL's using Insert.vm template. Original SQL:
    
#foreach( $line in $originallines )
$line
#end

@see ${originalfile}
  
**/

package ${packageName};

import java.sql.*;
import javax.sql.DataSource;
import java.math.BigDecimal;

public class 
	${className}
{
	// TODO: Auto detect if row has key/identity field
	
	public final int execute( Connection connection )
		throws SQLException
	{
		String sql = getSQL();
		PreparedStatement ps = connection.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS );
		
#set( $nth = 0 )
#foreach( $field in $fields )
##
#set( $method = $field.getTypedMethod() )
#set( $nth = $nth + 1 )
		ps.set${method}( ${nth}, get${field.NameAsMethod}() );
##
#end

		int rows = ps.executeUpdate();
		if( rows > 0 )
		{
			ResultSet keys = ps.getGeneratedKeys();
			if( keys.next() )
			{
				__identity = keys.getInt( 1 );
			}
		}
		ps.close();
		return rows;
	}

	/**
		Pass a DataSource, a Connection instance is created, call its close() method when done. 
	**/
	public final int execute( DataSource dataSource )
		throws SQLException
	{
		Connection connection = dataSource.getConnection();
		int rows = execute( connection );
		connection.close();
		return rows;
	}

	private long __identity = 0L;

	public long getIdentity()
	{
		return __identity;
	}
	
#foreach( $field in $fields )
	private ${field.JavaType} _${field.NameAsVariable} = ${field.InitializerValue};
#end

#foreach( $field in $fields )
	public void set${field.NameAsMethod}( ${field.JavaType} ${field.NameAsVariable} )
	{
		_${field.NameAsVariable} = ${field.NameAsVariable};
	}
	
	public ${field.JavaType} get${field.NameAsMethod}()
	{
		return _${field.NameAsVariable};
	}	

#end
	
	private static String __sql = null;

	public String getSQL()
	{
		if( __sql == null )
		{
			StringBuilder sb = new StringBuilder();
#foreach( $line in $sql )
			sb.append( "$line" );
			sb.append( '\n' );
#end
			__sql = sb.toString();
		}
		return __sql;
	}

	public String toString()
	{
		String result = getSQL();
#foreach( $field in $fields )
		result = result.replaceFirst( "\\?", quotifyString( get${field.NameAsMethod}() ));
#end
		return result;
	}
	
	private String quotifyString( Object value )
	{
		if( value instanceof String )
		{
			return "'" + value.toString() + "'";
		}
		else
		{
			return value.toString();
		}
	}
}
