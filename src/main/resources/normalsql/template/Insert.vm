## Copyright 2010-2023 Jason Osgood
## SPDX-License-Identifier: Apache-2.0

## NormalSQL - INSERT Statement Template for Java & JDBC
##
## Copyright 2023, 2022, 2014, 2011, 2010 Jason Osgood
##
## Template Parameters:
##
##     esc - EscapeTool
##     date - current timestamp
##     packageName - target Java package name as String
##     statementClassName - target Java class name for PreparedStatement wrapper as String
##     resultSetClassName - target Java class name for ResultSet wrapper as String
##     sourceFile - name of original .sql file
##     originalSQL - original unparsed SQL
##     preparedSQL - prepared statement version of originalSQL
##     printfSQL - printf version of originalSQL, for debugging
##     properties - List<Property>, meta data for getters and setters
/**
* ${statementClassName}.java ${date}
*
## TODO put actual filename and its timestamp here.
* Generated using NormalSQL's Insert.vm template.
*
* Original SQL:
*
## TODO: Should this be a JavaDoc @snippet?
* <pre>
* {@code
#foreach( $line in $originalSQL.split('\n') )
* $line
#end
* }
* </pre>
*
## TODO add timestamp
* @see ${sourceFile}
*
**/

#if( $packageName )
package ${packageName};
#end

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.math.BigDecimal;

public class
	${statementClassName}
{
	private final PreparedStatement __ps;

	public final String __preparedSQL =
## add back each '\n', then concat each line with '+', then end with ';'
		#foreach( $line in $preparedSQL.split('\n') )
		"${esc.java($line)}#if($foreach.hasNext)\n" + #else"; #end
		#end

	public final String __printfSQL =
## add back each '\n' (as %n), then concat each line with '+', then end with ';'
		#foreach( $line in $printfSQL.split('\n') )
		"${esc.java($line)}#if($foreach.hasNext)\n" + #else"; #end
		#end

	/**
		Pass a Connection. You are responsible for closing that Connection.
		${statementClassName} is a wrapper for a PreparedStatement, not a Connection.
	**/
	public ${statementClassName}( Connection connection )
		throws SQLException
	{
		__ps = connection.prepareStatement( __preparedSQL );
	}

	public ${statementClassName}( Connection connection, int autoGeneratedKeys )
		throws SQLException
	{
		__ps = connection.prepareStatement( __preparedSQL, autoGeneratedKeys );
	}

	/**
		Pass a DataSource. You are responsible for closing that DataSource.
		${statementClassName} is a wrapper for a PreparedStatement, not a Connection.
	**/
	public ${statementClassName}( DataSource dataSource )
		throws SQLException
	{
		this( dataSource.getConnection() );
	}

	public ${statementClassName}( DataSource dataSource, int autoGeneratedKeys )
		throws SQLException
	{
		this( dataSource.getConnection(), autoGeneratedKeys );
	}

	/**
	 * Returns ResultSet of generated keys. @see java.sql.Statement#getGeneratedKeys()
	 */
	public final ResultSet execute()
		throws SQLException
	{
        #foreach( $p in $properties )
        __ps.setObject( ${p.nth}, ${p.getter}() );
        #end

		__ps.execute();
		ResultSet rs = __ps.getGeneratedKeys();
        return rs;
    }

	// TODO add null check to setters (when !isnullable)
    #foreach( $p in $properties )
    private ${p.className} _${p.variable} = ${p.asCode};
    public void ${p.setter}( ${p.className} ${p.variable} ) { _${p.variable} = ${p.variable}; }
    public ${p.className} ${p.getter}() { return _${p.variable}; }

    #end

	public String toString()
	{
		return String.format( __printfSQL
            #foreach( $p in $properties )
            , ${p.getter}()
            #end
		);
	}
}
