## Copyright 2010-2022 Jason Osgood
## SPDX-License-Identifier: Apache-2.0

## NormalSQL - ResultSet Template for Java & JDBC
## 
## Template Parameters:
##
##     date - current timestamp
##     packageName - target Java package name as String
##     resultSetClassName - target Java class name for ResultSet wrapper as String
##     sourceFile - name of original .sql file
##     originalSQL - original unparsed SQL
##     columns - List<Column>, meta data for getters and setters
/**
* ${resultSetClassName}.java
* ${date}
*
* Generated using NormalSQL's ResultSet.vm template.
*
* @see ${sourceFile}
*
**/

#if( $packageName )
package ${packageName};
#end

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.math.BigDecimal;

public class 
	${resultSetClassName}
{
	public ${resultSetClassName}( ResultSet resultSet )
	{
		__resultSet = resultSet;
	}

	private ResultSet __resultSet;

	public final ResultSet getResultSet()
	{
		return __resultSet;
	}

	public boolean hasResultSet()
	{
		return __resultSet != null;
	}

	private Connection __connection = null;

	public void setConnection( Connection connection )
	{
		__connection = connection;
	}

	public Connection getConnection()
	{
		return __connection;
	}

	/**
		Closes the contained ResultSet instance. Also closes contained Connection instance
		created via a DataSource connection factory.
	**/
	public void close()
		throws SQLException
	{
		if( __resultSet != null && !__resultSet.isClosed() )
		{
			__resultSet.close();
			__resultSet = null;
		}
		if( __connection != null && !__connection.isClosed() )
		{
			__connection.close();
			__connection = null;
		}
	}

	private int __row = 0;

	public int getRow() { return __row; }

	public final boolean hasNext()
		throws SQLException
	{
		ResultSet rs = getResultSet();
		if( rs == null ) return false;
		boolean	success = rs.next();
		if( success )
		{
			__row = rs.getRow();
			#foreach( $c in $columns )
			_${c.variable} = ( ${c.className} ) rs.getObject( ${c.nth} );
			#if( $c.isNullable )
			_${c.variable}_wasNull = !rs.wasNull();
			#end
			#end
		}
		return success;
	}

	/**
     *  Attempt to count this ResultSet's number of rows.
     *  @return number of rows. Or -1 if ResultSet's scroll type is TYPE_FORWARD_ONLY
     *  or if any exception occurs.
     */
	public int countRows()
	{
		int result = -1;
		try
		{
			ResultSet rs = getResultSet();
			if( rs.getType() != ResultSet.TYPE_FORWARD_ONLY )
			{
				int current = rs.getRow();
				if( rs.last() )
				{
					result = rs.getRow();
					if( current == 0 )
					{
						rs.beforeFirst();
					}
					else
					{
						rs.absolute( current );
					}
				}
			}
		}
		catch( SQLException e )
		{
			e.printStackTrace();
		}
		return result;
	}

	// TODO this sucks. convert to boxed for nullable, unboxed otherwise
	#foreach( $c in $columns )
##	private ${c.className} _${c.variable} = ${c.initial};
	private ${c.className} _${c.variable};
	/** column "${c.original}" **/
	public ${c.className} ${c.getter}() { return _${c.variable}; }
	#if( $c.isNullable )
	private boolean _${c.variable}_wasNull = false;
	/** returns true if column "${c.original}" was NULL **/
	public boolean ${c.getter}WasNull() { return _${c.variable}_wasNull; }
	#end

	#end

	// TODO switch from StringBuilder to printf
	public String toString()
	{
		if( getResultSet() == null )
		{
			return "No results";
		}
		if( getRow() == 0 )
		{
			return "No current row";
		}
		StringBuilder sb = new StringBuilder();
		sb.append( "#row: " );
		sb.append( getRow() );
		sb.append( ", " );
		#foreach( $c in $columns )
		sb.append( "${c.variable}: " );
		sb.append( ${c.getter}() );
##		sb.append( ${c.getter}WasNull() ? null : ${c.getter}() );
		#if($foreach.hasNext)
		sb.append( ", " );
		#end
		#end
		return sb.toString();
	}

}
